# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from endurosat_api.api_client import ApiClient
from endurosat_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MissionDatabasesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_mission_database(self, mission_database, **kwargs):  # noqa: E501
        """Create a Mission Database  # noqa: E501

        This method creates new mission database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_mission_database(mission_database, async_req=True)
        >>> result = thread.get()

        :param mission_database: (required)
        :type mission_database: MissionDatabase
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.create_mission_database_with_http_info(mission_database, **kwargs)  # noqa: E501

    def create_mission_database_with_http_info(self, mission_database, **kwargs):  # noqa: E501
        """Create a Mission Database  # noqa: E501

        This method creates new mission database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_mission_database_with_http_info(mission_database, async_req=True)
        >>> result = thread.get()

        :param mission_database: (required)
        :type mission_database: MissionDatabase
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'mission_database'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mission_database" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mission_database' is set
        if self.api_client.client_side_validation and ('mission_database' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database` when calling `create_mission_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mission_database' in local_var_params:
            body_params = local_var_params['mission_database']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            201: "str",
        }

        return self.api_client.call_api(
            '/mission-databases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_mission_database_package(self, fidl_package, **kwargs):  # noqa: E501
        """Generate fidl parsers and mission databases from deployment model  # noqa: E501

        This method generates new parsers and mission databases based on deploy model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_mission_database_package(fidl_package, async_req=True)
        >>> result = thread.get()

        :param fidl_package: The archive containing the fidl files and deployment model (required)
        :type fidl_package: file
        :param deployment_model: Name of .fdepl deployment model file (excluding the .fdepl extension)
        :type deployment_model: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.create_mission_database_package_with_http_info(fidl_package, **kwargs)  # noqa: E501

    def create_mission_database_package_with_http_info(self, fidl_package, **kwargs):  # noqa: E501
        """Generate fidl parsers and mission databases from deployment model  # noqa: E501

        This method generates new parsers and mission databases based on deploy model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_mission_database_package_with_http_info(fidl_package, async_req=True)
        >>> result = thread.get()

        :param fidl_package: The archive containing the fidl files and deployment model (required)
        :type fidl_package: file
        :param deployment_model: Name of .fdepl deployment model file (excluding the .fdepl extension)
        :type deployment_model: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'fidl_package',
            'deployment_model'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mission_database_package" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'fidl_package' is set
        if self.api_client.client_side_validation and ('fidl_package' not in local_var_params or  # noqa: E501
                                                        local_var_params['fidl_package'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `fidl_package` when calling `create_mission_database_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'fidl_package' in local_var_params:
            local_var_files['fidlPackage'] = local_var_params['fidl_package']  # noqa: E501
        if 'deployment_model' in local_var_params:
            form_params.append(('deploymentModel', local_var_params['deployment_model']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            201: "str",
        }

        return self.api_client.call_api(
            '/mission-databases/fidl-packages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_procedure_scripts(self, mission_database_id, procedure_description, procedure_name, procedure_scripts, **kwargs):  # noqa: E501
        """Upload mission database operation script  # noqa: E501

        This method will upload .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_procedure_scripts(mission_database_id, procedure_description, procedure_name, procedure_scripts, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database (required)
        :type mission_database_id: str
        :param procedure_description: Short explanation what is the script expected to do (required)
        :type procedure_description: str
        :param procedure_name: Short explanation what is the script expected to do (required)
        :type procedure_name: str
        :param procedure_scripts: The archive containing the operation scripts (required)
        :type procedure_scripts: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.create_procedure_scripts_with_http_info(mission_database_id, procedure_description, procedure_name, procedure_scripts, **kwargs)  # noqa: E501

    def create_procedure_scripts_with_http_info(self, mission_database_id, procedure_description, procedure_name, procedure_scripts, **kwargs):  # noqa: E501
        """Upload mission database operation script  # noqa: E501

        This method will upload .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_procedure_scripts_with_http_info(mission_database_id, procedure_description, procedure_name, procedure_scripts, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database (required)
        :type mission_database_id: str
        :param procedure_description: Short explanation what is the script expected to do (required)
        :type procedure_description: str
        :param procedure_name: Short explanation what is the script expected to do (required)
        :type procedure_name: str
        :param procedure_scripts: The archive containing the operation scripts (required)
        :type procedure_scripts: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'mission_database_id',
            'procedure_description',
            'procedure_name',
            'procedure_scripts'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_procedure_scripts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mission_database_id' is set
        if self.api_client.client_side_validation and ('mission_database_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database_id` when calling `create_procedure_scripts`")  # noqa: E501
        # verify the required parameter 'procedure_description' is set
        if self.api_client.client_side_validation and ('procedure_description' not in local_var_params or  # noqa: E501
                                                        local_var_params['procedure_description'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `procedure_description` when calling `create_procedure_scripts`")  # noqa: E501
        # verify the required parameter 'procedure_name' is set
        if self.api_client.client_side_validation and ('procedure_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['procedure_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `procedure_name` when calling `create_procedure_scripts`")  # noqa: E501
        # verify the required parameter 'procedure_scripts' is set
        if self.api_client.client_side_validation and ('procedure_scripts' not in local_var_params or  # noqa: E501
                                                        local_var_params['procedure_scripts'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `procedure_scripts` when calling `create_procedure_scripts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_database_id' in local_var_params:
            path_params['missionDatabaseId'] = local_var_params['mission_database_id']  # noqa: E501

        query_params = []
        if 'procedure_description' in local_var_params and local_var_params['procedure_description'] is not None:  # noqa: E501
            query_params.append(('procedureDescription', local_var_params['procedure_description']))  # noqa: E501
        if 'procedure_name' in local_var_params and local_var_params['procedure_name'] is not None:  # noqa: E501
            query_params.append(('procedureName', local_var_params['procedure_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'procedure_scripts' in local_var_params:
            local_var_files['procedureScripts'] = local_var_params['procedure_scripts']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            201: "str",
            403: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/mission-databases/{missionDatabaseId}/procedure-scripts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_mission_database(self, mission_database_id, **kwargs):  # noqa: E501
        """Delete a MissionDatabase by ID  # noqa: E501

        This method deletes a MissionDatabase with the specified ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_mission_database(mission_database_id, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the MissionDatabase to delete (required)
        :type mission_database_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_mission_database_with_http_info(mission_database_id, **kwargs)  # noqa: E501

    def delete_mission_database_with_http_info(self, mission_database_id, **kwargs):  # noqa: E501
        """Delete a MissionDatabase by ID  # noqa: E501

        This method deletes a MissionDatabase with the specified ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_mission_database_with_http_info(mission_database_id, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the MissionDatabase to delete (required)
        :type mission_database_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'mission_database_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mission_database" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mission_database_id' is set
        if self.api_client.client_side_validation and ('mission_database_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database_id` when calling `delete_mission_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_database_id' in local_var_params:
            path_params['missionDatabaseId'] = local_var_params['mission_database_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/mission-databases/{missionDatabaseId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_mission_database_package(self, package_id, **kwargs):  # noqa: E501
        """Delete all files and mission databases for package  # noqa: E501

        This method deletes a Mission Database Package with the specified ID along with all associated mission databases and files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_mission_database_package(package_id, async_req=True)
        >>> result = thread.get()

        :param package_id: ID of the Mission Database Package to delete (required)
        :type package_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_mission_database_package_with_http_info(package_id, **kwargs)  # noqa: E501

    def delete_mission_database_package_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """Delete all files and mission databases for package  # noqa: E501

        This method deletes a Mission Database Package with the specified ID along with all associated mission databases and files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_mission_database_package_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param package_id: ID of the Mission Database Package to delete (required)
        :type package_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'package_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mission_database_package" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if self.api_client.client_side_validation and ('package_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['package_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `package_id` when calling `delete_mission_database_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/mission-databases/fidl-packages/{packageId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_procedure_scripts(self, mission_database_id, procedure_name, **kwargs):  # noqa: E501
        """Delete a script for this mission database  # noqa: E501

        This method deletes a Mission Database Package with the specified ID along with all associated mission databases and files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_procedure_scripts(mission_database_id, procedure_name, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database (required)
        :type mission_database_id: str
        :param procedure_name: Name of the procedure script that will be deleted (required)
        :type procedure_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_procedure_scripts_with_http_info(mission_database_id, procedure_name, **kwargs)  # noqa: E501

    def delete_procedure_scripts_with_http_info(self, mission_database_id, procedure_name, **kwargs):  # noqa: E501
        """Delete a script for this mission database  # noqa: E501

        This method deletes a Mission Database Package with the specified ID along with all associated mission databases and files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_procedure_scripts_with_http_info(mission_database_id, procedure_name, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database (required)
        :type mission_database_id: str
        :param procedure_name: Name of the procedure script that will be deleted (required)
        :type procedure_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'mission_database_id',
            'procedure_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_procedure_scripts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mission_database_id' is set
        if self.api_client.client_side_validation and ('mission_database_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database_id` when calling `delete_procedure_scripts`")  # noqa: E501
        # verify the required parameter 'procedure_name' is set
        if self.api_client.client_side_validation and ('procedure_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['procedure_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `procedure_name` when calling `delete_procedure_scripts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_database_id' in local_var_params:
            path_params['missionDatabaseId'] = local_var_params['mission_database_id']  # noqa: E501
        if 'procedure_name' in local_var_params:
            path_params['procedureName'] = local_var_params['procedure_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/mission-databases/{missionDatabaseId}/procedure-scripts/{procedureName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_filtered_mission_database(self, **kwargs):  # noqa: E501
        """Get Mission Databases  # noqa: E501

        This method returns a filtered list of Mission Databases for a satellite. Mission Databases could be filtered by Satellite, Satellite Subsytem, name and type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_filtered_mission_database(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the Satellite for which the Mission Database is applicable
        :type satellite_id: str
        :param satellite_subsystem_id: Specifies the Satellite Subsystem for which the Mission Database is applicable
        :type satellite_subsystem_id: str
        :param name: Specifies the name of the Mission Database
        :type name: str
        :param type: Specifies the type of the Mission Database
        :type type: str
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MissionDatabasesResultPage
        """
        kwargs['_return_http_data_only'] = True
        return self.get_filtered_mission_database_with_http_info(**kwargs)  # noqa: E501

    def get_filtered_mission_database_with_http_info(self, **kwargs):  # noqa: E501
        """Get Mission Databases  # noqa: E501

        This method returns a filtered list of Mission Databases for a satellite. Mission Databases could be filtered by Satellite, Satellite Subsytem, name and type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_filtered_mission_database_with_http_info(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the Satellite for which the Mission Database is applicable
        :type satellite_id: str
        :param satellite_subsystem_id: Specifies the Satellite Subsystem for which the Mission Database is applicable
        :type satellite_subsystem_id: str
        :param name: Specifies the name of the Mission Database
        :type name: str
        :param type: Specifies the type of the Mission Database
        :type type: str
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MissionDatabasesResultPage, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'satellite_id',
            'satellite_subsystem_id',
            'name',
            'type',
            'last_evaluated_item',
            'page_size_limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filtered_mission_database" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'satellite_id' in local_var_params and local_var_params['satellite_id'] is not None:  # noqa: E501
            query_params.append(('satelliteId', local_var_params['satellite_id']))  # noqa: E501
        if 'satellite_subsystem_id' in local_var_params and local_var_params['satellite_subsystem_id'] is not None:  # noqa: E501
            query_params.append(('satelliteSubsystemId', local_var_params['satellite_subsystem_id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'last_evaluated_item' in local_var_params and local_var_params['last_evaluated_item'] is not None:  # noqa: E501
            query_params.append(('lastEvaluatedItem', local_var_params['last_evaluated_item']))  # noqa: E501
        if 'page_size_limit' in local_var_params and local_var_params['page_size_limit'] is not None:  # noqa: E501
            query_params.append(('pageSizeLimit', local_var_params['page_size_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            200: "MissionDatabasesResultPage",
        }

        return self.api_client.call_api(
            '/mission-databases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_mission_database_by_id(self, mission_database_id, **kwargs):  # noqa: E501
        """Get Mission Database By ID  # noqa: E501

        This method returns a Mission Database by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_by_id(mission_database_id, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database to get (required)
        :type mission_database_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MissionDatabase
        """
        kwargs['_return_http_data_only'] = True
        return self.get_mission_database_by_id_with_http_info(mission_database_id, **kwargs)  # noqa: E501

    def get_mission_database_by_id_with_http_info(self, mission_database_id, **kwargs):  # noqa: E501
        """Get Mission Database By ID  # noqa: E501

        This method returns a Mission Database by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_by_id_with_http_info(mission_database_id, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database to get (required)
        :type mission_database_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MissionDatabase, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'mission_database_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mission_database_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mission_database_id' is set
        if self.api_client.client_side_validation and ('mission_database_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database_id` when calling `get_mission_database_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_database_id' in local_var_params:
            path_params['missionDatabaseId'] = local_var_params['mission_database_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            200: "MissionDatabase",
            403: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/mission-databases/{missionDatabaseId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_mission_database_definition(self, mission_database_id, **kwargs):  # noqa: E501
        """Get Mission Database Definition by Mission Database ID  # noqa: E501

        This method returns a Mission Database Definition based on the ID of a Mission Database for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_definition(mission_database_id, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database for which to get the Definition (required)
        :type mission_database_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_mission_database_definition_with_http_info(mission_database_id, **kwargs)  # noqa: E501

    def get_mission_database_definition_with_http_info(self, mission_database_id, **kwargs):  # noqa: E501
        """Get Mission Database Definition by Mission Database ID  # noqa: E501

        This method returns a Mission Database Definition based on the ID of a Mission Database for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_definition_with_http_info(mission_database_id, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database for which to get the Definition (required)
        :type mission_database_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'mission_database_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mission_database_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mission_database_id' is set
        if self.api_client.client_side_validation and ('mission_database_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database_id` when calling `get_mission_database_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_database_id' in local_var_params:
            path_params['missionDatabaseId'] = local_var_params['mission_database_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            200: "str",
        }

        return self.api_client.call_api(
            '/mission-databases/{missionDatabaseId}/definition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_mission_database_packag_by_id(self, package_id, **kwargs):  # noqa: E501
        """Get mission database package  # noqa: E501

        This method returns a mission database package by Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_packag_by_id(package_id, async_req=True)
        >>> result = thread.get()

        :param package_id: ID of the package generated from the fidl source (required)
        :type package_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MissionDatabasePackage
        """
        kwargs['_return_http_data_only'] = True
        return self.get_mission_database_packag_by_id_with_http_info(package_id, **kwargs)  # noqa: E501

    def get_mission_database_packag_by_id_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """Get mission database package  # noqa: E501

        This method returns a mission database package by Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_packag_by_id_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param package_id: ID of the package generated from the fidl source (required)
        :type package_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MissionDatabasePackage, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'package_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mission_database_packag_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if self.api_client.client_side_validation and ('package_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['package_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `package_id` when calling `get_mission_database_packag_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            200: "MissionDatabasePackage",
        }

        return self.api_client.call_api(
            '/mission-databases/fidl-packages/{packageId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_mission_database_package_source_by_id(self, package_id, **kwargs):  # noqa: E501
        """Get fidl package source  # noqa: E501

        This method returns a url to download the archive with fidl files used for the generation of the package.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_package_source_by_id(package_id, async_req=True)
        >>> result = thread.get()

        :param package_id: ID of the package generated from the fidl source (required)
        :type package_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.get_mission_database_package_source_by_id_with_http_info(package_id, **kwargs)  # noqa: E501

    def get_mission_database_package_source_by_id_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """Get fidl package source  # noqa: E501

        This method returns a url to download the archive with fidl files used for the generation of the package.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_package_source_by_id_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param package_id: ID of the package generated from the fidl source (required)
        :type package_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'package_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mission_database_package_source_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if self.api_client.client_side_validation and ('package_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['package_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `package_id` when calling `get_mission_database_package_source_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/mission-databases/fidl-packages/{packageId}/source', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_mission_database_parser(self, mission_database_id, **kwargs):  # noqa: E501
        """Get URL from which to download Mission Database Fidl Parser by Mission Database ID  # noqa: E501

        This method returns a URL from which to download Mission Database Parser based on the ID of a Mission Database for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_parser(mission_database_id, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database for which to get the URL (required)
        :type mission_database_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_mission_database_parser_with_http_info(mission_database_id, **kwargs)  # noqa: E501

    def get_mission_database_parser_with_http_info(self, mission_database_id, **kwargs):  # noqa: E501
        """Get URL from which to download Mission Database Fidl Parser by Mission Database ID  # noqa: E501

        This method returns a URL from which to download Mission Database Parser based on the ID of a Mission Database for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_parser_with_http_info(mission_database_id, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database for which to get the URL (required)
        :type mission_database_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'mission_database_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mission_database_parser" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mission_database_id' is set
        if self.api_client.client_side_validation and ('mission_database_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database_id` when calling `get_mission_database_parser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_database_id' in local_var_params:
            path_params['missionDatabaseId'] = local_var_params['mission_database_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            200: "str",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/mission-databases/{missionDatabaseId}/parser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_mission_database_procedure_script(self, mission_database_id, procedure_name, **kwargs):  # noqa: E501
        """Get Mission Database Procedure by Mission Database ID and Procedure Name  # noqa: E501

        This method returns a Mission Database Procedure based on the ID of a Mission Database and Procedure Name for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_procedure_script(mission_database_id, procedure_name, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database for which to get the Procedure (required)
        :type mission_database_id: str
        :param procedure_name: Name of the Procedure (required)
        :type procedure_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_mission_database_procedure_script_with_http_info(mission_database_id, procedure_name, **kwargs)  # noqa: E501

    def get_mission_database_procedure_script_with_http_info(self, mission_database_id, procedure_name, **kwargs):  # noqa: E501
        """Get Mission Database Procedure by Mission Database ID and Procedure Name  # noqa: E501

        This method returns a Mission Database Procedure based on the ID of a Mission Database and Procedure Name for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mission_database_procedure_script_with_http_info(mission_database_id, procedure_name, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the Mission Database for which to get the Procedure (required)
        :type mission_database_id: str
        :param procedure_name: Name of the Procedure (required)
        :type procedure_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'mission_database_id',
            'procedure_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mission_database_procedure_script" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mission_database_id' is set
        if self.api_client.client_side_validation and ('mission_database_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database_id` when calling `get_mission_database_procedure_script`")  # noqa: E501
        # verify the required parameter 'procedure_name' is set
        if self.api_client.client_side_validation and ('procedure_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['procedure_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `procedure_name` when calling `get_mission_database_procedure_script`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_database_id' in local_var_params:
            path_params['missionDatabaseId'] = local_var_params['mission_database_id']  # noqa: E501
        if 'procedure_name' in local_var_params:
            path_params['procedureName'] = local_var_params['procedure_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            200: "str",
        }

        return self.api_client.call_api(
            '/mission-databases/{missionDatabaseId}/procedure/{procedureName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_mission_database(self, mission_database_id, mission_database, **kwargs):  # noqa: E501
        """Update a MissionDatabase  # noqa: E501

        This method updates a MissionDatabase by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mission_database(mission_database_id, mission_database, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the MissionDatabase to update (required)
        :type mission_database_id: str
        :param mission_database: (required)
        :type mission_database: MissionDatabase
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.update_mission_database_with_http_info(mission_database_id, mission_database, **kwargs)  # noqa: E501

    def update_mission_database_with_http_info(self, mission_database_id, mission_database, **kwargs):  # noqa: E501
        """Update a MissionDatabase  # noqa: E501

        This method updates a MissionDatabase by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mission_database_with_http_info(mission_database_id, mission_database, async_req=True)
        >>> result = thread.get()

        :param mission_database_id: ID of the MissionDatabase to update (required)
        :type mission_database_id: str
        :param mission_database: (required)
        :type mission_database: MissionDatabase
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'mission_database_id',
            'mission_database'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_mission_database" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mission_database_id' is set
        if self.api_client.client_side_validation and ('mission_database_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database_id` when calling `update_mission_database`")  # noqa: E501
        # verify the required parameter 'mission_database' is set
        if self.api_client.client_side_validation and ('mission_database' not in local_var_params or  # noqa: E501
                                                        local_var_params['mission_database'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mission_database` when calling `update_mission_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_database_id' in local_var_params:
            path_params['missionDatabaseId'] = local_var_params['mission_database_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mission_database' in local_var_params:
            body_params = local_var_params['mission_database']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/mission-databases/{missionDatabaseId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
