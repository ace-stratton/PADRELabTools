# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from endurosat_api.api_client import ApiClient
from endurosat_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class GroundStationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_unavailability_windows_by_ground_station_by_id(self, ground_station_id, unavailability_window, **kwargs):  # noqa: E501
        """Add an Unavailability Window to a Ground Station  # noqa: E501

        This method adds an Unavailability Window to a specified Ground Station  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_unavailability_windows_by_ground_station_by_id(ground_station_id, unavailability_window, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station for which add Unavailability Windows (required)
        :type ground_station_id: str
        :param unavailability_window: (required)
        :type unavailability_window: UnavailabilityWindow
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.add_unavailability_windows_by_ground_station_by_id_with_http_info(ground_station_id, unavailability_window, **kwargs)  # noqa: E501

    def add_unavailability_windows_by_ground_station_by_id_with_http_info(self, ground_station_id, unavailability_window, **kwargs):  # noqa: E501
        """Add an Unavailability Window to a Ground Station  # noqa: E501

        This method adds an Unavailability Window to a specified Ground Station  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_unavailability_windows_by_ground_station_by_id_with_http_info(ground_station_id, unavailability_window, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station for which add Unavailability Windows (required)
        :type ground_station_id: str
        :param unavailability_window: (required)
        :type unavailability_window: UnavailabilityWindow
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ground_station_id',
            'unavailability_window'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_unavailability_windows_by_ground_station_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ground_station_id' is set
        if self.api_client.client_side_validation and ('ground_station_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ground_station_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ground_station_id` when calling `add_unavailability_windows_by_ground_station_by_id`")  # noqa: E501
        # verify the required parameter 'unavailability_window' is set
        if self.api_client.client_side_validation and ('unavailability_window' not in local_var_params or  # noqa: E501
                                                        local_var_params['unavailability_window'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `unavailability_window` when calling `add_unavailability_windows_by_ground_station_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ground_station_id' in local_var_params:
            path_params['groundStationId'] = local_var_params['ground_station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unavailability_window' in local_var_params:
            body_params = local_var_params['unavailability_window']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/ground-stations/{groundStationId}/unavailability-windows', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_ground_station(self, ground_station, **kwargs):  # noqa: E501
        """Create a new Ground Station  # noqa: E501

        This method creates a new Ground Stations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_ground_station(ground_station, async_req=True)
        >>> result = thread.get()

        :param ground_station: (required)
        :type ground_station: GroundStation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.create_ground_station_with_http_info(ground_station, **kwargs)  # noqa: E501

    def create_ground_station_with_http_info(self, ground_station, **kwargs):  # noqa: E501
        """Create a new Ground Station  # noqa: E501

        This method creates a new Ground Stations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_ground_station_with_http_info(ground_station, async_req=True)
        >>> result = thread.get()

        :param ground_station: (required)
        :type ground_station: GroundStation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ground_station'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ground_station" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ground_station' is set
        if self.api_client.client_side_validation and ('ground_station' not in local_var_params or  # noqa: E501
                                                        local_var_params['ground_station'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ground_station` when calling `create_ground_station`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ground_station' in local_var_params:
            body_params = local_var_params['ground_station']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/ground-stations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_ground_station(self, ground_station_id, **kwargs):  # noqa: E501
        """Delete a Ground Station by ID  # noqa: E501

        This method deletes a Ground Station with the specified ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_ground_station(ground_station_id, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station to delete (required)
        :type ground_station_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_ground_station_with_http_info(ground_station_id, **kwargs)  # noqa: E501

    def delete_ground_station_with_http_info(self, ground_station_id, **kwargs):  # noqa: E501
        """Delete a Ground Station by ID  # noqa: E501

        This method deletes a Ground Station with the specified ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_ground_station_with_http_info(ground_station_id, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station to delete (required)
        :type ground_station_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ground_station_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ground_station" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ground_station_id' is set
        if self.api_client.client_side_validation and ('ground_station_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ground_station_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ground_station_id` when calling `delete_ground_station`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ground_station_id' in local_var_params:
            path_params['groundStationId'] = local_var_params['ground_station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/ground-stations/{groundStationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_unavailability_window(self, ground_station_id, unavailability_window_id, **kwargs):  # noqa: E501
        """Delete an Unavailability Window from a Ground Station  # noqa: E501

        This method deletes an Unavailability Window from a specified Ground Station  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_unavailability_window(ground_station_id, unavailability_window_id, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station for which delete Unavailability Windows (required)
        :type ground_station_id: str
        :param unavailability_window_id: ID of the Unavailability Window to delete (required)
        :type unavailability_window_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_unavailability_window_with_http_info(ground_station_id, unavailability_window_id, **kwargs)  # noqa: E501

    def delete_unavailability_window_with_http_info(self, ground_station_id, unavailability_window_id, **kwargs):  # noqa: E501
        """Delete an Unavailability Window from a Ground Station  # noqa: E501

        This method deletes an Unavailability Window from a specified Ground Station  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_unavailability_window_with_http_info(ground_station_id, unavailability_window_id, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station for which delete Unavailability Windows (required)
        :type ground_station_id: str
        :param unavailability_window_id: ID of the Unavailability Window to delete (required)
        :type unavailability_window_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ground_station_id',
            'unavailability_window_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_unavailability_window" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ground_station_id' is set
        if self.api_client.client_side_validation and ('ground_station_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ground_station_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ground_station_id` when calling `delete_unavailability_window`")  # noqa: E501
        # verify the required parameter 'unavailability_window_id' is set
        if self.api_client.client_side_validation and ('unavailability_window_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['unavailability_window_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `unavailability_window_id` when calling `delete_unavailability_window`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ground_station_id' in local_var_params:
            path_params['groundStationId'] = local_var_params['ground_station_id']  # noqa: E501
        if 'unavailability_window_id' in local_var_params:
            path_params['unavailabilityWindowId'] = local_var_params['unavailability_window_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/ground-stations/{groundStationId}/unavailability-windows/{unavailabilityWindowId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_all_ground_stations(self, **kwargs):  # noqa: E501
        """Get all Ground Stations  # noqa: E501

        This method returns a list of all Ground Stations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_ground_stations(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[GroundStation]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_ground_stations_with_http_info(**kwargs)  # noqa: E501

    def get_all_ground_stations_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Ground Stations  # noqa: E501

        This method returns a list of all Ground Stations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_ground_stations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[GroundStation], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ground_stations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            200: "list[GroundStation]",
            401: "ErrorResponse",
            403: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/ground-stations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_ground_station_by_id(self, ground_station_id, **kwargs):  # noqa: E501
        """Get a Ground Station by ID  # noqa: E501

        This method returns a Ground Station by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ground_station_by_id(ground_station_id, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station to get (required)
        :type ground_station_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GroundStation
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ground_station_by_id_with_http_info(ground_station_id, **kwargs)  # noqa: E501

    def get_ground_station_by_id_with_http_info(self, ground_station_id, **kwargs):  # noqa: E501
        """Get a Ground Station by ID  # noqa: E501

        This method returns a Ground Station by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ground_station_by_id_with_http_info(ground_station_id, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station to get (required)
        :type ground_station_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GroundStation, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'ground_station_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ground_station_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ground_station_id' is set
        if self.api_client.client_side_validation and ('ground_station_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ground_station_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ground_station_id` when calling `get_ground_station_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ground_station_id' in local_var_params:
            path_params['groundStationId'] = local_var_params['ground_station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            200: "GroundStation",
            403: "ErrorResponse",
            404: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/ground-stations/{groundStationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_unavailability_windows_by_ground_station_by_id(self, ground_station_id, **kwargs):  # noqa: E501
        """Get all Unavailability Windowss for a Ground Station  # noqa: E501

        This method returns a list of all Unavailability Windows for a specified Ground Station  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_unavailability_windows_by_ground_station_by_id(ground_station_id, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station for which to return Unavailability Windows (required)
        :type ground_station_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[UnavailabilityWindow]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_unavailability_windows_by_ground_station_by_id_with_http_info(ground_station_id, **kwargs)  # noqa: E501

    def get_unavailability_windows_by_ground_station_by_id_with_http_info(self, ground_station_id, **kwargs):  # noqa: E501
        """Get all Unavailability Windowss for a Ground Station  # noqa: E501

        This method returns a list of all Unavailability Windows for a specified Ground Station  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_unavailability_windows_by_ground_station_by_id_with_http_info(ground_station_id, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station for which to return Unavailability Windows (required)
        :type ground_station_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[UnavailabilityWindow], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'ground_station_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unavailability_windows_by_ground_station_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ground_station_id' is set
        if self.api_client.client_side_validation and ('ground_station_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ground_station_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ground_station_id` when calling `get_unavailability_windows_by_ground_station_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ground_station_id' in local_var_params:
            path_params['groundStationId'] = local_var_params['ground_station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            200: "list[UnavailabilityWindow]",
            401: "ErrorResponse",
            403: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/ground-stations/{groundStationId}/unavailability-windows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_ground_station(self, ground_station_id, ground_station, **kwargs):  # noqa: E501
        """Update a Ground Station  # noqa: E501

        This method updates a Ground Station by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ground_station(ground_station_id, ground_station, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station to update (required)
        :type ground_station_id: str
        :param ground_station: (required)
        :type ground_station: GroundStation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.update_ground_station_with_http_info(ground_station_id, ground_station, **kwargs)  # noqa: E501

    def update_ground_station_with_http_info(self, ground_station_id, ground_station, **kwargs):  # noqa: E501
        """Update a Ground Station  # noqa: E501

        This method updates a Ground Station by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ground_station_with_http_info(ground_station_id, ground_station, async_req=True)
        >>> result = thread.get()

        :param ground_station_id: ID of the Ground Station to update (required)
        :type ground_station_id: str
        :param ground_station: (required)
        :type ground_station: GroundStation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ground_station_id',
            'ground_station'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ground_station" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ground_station_id' is set
        if self.api_client.client_side_validation and ('ground_station_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ground_station_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ground_station_id` when calling `update_ground_station`")  # noqa: E501
        # verify the required parameter 'ground_station' is set
        if self.api_client.client_side_validation and ('ground_station' not in local_var_params or  # noqa: E501
                                                        local_var_params['ground_station'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ground_station` when calling `update_ground_station`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ground_station_id' in local_var_params:
            path_params['groundStationId'] = local_var_params['ground_station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ground_station' in local_var_params:
            body_params = local_var_params['ground_station']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/ground-stations/{groundStationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
