# ********************************************************************************************
# * @file EPSII_BP_1ClientApp.py
# * @brief MAC FP client Python implementation generator
# ********************************************************************************************
# * @version           interface EPSII_BP_1 v5.0
# *
# * @copyright         (C) Copyright EnduroSat
# *
# *                    Contents and presentations are protected world-wide.
# *                    Any kind of using, copying etc. is prohibited without prior permission.
# *                    All rights - incl. industrial property rights - are reserved.
# *
# *-------------------------------------------------------------------------------------------
# * GENERATOR: org.endurosat.generators.macchiato.binders.Gen_Py v1.11
# *-------------------------------------------------------------------------------------------
# * !!! Please note that this code is fully GENERATED and shall not be manually modified as
# * all changes will be overwritten !!!
# ********************************************************************************************

from .SerDesHelpers import SerDesHelpers

class FP_API_EPSII_BP_1:
    def __init__(self, rawSerDesSupport : bool = False):
        self.const_EPSII_BP_1_PROTOCOL_ID = 21
        self.rawSerDesSupport = rawSerDesSupport
        self.versionMajor=5
        self.versionMinor=0


        #
        # Response parsers map
        #
        self.responseParsersDict = {}
        self.responseParsersDict[1] = self.resp_GetDeviceInfo
        self.responseParsersDict[2] = self.resp_GetRAWSensors
        self.responseParsersDict[3] = self.resp_GetBatteryInfo
        self.responseParsersDict[4] = self.resp_GetDeviceHealthInfo
        self.responseParsersDict[80] = self.resp_SetBatHeaterSettings
        self.responseParsersDict[81] = self.resp_GetBatHeaterSettings
        self.responseParsersDict[7] = self.resp_SetBasicSettings
        self.responseParsersDict[8] = self.resp_GetBasicSettings
        self.responseParsersDict[11] = self.resp_GetBasicAppExceptions
        self.responseParsersDict[12] = self.resp_GetBasicAppErrCounters
        self.responseParsersDict[13] = self.resp_GetMainAppExceptions
        self.responseParsersDict[14] = self.resp_GetMainAppErrCounters
        self.responseParsersDict[15] = self.resp_OnESCP_ResetMainAppErrCounters
        self.responseParsersDict[16] = self.resp_OnESCP_ResetMainAppExceptions
        self.responseParsersDict[17] = self.resp_OnESCP_ResetBasicAppErrCounters
        self.responseParsersDict[18] = self.resp_OnESCP_ResetBasicAppExceptions
        self.responseParsersDict[19] = self.resp_GetBalancerStatus
        self.responseParsersDict[32] = self.resp_ResetDevice
        self.responseParsersDict[33] = self.resp_ForceInstallMainApp
        self.responseParsersDict[34] = self.resp_ForceInstallBasicApp
        self.responseParsersDict[35] = self.resp_GetBootLoaderErrCounters
        self.responseParsersDict[36] = self.resp_ResetBootLdrErrCounters
        self.responseParsersDict[37] = self.resp_SetChargerSettings
        self.responseParsersDict[38] = self.resp_SetRTC
        self.responseParsersDict[39] = self.resp_GetRTC
        self.responseParsersDict[40] = self.resp_LeaveNoHibMode
        self.responseParsersDict[41] = self.resp_RequestPowerDown
        self.responseParsersDict[49] = self.resp_GetBpModeSmRollingTrace
        self.responseParsersDict[50] = self.resp_SetBpReleaseLine
        self.responseParsersDict[51] = self.resp_GetBpReleaseLine

    class enum_EPSIIT_ReservedValues:
        EPSIIT_RESERVEDVALUES_ESEPSIISSVBP_MAX_VAL = 2147483632
        EPSIIT_RESERVEDVALUES_ESEPSIISSVBP_UNKNOWN_VAL = 2147483647
        EPSIIT_RESERVEDVALUES_ESEPSIISSVBP_ERROR_VAL = 2147483646
    
        ValuesDict = {
            EPSIIT_RESERVEDVALUES_ESEPSIISSVBP_MAX_VAL : 'EPSIIT_RESERVEDVALUES_ESEPSIISSVBP_MAX_VAL', 
            EPSIIT_RESERVEDVALUES_ESEPSIISSVBP_UNKNOWN_VAL : 'EPSIIT_RESERVEDVALUES_ESEPSIISSVBP_UNKNOWN_VAL', 
            EPSIIT_RESERVEDVALUES_ESEPSIISSVBP_ERROR_VAL : 'EPSIIT_RESERVEDVALUES_ESEPSIISSVBP_ERROR_VAL'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_EPSIIT_ReservedValues()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_EPSIIT_ReservedValues.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_EPSIIT_ReservedValues.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 4
    
    class enum_EPSIIT_SensorIDs:
        EPSIIT_SENSORIDS_EPSIIT_NULL_ID = 0
        EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_I_ID = 1
        EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_U_ID = 2
        EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_P_ID = 3
        EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_T_ID = 4
        EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_I_ID = 5
        EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_U_ID = 6
        EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_P_ID = 7
        EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_T_ID = 8
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_U_ID = 9
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_I_ID = 10
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_P_ID = 11
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_1_U_ID = 12
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_2_U_ID = 13
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_3_U_ID = 14
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_4_U_ID = 15
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_5_U_ID = 16
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_6_U_ID = 17
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_7_U_ID = 18
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_8_U_ID = 19
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_SUM_CELL_U_ID = 20
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_INT_TEMP_ID = 21
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS0_ID = 22
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS1_ID = 23
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS2_ID = 24
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS3_ID = 25
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL0_ID = 26
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL1_ID = 27
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL2_ID = 28
        EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL3_ID = 29
        EPSIIT_SENSORIDS_EPSIIT_RESERVED_0_ID = 30
        EPSIIT_SENSORIDS_EPSIIT_RESERVED_1_ID = 31
        EPSIIT_SENSORIDS_EPSIIT_RESERVED_2_ID = 32
        EPSIIT_SENSORIDS_EPSIIT_RESERVED_3_ID = 33
        EPSIIT_SENSORIDS_EPSIIT_RESERVED_4_ID = 34
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_CHARGER_ID = 35
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_SYSTEM_ID = 36
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_SUPPLY_ID = 37
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_CHRG_FAULTS_ID = 38
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_TBAT_ID = 39
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_POUT_ID = 40
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_PIN_ID = 41
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_EFF_ID = 42
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_IOUT_ID = 43
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_IIN_ID = 44
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_VBAT_ID = 45
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_VIN_ID = 46
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_VINR_ID = 47
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_CHARGER_ID = 48
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_SYSTEM_ID = 49
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_SUPPLY_ID = 50
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_CHRG_FAULTS_ID = 51
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_TBAT_ID = 52
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_POUT_ID = 53
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_PIN_ID = 54
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_EFF_ID = 55
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_IOUT_ID = 56
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_IIN_ID = 57
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_VBAT_ID = 58
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_VIN_ID = 59
        EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_VINR_ID = 60
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_CHARGER_ID = 61
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_SYSTEM_ID = 62
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_SUPPLY_ID = 63
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_CHRG_FAULTS_ID = 64
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_TBAT_ID = 65
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_POUT_ID = 66
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_PIN_ID = 67
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_EFF_ID = 68
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_IOUT_ID = 69
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_IIN_ID = 70
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_VBAT_ID = 71
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_VIN_ID = 72
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_VINR_ID = 73
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_CHARGER_ID = 74
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_SYSTEM_ID = 75
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_SUPPLY_ID = 76
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_CHRG_FAULTS_ID = 77
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_TBAT_ID = 78
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_POUT_ID = 79
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_PIN_ID = 80
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_EFF_ID = 81
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_IOUT_ID = 82
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_IIN_ID = 83
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_VBAT_ID = 84
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_VIN_ID = 85
        EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_VINR_ID = 86
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_CHARGER_ID = 87
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_SYSTEM_ID = 88
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_SUPPLY_ID = 89
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_CHRG_FAULTS_ID = 90
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_TBAT_ID = 91
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_POUT_ID = 92
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_PIN_ID = 93
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_EFF_ID = 94
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_IOUT_ID = 95
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_IIN_ID = 96
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_VBAT_ID = 97
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_VIN_ID = 98
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_VINR_ID = 99
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_CHARGER_ID = 100
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_SYSTEM_ID = 101
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_SUPPLY_ID = 102
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_CHRG_FAULTS_ID = 103
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_TBAT_ID = 104
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_POUT_ID = 105
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_PIN_ID = 106
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_EFF_ID = 107
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_IOUT_ID = 108
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_IIN_ID = 109
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_VBAT_ID = 110
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_VIN_ID = 111
        EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_VINR_ID = 112
        EPSIIT_SENSORIDS_EPSIIT_BP_TEMPERATURE_PCB_1_ID = 113
        EPSIIT_SENSORIDS_EPSIIT_BP_TEMPERATURE_PCB_2_ID = 114
        EPSIIT_SENSORIDS_EPSIIT_ADC_CPU_T_ID = 115
        EPSIIT_SENSORIDS_EPSIIT_ADC_CPU_AVCC_U_ID = 116
        EPSIIT_SENSORIDS_EPSIIT_ADC_BAT_TEMP_NTC1_ID = 117
        EPSIIT_SENSORIDS_EPSIIT_ADC_BAT_TEMP_NTC2_ID = 118
        EPSIIT_SENSORIDS_EPSIIT_ADC_RAD_FED_ID = 119
        EPSIIT_SENSORIDS_EPSIIT_HEATER_PWM_PERCENT_ID = 120
        EPSIIT_SENSORIDS_EPSIIT_HEATER_TARGET_TEMP_ID = 121
        EPSIIT_SENSORIDS_EPSIIT_BAT_CHARGE_WH_ID = 122
    
        ValuesDict = {
            EPSIIT_SENSORIDS_EPSIIT_NULL_ID : 'EPSIIT_SENSORIDS_EPSIIT_NULL_ID', 
            EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_I_ID : 'EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_I_ID', 
            EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_P_ID : 'EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_P_ID', 
            EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_T_ID : 'EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_1_T_ID', 
            EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_I_ID : 'EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_I_ID', 
            EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_P_ID : 'EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_P_ID', 
            EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_T_ID : 'EPSIIT_SENSORIDS_EPSIIT_INA_BAT_OUT_2_T_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_I_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_I_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_P_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_P_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_1_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_1_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_2_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_2_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_3_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_3_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_4_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_4_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_5_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_5_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_6_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_6_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_7_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_7_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_8_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_CELL_8_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_SUM_CELL_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_BAT_SUM_CELL_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_INT_TEMP_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_INT_TEMP_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS0_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS0_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS1_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS1_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS2_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS2_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS3_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_STATUS3_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL0_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL0_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL1_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL1_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL2_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL2_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL3_ID : 'EPSIIT_SENSORIDS_EPSIIT_BALANCER1_CONTROL3_ID', 
            EPSIIT_SENSORIDS_EPSIIT_RESERVED_0_ID : 'EPSIIT_SENSORIDS_EPSIIT_RESERVED_0_ID', 
            EPSIIT_SENSORIDS_EPSIIT_RESERVED_1_ID : 'EPSIIT_SENSORIDS_EPSIIT_RESERVED_1_ID', 
            EPSIIT_SENSORIDS_EPSIIT_RESERVED_2_ID : 'EPSIIT_SENSORIDS_EPSIIT_RESERVED_2_ID', 
            EPSIIT_SENSORIDS_EPSIIT_RESERVED_3_ID : 'EPSIIT_SENSORIDS_EPSIIT_RESERVED_3_ID', 
            EPSIIT_SENSORIDS_EPSIIT_RESERVED_4_ID : 'EPSIIT_SENSORIDS_EPSIIT_RESERVED_4_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_CHARGER_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_CHARGER_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_SYSTEM_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_SYSTEM_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_SUPPLY_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_SUPPLY_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_CHRG_FAULTS_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_STAT_CHRG_FAULTS_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_TBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_TBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_POUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_POUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_PIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_PIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_EFF_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_EFF_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_IOUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_IOUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_IIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_IIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_VBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_VBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_VIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_VIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_VINR_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XP_TELE_VINR_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_CHARGER_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_CHARGER_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_SYSTEM_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_SYSTEM_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_SUPPLY_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_SUPPLY_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_CHRG_FAULTS_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_STAT_CHRG_FAULTS_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_TBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_TBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_POUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_POUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_PIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_PIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_EFF_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_EFF_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_IOUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_IOUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_IIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_IIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_VBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_VBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_VIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_VIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_VINR_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_XR_TELE_VINR_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_CHARGER_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_CHARGER_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_SYSTEM_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_SYSTEM_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_SUPPLY_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_SUPPLY_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_CHRG_FAULTS_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_STAT_CHRG_FAULTS_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_TBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_TBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_POUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_POUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_PIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_PIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_EFF_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_EFF_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_IOUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_IOUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_IIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_IIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_VBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_VBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_VIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_VIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_VINR_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YP_TELE_VINR_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_CHARGER_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_CHARGER_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_SYSTEM_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_SYSTEM_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_SUPPLY_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_SUPPLY_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_CHRG_FAULTS_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_STAT_CHRG_FAULTS_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_TBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_TBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_POUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_POUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_PIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_PIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_EFF_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_EFF_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_IOUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_IOUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_IIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_IIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_VBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_VBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_VIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_VIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_VINR_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_YR_TELE_VINR_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_CHARGER_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_CHARGER_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_SYSTEM_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_SYSTEM_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_SUPPLY_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_SUPPLY_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_CHRG_FAULTS_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_STAT_CHRG_FAULTS_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_TBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_TBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_POUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_POUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_PIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_PIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_EFF_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_EFF_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_IOUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_IOUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_IIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_IIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_VBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_VBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_VIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_VIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_VINR_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZP_TELE_VINR_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_CHARGER_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_CHARGER_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_SYSTEM_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_SYSTEM_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_SUPPLY_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_SUPPLY_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_CHRG_FAULTS_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_STAT_CHRG_FAULTS_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_TBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_TBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_POUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_POUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_PIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_PIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_EFF_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_EFF_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_IOUT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_IOUT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_IIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_IIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_VBAT_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_VBAT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_VIN_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_VIN_ID', 
            EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_VINR_ID : 'EPSIIT_SENSORIDS_EPSIIT_CHRG_ZR_TELE_VINR_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BP_TEMPERATURE_PCB_1_ID : 'EPSIIT_SENSORIDS_EPSIIT_BP_TEMPERATURE_PCB_1_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BP_TEMPERATURE_PCB_2_ID : 'EPSIIT_SENSORIDS_EPSIIT_BP_TEMPERATURE_PCB_2_ID', 
            EPSIIT_SENSORIDS_EPSIIT_ADC_CPU_T_ID : 'EPSIIT_SENSORIDS_EPSIIT_ADC_CPU_T_ID', 
            EPSIIT_SENSORIDS_EPSIIT_ADC_CPU_AVCC_U_ID : 'EPSIIT_SENSORIDS_EPSIIT_ADC_CPU_AVCC_U_ID', 
            EPSIIT_SENSORIDS_EPSIIT_ADC_BAT_TEMP_NTC1_ID : 'EPSIIT_SENSORIDS_EPSIIT_ADC_BAT_TEMP_NTC1_ID', 
            EPSIIT_SENSORIDS_EPSIIT_ADC_BAT_TEMP_NTC2_ID : 'EPSIIT_SENSORIDS_EPSIIT_ADC_BAT_TEMP_NTC2_ID', 
            EPSIIT_SENSORIDS_EPSIIT_ADC_RAD_FED_ID : 'EPSIIT_SENSORIDS_EPSIIT_ADC_RAD_FED_ID', 
            EPSIIT_SENSORIDS_EPSIIT_HEATER_PWM_PERCENT_ID : 'EPSIIT_SENSORIDS_EPSIIT_HEATER_PWM_PERCENT_ID', 
            EPSIIT_SENSORIDS_EPSIIT_HEATER_TARGET_TEMP_ID : 'EPSIIT_SENSORIDS_EPSIIT_HEATER_TARGET_TEMP_ID', 
            EPSIIT_SENSORIDS_EPSIIT_BAT_CHARGE_WH_ID : 'EPSIIT_SENSORIDS_EPSIIT_BAT_CHARGE_WH_ID'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_EPSIIT_SensorIDs()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_EPSIIT_SensorIDs.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_EPSIIT_SensorIDs.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 2
    
    class struct_SDiagErrCounter:
        def __init__(self, uint16__EDC_NONE = 0, uint16__EDC_OSC_EXT_SINGLE_FAILED_CNTR = 0, uint16__EDC_OSC_EXT_PERMANENT_FAILED_CNTR = 0, uint16__EDC_LF_OSC_BACKUP_CNTR = 0, uint16__EDC_SYSSNIV__ACCTEIFG = 0, uint16__EDC_SYSSNIV__MPUSEGPIFG = 0, uint16__EDC_SYSSNIV__MPUSEGIIFG = 0, uint16__EDC_SYSSNIV__MPUSEG1IFG = 0, uint16__EDC_SYSSNIV__MPUSEG2IFG = 0, uint16__EDC_SYSSNIV__MPUSEG3IFG = 0, uint16__EDC_SYSSNIV__VMAIFG = 0, uint16__EDC_SYSSNIV__JMBINIFG = 0, uint16__EDC_SYSSNIV__JMBOUTIFG = 0, uint16__EDC_SYSSNIV__CBDIFG = 0, uint16__EDC_SYSSNIV__WPROT = 0, uint16__EDC_SYSSNIV__LEATO = 0, uint16__EDC_SYSSNIV__LEACMD = 0, uint16__EDC_ADC_REF_SETTLE_FAIL_CNTR = 0, uint16__EDC_ADC_CONV_TIMEOUT = 0, uint16__EDC_ADC_REF_BUSSY_CNTR = 0, uint16__EDC_ADC_STUCK_IN_PREV_CONV = 0, uint16__EDC_NVM_NO_FREE_MEMORY = 0, uint16__EDC_NVM_SEGMENT_NOT_FOUND = 0, uint16__EDC_BL_CHECKER_PART1_CORRUPTED = 0, uint16__EDC_BL_CHECKER_PART2_CORRUPTED = 0, uint16__EDC_BL_CHECKER_PART3_CORRUPTED = 0, uint16__EDC_BL_CHECKER_PART4_CORRUPTED = 0, uint16__EDC_BL_IMPLEMENTATION_PART1_CORRUPTED = 0, uint16__EDC_BL_IMPLEMENTATION_PART2_CORRUPTED = 0, uint16__EDC_NVM_HDR_PART1_CORRUPTED = 0, uint16__EDC_NVM_HDR_PART2_CORRUPTED = 0, uint16__EDC_NVM_PART1_CORRUPTED = 0, uint16__EDC_NVM_PART2_CORRUPTED = 0, uint16__EDC_EXT_BASICAPP_PART1_CORRUPTED = 0, uint16__EDC_EXT_BASICAPP_PART2_CORRUPTED = 0, uint16__EDC_EXT_BASICAPP_PART3_CORRUPTED = 0, uint16__EDC_EXT_MAINAPP_PART1_CORRUPTED = 0, uint16__EDC_EXT_MAINAPP_PART2_CORRUPTED = 0, uint16__EDC_EXT_MAINAPP_PART3_CORRUPTED = 0, uint16__EDC_CBDIFG_FRAM_CORRECTABLE_BIT = 0, uint16__EDC_RST_TOTAL = 0, uint16__EDC_RST_BROWNOUT = 0, uint16__EDC_RST_RSTIFG = 0, uint16__EDC_RST_PMMSWBOR = 0, uint16__EDC_RST_LPM_X_5_WAKE = 0, uint16__EDC_RST_SECURITY_VIOLATION = 0, uint16__EDC_RST_RES1 = 0, uint16__EDC_RST_SVSHIFG = 0, uint16__EDC_RST_RES2 = 0, uint16__EDC_RST_RES3 = 0, uint16__EDC_RST_PMMSWPOR = 0, uint16__EDC_RST_WDTIFG = 0, uint16__EDC_RST_WDTPW = 0, uint16__EDC_RST_FRCTLPW = 0, uint16__EDC_RST_FRAM_BIT_ERR = 0, uint16__EDC_RST_PER_FETCH = 0, uint16__EDC_RST_PMMPW = 0, uint16__EDC_RST_MPUPW = 0, uint16__EDC_RST_CSPW = 0, uint16__EDC_RST_MPUSEGIPIFG = 0, uint16__EDC_RST_MPUSEGIIFG = 0, uint16__EDC_RST_MPUSEG1IFG = 0, uint16__EDC_RST_MPUSEG2IFG = 0, uint16__EDC_RST_MPUSEG3IFG = 0, uint16__EDC_BAL_CONFIG_INVALID = 0, uint16__EDC_CHRG_CONFIG_INVALID = 0, uint16__EDC_SUCCESSFULL_POWERDOWN_COUNTER = 0, uint16__EDC_CHRG_CANT_APPLY_CONFIG_2 = 0, uint16__EDC_MAC_SYS1_TX_COLLISION = 0, uint16__EDC_MAC_SYS1_TX_TIMEOUT = 0, uint16__EDC_MAC_SYS1_RX_MSG_WITH_ZERRO_SIZE = 0, uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_HDR_CRC = 0, uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_MSG_CRC = 0, uint16__EDC_MAC_SYS1_RX_COLLISION = 0, uint16__EDC_MAC_SYS1_RX_MSG_MISS_NO_BUFFER = 0, uint16__EDC_MAC_SYS1_RX_TIMEOUT = 0, uint16__EDC_MAC_SYS1_RX_RESTARTED_MSGS = 0, uint16__EDC_MAC_SYS1_RX_INTER_BYTE_MAX_TIME = 0, uint16__HEATER_NVM_CORRUPTION = 0, uint16__HEATER_NVM_INVALID_SETTINGS = 0, uint16__RESERVED_03 = 0, uint16__RESERVED_04 = 0, uint16__RESERVED_05 = 0, uint16__RESERVED_06 = 0, uint16__RESERVED_07 = 0, uint16__RESERVED_08 = 0, uint16__RESERVED_09 = 0, uint16__RESERVED_10 = 0, uint16__EDC_MAC_PAY1_TX_COLLISION = 0, uint16__EDC_MAC_PAY1_TX_TIMEOUT = 0, uint16__EDC_MAC_PAY1_RX_MSG_WITH_ZERRO_SIZE = 0, uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_HDR_CRC = 0, uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_MSG_CRC = 0, uint16__EDC_MAC_PAY1_RX_COLLISION = 0, uint16__EDC_MAC_PAY1_RX_MSG_MISS_NO_BUFFER = 0, uint16__EDC_MAC_PAY1_RX_TIMEOUT = 0, uint16__EDC_MAC_PAY1_RX_RESTARTED_MSGS = 0, uint16__EDC_MAC_PAY1_RX_INTER_BYTE_MAX_TIME = 0, uint16__EDC_CONOPS_ENTER_IN_BATTERY_COUNTER = 0, uint16__EDC_CONOPS_ENTER_IN_PANEL_COUNTER = 0, uint16__EDC_CONOPS_ENTER_IN_HIB_COUNTER = 0, uint16__RESERVED_11 = 0, uint16__RESERVED_12 = 0, uint16__RESERVED_13 = 0, uint16__RESERVED_14 = 0, uint16__RESERVED_15 = 0, uint16__RESERVED_16 = 0, uint16__RESERVED_17 = 0, uint16__EDC_CPU_UP_TIME_LO = 0, uint16__EDC_CPU_UP_TIME_HI = 0, uint16__EDC_CPU_MAIN_LOOP_MAX_TIME = 0, uint16__EDC_BAL_ISL94202IRTZ_RE_APPLY_CNF_CNTR = 0, uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_RAM_CNTR = 0, uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_ROM_CNTR = 0, uint16__EDC_CONOPS_ENTER_IN_NOHIB_COUNTER = 0, uint16__EDC_LT8491_CHIP_RESET_DURING_EEPROMWRITE_CNTR = 0, uint16__EDC_INIT_CONFIG_NVM_1_CORRUPTED = 0, uint16__EDC_INIT_CONFIG_NVM_2_CORRUPTED = 0, uint16__EDC_EXT_FRAM_PROBE_FAILED = 0, uint16__EDC_NVM_ALLOCATED_SIZE = 0, uint16__EDC_NVM_USED_SIZE = 0, uint16__EDC_BASIC_SETTINGS_NVM_CORRUPTED = 0, uint16__RESERVED_18 = 0):
            self.uint16__EDC_NONE = uint16__EDC_NONE
            self.uint16__EDC_OSC_EXT_SINGLE_FAILED_CNTR = uint16__EDC_OSC_EXT_SINGLE_FAILED_CNTR
            self.uint16__EDC_OSC_EXT_PERMANENT_FAILED_CNTR = uint16__EDC_OSC_EXT_PERMANENT_FAILED_CNTR
            self.uint16__EDC_LF_OSC_BACKUP_CNTR = uint16__EDC_LF_OSC_BACKUP_CNTR
            self.uint16__EDC_SYSSNIV__ACCTEIFG = uint16__EDC_SYSSNIV__ACCTEIFG
            self.uint16__EDC_SYSSNIV__MPUSEGPIFG = uint16__EDC_SYSSNIV__MPUSEGPIFG
            self.uint16__EDC_SYSSNIV__MPUSEGIIFG = uint16__EDC_SYSSNIV__MPUSEGIIFG
            self.uint16__EDC_SYSSNIV__MPUSEG1IFG = uint16__EDC_SYSSNIV__MPUSEG1IFG
            self.uint16__EDC_SYSSNIV__MPUSEG2IFG = uint16__EDC_SYSSNIV__MPUSEG2IFG
            self.uint16__EDC_SYSSNIV__MPUSEG3IFG = uint16__EDC_SYSSNIV__MPUSEG3IFG
            self.uint16__EDC_SYSSNIV__VMAIFG = uint16__EDC_SYSSNIV__VMAIFG
            self.uint16__EDC_SYSSNIV__JMBINIFG = uint16__EDC_SYSSNIV__JMBINIFG
            self.uint16__EDC_SYSSNIV__JMBOUTIFG = uint16__EDC_SYSSNIV__JMBOUTIFG
            self.uint16__EDC_SYSSNIV__CBDIFG = uint16__EDC_SYSSNIV__CBDIFG
            self.uint16__EDC_SYSSNIV__WPROT = uint16__EDC_SYSSNIV__WPROT
            self.uint16__EDC_SYSSNIV__LEATO = uint16__EDC_SYSSNIV__LEATO
            self.uint16__EDC_SYSSNIV__LEACMD = uint16__EDC_SYSSNIV__LEACMD
            self.uint16__EDC_ADC_REF_SETTLE_FAIL_CNTR = uint16__EDC_ADC_REF_SETTLE_FAIL_CNTR
            self.uint16__EDC_ADC_CONV_TIMEOUT = uint16__EDC_ADC_CONV_TIMEOUT
            self.uint16__EDC_ADC_REF_BUSSY_CNTR = uint16__EDC_ADC_REF_BUSSY_CNTR
            self.uint16__EDC_ADC_STUCK_IN_PREV_CONV = uint16__EDC_ADC_STUCK_IN_PREV_CONV
            self.uint16__EDC_NVM_NO_FREE_MEMORY = uint16__EDC_NVM_NO_FREE_MEMORY
            self.uint16__EDC_NVM_SEGMENT_NOT_FOUND = uint16__EDC_NVM_SEGMENT_NOT_FOUND
            self.uint16__EDC_BL_CHECKER_PART1_CORRUPTED = uint16__EDC_BL_CHECKER_PART1_CORRUPTED
            self.uint16__EDC_BL_CHECKER_PART2_CORRUPTED = uint16__EDC_BL_CHECKER_PART2_CORRUPTED
            self.uint16__EDC_BL_CHECKER_PART3_CORRUPTED = uint16__EDC_BL_CHECKER_PART3_CORRUPTED
            self.uint16__EDC_BL_CHECKER_PART4_CORRUPTED = uint16__EDC_BL_CHECKER_PART4_CORRUPTED
            self.uint16__EDC_BL_IMPLEMENTATION_PART1_CORRUPTED = uint16__EDC_BL_IMPLEMENTATION_PART1_CORRUPTED
            self.uint16__EDC_BL_IMPLEMENTATION_PART2_CORRUPTED = uint16__EDC_BL_IMPLEMENTATION_PART2_CORRUPTED
            self.uint16__EDC_NVM_HDR_PART1_CORRUPTED = uint16__EDC_NVM_HDR_PART1_CORRUPTED
            self.uint16__EDC_NVM_HDR_PART2_CORRUPTED = uint16__EDC_NVM_HDR_PART2_CORRUPTED
            self.uint16__EDC_NVM_PART1_CORRUPTED = uint16__EDC_NVM_PART1_CORRUPTED
            self.uint16__EDC_NVM_PART2_CORRUPTED = uint16__EDC_NVM_PART2_CORRUPTED
            self.uint16__EDC_EXT_BASICAPP_PART1_CORRUPTED = uint16__EDC_EXT_BASICAPP_PART1_CORRUPTED
            self.uint16__EDC_EXT_BASICAPP_PART2_CORRUPTED = uint16__EDC_EXT_BASICAPP_PART2_CORRUPTED
            self.uint16__EDC_EXT_BASICAPP_PART3_CORRUPTED = uint16__EDC_EXT_BASICAPP_PART3_CORRUPTED
            self.uint16__EDC_EXT_MAINAPP_PART1_CORRUPTED = uint16__EDC_EXT_MAINAPP_PART1_CORRUPTED
            self.uint16__EDC_EXT_MAINAPP_PART2_CORRUPTED = uint16__EDC_EXT_MAINAPP_PART2_CORRUPTED
            self.uint16__EDC_EXT_MAINAPP_PART3_CORRUPTED = uint16__EDC_EXT_MAINAPP_PART3_CORRUPTED
            self.uint16__EDC_CBDIFG_FRAM_CORRECTABLE_BIT = uint16__EDC_CBDIFG_FRAM_CORRECTABLE_BIT
            self.uint16__EDC_RST_TOTAL = uint16__EDC_RST_TOTAL
            self.uint16__EDC_RST_BROWNOUT = uint16__EDC_RST_BROWNOUT
            self.uint16__EDC_RST_RSTIFG = uint16__EDC_RST_RSTIFG
            self.uint16__EDC_RST_PMMSWBOR = uint16__EDC_RST_PMMSWBOR
            self.uint16__EDC_RST_LPM_X_5_WAKE = uint16__EDC_RST_LPM_X_5_WAKE
            self.uint16__EDC_RST_SECURITY_VIOLATION = uint16__EDC_RST_SECURITY_VIOLATION
            self.uint16__EDC_RST_RES1 = uint16__EDC_RST_RES1
            self.uint16__EDC_RST_SVSHIFG = uint16__EDC_RST_SVSHIFG
            self.uint16__EDC_RST_RES2 = uint16__EDC_RST_RES2
            self.uint16__EDC_RST_RES3 = uint16__EDC_RST_RES3
            self.uint16__EDC_RST_PMMSWPOR = uint16__EDC_RST_PMMSWPOR
            self.uint16__EDC_RST_WDTIFG = uint16__EDC_RST_WDTIFG
            self.uint16__EDC_RST_WDTPW = uint16__EDC_RST_WDTPW
            self.uint16__EDC_RST_FRCTLPW = uint16__EDC_RST_FRCTLPW
            self.uint16__EDC_RST_FRAM_BIT_ERR = uint16__EDC_RST_FRAM_BIT_ERR
            self.uint16__EDC_RST_PER_FETCH = uint16__EDC_RST_PER_FETCH
            self.uint16__EDC_RST_PMMPW = uint16__EDC_RST_PMMPW
            self.uint16__EDC_RST_MPUPW = uint16__EDC_RST_MPUPW
            self.uint16__EDC_RST_CSPW = uint16__EDC_RST_CSPW
            self.uint16__EDC_RST_MPUSEGIPIFG = uint16__EDC_RST_MPUSEGIPIFG
            self.uint16__EDC_RST_MPUSEGIIFG = uint16__EDC_RST_MPUSEGIIFG
            self.uint16__EDC_RST_MPUSEG1IFG = uint16__EDC_RST_MPUSEG1IFG
            self.uint16__EDC_RST_MPUSEG2IFG = uint16__EDC_RST_MPUSEG2IFG
            self.uint16__EDC_RST_MPUSEG3IFG = uint16__EDC_RST_MPUSEG3IFG
            self.uint16__EDC_BAL_CONFIG_INVALID = uint16__EDC_BAL_CONFIG_INVALID
            self.uint16__EDC_CHRG_CONFIG_INVALID = uint16__EDC_CHRG_CONFIG_INVALID
            self.uint16__EDC_SUCCESSFULL_POWERDOWN_COUNTER = uint16__EDC_SUCCESSFULL_POWERDOWN_COUNTER
            self.uint16__EDC_CHRG_CANT_APPLY_CONFIG_2 = uint16__EDC_CHRG_CANT_APPLY_CONFIG_2
            self.uint16__EDC_MAC_SYS1_TX_COLLISION = uint16__EDC_MAC_SYS1_TX_COLLISION
            self.uint16__EDC_MAC_SYS1_TX_TIMEOUT = uint16__EDC_MAC_SYS1_TX_TIMEOUT
            self.uint16__EDC_MAC_SYS1_RX_MSG_WITH_ZERRO_SIZE = uint16__EDC_MAC_SYS1_RX_MSG_WITH_ZERRO_SIZE
            self.uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_HDR_CRC = uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_HDR_CRC
            self.uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_MSG_CRC = uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_MSG_CRC
            self.uint16__EDC_MAC_SYS1_RX_COLLISION = uint16__EDC_MAC_SYS1_RX_COLLISION
            self.uint16__EDC_MAC_SYS1_RX_MSG_MISS_NO_BUFFER = uint16__EDC_MAC_SYS1_RX_MSG_MISS_NO_BUFFER
            self.uint16__EDC_MAC_SYS1_RX_TIMEOUT = uint16__EDC_MAC_SYS1_RX_TIMEOUT
            self.uint16__EDC_MAC_SYS1_RX_RESTARTED_MSGS = uint16__EDC_MAC_SYS1_RX_RESTARTED_MSGS
            self.uint16__EDC_MAC_SYS1_RX_INTER_BYTE_MAX_TIME = uint16__EDC_MAC_SYS1_RX_INTER_BYTE_MAX_TIME
            self.uint16__HEATER_NVM_CORRUPTION = uint16__HEATER_NVM_CORRUPTION
            self.uint16__HEATER_NVM_INVALID_SETTINGS = uint16__HEATER_NVM_INVALID_SETTINGS
            self.uint16__RESERVED_03 = uint16__RESERVED_03
            self.uint16__RESERVED_04 = uint16__RESERVED_04
            self.uint16__RESERVED_05 = uint16__RESERVED_05
            self.uint16__RESERVED_06 = uint16__RESERVED_06
            self.uint16__RESERVED_07 = uint16__RESERVED_07
            self.uint16__RESERVED_08 = uint16__RESERVED_08
            self.uint16__RESERVED_09 = uint16__RESERVED_09
            self.uint16__RESERVED_10 = uint16__RESERVED_10
            self.uint16__EDC_MAC_PAY1_TX_COLLISION = uint16__EDC_MAC_PAY1_TX_COLLISION
            self.uint16__EDC_MAC_PAY1_TX_TIMEOUT = uint16__EDC_MAC_PAY1_TX_TIMEOUT
            self.uint16__EDC_MAC_PAY1_RX_MSG_WITH_ZERRO_SIZE = uint16__EDC_MAC_PAY1_RX_MSG_WITH_ZERRO_SIZE
            self.uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_HDR_CRC = uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_HDR_CRC
            self.uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_MSG_CRC = uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_MSG_CRC
            self.uint16__EDC_MAC_PAY1_RX_COLLISION = uint16__EDC_MAC_PAY1_RX_COLLISION
            self.uint16__EDC_MAC_PAY1_RX_MSG_MISS_NO_BUFFER = uint16__EDC_MAC_PAY1_RX_MSG_MISS_NO_BUFFER
            self.uint16__EDC_MAC_PAY1_RX_TIMEOUT = uint16__EDC_MAC_PAY1_RX_TIMEOUT
            self.uint16__EDC_MAC_PAY1_RX_RESTARTED_MSGS = uint16__EDC_MAC_PAY1_RX_RESTARTED_MSGS
            self.uint16__EDC_MAC_PAY1_RX_INTER_BYTE_MAX_TIME = uint16__EDC_MAC_PAY1_RX_INTER_BYTE_MAX_TIME
            self.uint16__EDC_CONOPS_ENTER_IN_BATTERY_COUNTER = uint16__EDC_CONOPS_ENTER_IN_BATTERY_COUNTER
            self.uint16__EDC_CONOPS_ENTER_IN_PANEL_COUNTER = uint16__EDC_CONOPS_ENTER_IN_PANEL_COUNTER
            self.uint16__EDC_CONOPS_ENTER_IN_HIB_COUNTER = uint16__EDC_CONOPS_ENTER_IN_HIB_COUNTER
            self.uint16__RESERVED_11 = uint16__RESERVED_11
            self.uint16__RESERVED_12 = uint16__RESERVED_12
            self.uint16__RESERVED_13 = uint16__RESERVED_13
            self.uint16__RESERVED_14 = uint16__RESERVED_14
            self.uint16__RESERVED_15 = uint16__RESERVED_15
            self.uint16__RESERVED_16 = uint16__RESERVED_16
            self.uint16__RESERVED_17 = uint16__RESERVED_17
            self.uint16__EDC_CPU_UP_TIME_LO = uint16__EDC_CPU_UP_TIME_LO
            self.uint16__EDC_CPU_UP_TIME_HI = uint16__EDC_CPU_UP_TIME_HI
            self.uint16__EDC_CPU_MAIN_LOOP_MAX_TIME = uint16__EDC_CPU_MAIN_LOOP_MAX_TIME
            self.uint16__EDC_BAL_ISL94202IRTZ_RE_APPLY_CNF_CNTR = uint16__EDC_BAL_ISL94202IRTZ_RE_APPLY_CNF_CNTR
            self.uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_RAM_CNTR = uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_RAM_CNTR
            self.uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_ROM_CNTR = uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_ROM_CNTR
            self.uint16__EDC_CONOPS_ENTER_IN_NOHIB_COUNTER = uint16__EDC_CONOPS_ENTER_IN_NOHIB_COUNTER
            self.uint16__EDC_LT8491_CHIP_RESET_DURING_EEPROMWRITE_CNTR = uint16__EDC_LT8491_CHIP_RESET_DURING_EEPROMWRITE_CNTR
            self.uint16__EDC_INIT_CONFIG_NVM_1_CORRUPTED = uint16__EDC_INIT_CONFIG_NVM_1_CORRUPTED
            self.uint16__EDC_INIT_CONFIG_NVM_2_CORRUPTED = uint16__EDC_INIT_CONFIG_NVM_2_CORRUPTED
            self.uint16__EDC_EXT_FRAM_PROBE_FAILED = uint16__EDC_EXT_FRAM_PROBE_FAILED
            self.uint16__EDC_NVM_ALLOCATED_SIZE = uint16__EDC_NVM_ALLOCATED_SIZE
            self.uint16__EDC_NVM_USED_SIZE = uint16__EDC_NVM_USED_SIZE
            self.uint16__EDC_BASIC_SETTINGS_NVM_CORRUPTED = uint16__EDC_BASIC_SETTINGS_NVM_CORRUPTED
            self.uint16__RESERVED_18 = uint16__RESERVED_18
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_NONE)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_OSC_EXT_SINGLE_FAILED_CNTR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_OSC_EXT_PERMANENT_FAILED_CNTR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_LF_OSC_BACKUP_CNTR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__ACCTEIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__MPUSEGPIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__MPUSEGIIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__MPUSEG1IFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__MPUSEG2IFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__MPUSEG3IFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__VMAIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__JMBINIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__JMBOUTIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__CBDIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__WPROT)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__LEATO)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SYSSNIV__LEACMD)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_ADC_REF_SETTLE_FAIL_CNTR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_ADC_CONV_TIMEOUT)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_ADC_REF_BUSSY_CNTR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_ADC_STUCK_IN_PREV_CONV)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_NVM_NO_FREE_MEMORY)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_NVM_SEGMENT_NOT_FOUND)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_BL_CHECKER_PART1_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_BL_CHECKER_PART2_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_BL_CHECKER_PART3_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_BL_CHECKER_PART4_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_BL_IMPLEMENTATION_PART1_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_BL_IMPLEMENTATION_PART2_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_NVM_HDR_PART1_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_NVM_HDR_PART2_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_NVM_PART1_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_NVM_PART2_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_EXT_BASICAPP_PART1_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_EXT_BASICAPP_PART2_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_EXT_BASICAPP_PART3_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_EXT_MAINAPP_PART1_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_EXT_MAINAPP_PART2_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_EXT_MAINAPP_PART3_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CBDIFG_FRAM_CORRECTABLE_BIT)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_TOTAL)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_BROWNOUT)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_RSTIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_PMMSWBOR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_LPM_X_5_WAKE)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_SECURITY_VIOLATION)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_RES1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_SVSHIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_RES2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_RES3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_PMMSWPOR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_WDTIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_WDTPW)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_FRCTLPW)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_FRAM_BIT_ERR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_PER_FETCH)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_PMMPW)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_MPUPW)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_CSPW)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_MPUSEGIPIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_MPUSEGIIFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_MPUSEG1IFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_MPUSEG2IFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_RST_MPUSEG3IFG)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_BAL_CONFIG_INVALID)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CHRG_CONFIG_INVALID)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_SUCCESSFULL_POWERDOWN_COUNTER)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CHRG_CANT_APPLY_CONFIG_2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_TX_COLLISION)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_TX_TIMEOUT)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_RX_MSG_WITH_ZERRO_SIZE)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_HDR_CRC)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_MSG_CRC)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_RX_COLLISION)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_RX_MSG_MISS_NO_BUFFER)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_RX_TIMEOUT)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_RX_RESTARTED_MSGS)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_SYS1_RX_INTER_BYTE_MAX_TIME)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__HEATER_NVM_CORRUPTION)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__HEATER_NVM_INVALID_SETTINGS)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_03)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_04)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_05)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_06)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_07)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_08)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_09)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_10)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_TX_COLLISION)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_TX_TIMEOUT)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_RX_MSG_WITH_ZERRO_SIZE)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_HDR_CRC)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_MSG_CRC)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_RX_COLLISION)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_RX_MSG_MISS_NO_BUFFER)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_RX_TIMEOUT)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_RX_RESTARTED_MSGS)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_MAC_PAY1_RX_INTER_BYTE_MAX_TIME)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CONOPS_ENTER_IN_BATTERY_COUNTER)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CONOPS_ENTER_IN_PANEL_COUNTER)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CONOPS_ENTER_IN_HIB_COUNTER)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_11)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_12)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_13)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_14)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_15)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_16)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_17)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CPU_UP_TIME_LO)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CPU_UP_TIME_HI)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CPU_MAIN_LOOP_MAX_TIME)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_BAL_ISL94202IRTZ_RE_APPLY_CNF_CNTR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_RAM_CNTR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_ROM_CNTR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_CONOPS_ENTER_IN_NOHIB_COUNTER)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_LT8491_CHIP_RESET_DURING_EEPROMWRITE_CNTR)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_INIT_CONFIG_NVM_1_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_INIT_CONFIG_NVM_2_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_EXT_FRAM_PROBE_FAILED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_NVM_ALLOCATED_SIZE)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_NVM_USED_SIZE)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__EDC_BASIC_SETTINGS_NVM_CORRUPTED)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__RESERVED_18)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.struct_SDiagErrCounter()
    
            currentPos = pos
            
            (resultInstance.uint16__EDC_NONE, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_OSC_EXT_SINGLE_FAILED_CNTR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_OSC_EXT_PERMANENT_FAILED_CNTR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_LF_OSC_BACKUP_CNTR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__ACCTEIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__MPUSEGPIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__MPUSEGIIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__MPUSEG1IFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__MPUSEG2IFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__MPUSEG3IFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__VMAIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__JMBINIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__JMBOUTIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__CBDIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__WPROT, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__LEATO, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SYSSNIV__LEACMD, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_ADC_REF_SETTLE_FAIL_CNTR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_ADC_CONV_TIMEOUT, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_ADC_REF_BUSSY_CNTR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_ADC_STUCK_IN_PREV_CONV, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_NVM_NO_FREE_MEMORY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_NVM_SEGMENT_NOT_FOUND, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_BL_CHECKER_PART1_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_BL_CHECKER_PART2_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_BL_CHECKER_PART3_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_BL_CHECKER_PART4_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_BL_IMPLEMENTATION_PART1_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_BL_IMPLEMENTATION_PART2_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_NVM_HDR_PART1_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_NVM_HDR_PART2_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_NVM_PART1_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_NVM_PART2_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_EXT_BASICAPP_PART1_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_EXT_BASICAPP_PART2_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_EXT_BASICAPP_PART3_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_EXT_MAINAPP_PART1_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_EXT_MAINAPP_PART2_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_EXT_MAINAPP_PART3_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CBDIFG_FRAM_CORRECTABLE_BIT, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_TOTAL, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_BROWNOUT, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_RSTIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_PMMSWBOR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_LPM_X_5_WAKE, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_SECURITY_VIOLATION, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_RES1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_SVSHIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_RES2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_RES3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_PMMSWPOR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_WDTIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_WDTPW, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_FRCTLPW, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_FRAM_BIT_ERR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_PER_FETCH, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_PMMPW, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_MPUPW, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_CSPW, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_MPUSEGIPIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_MPUSEGIIFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_MPUSEG1IFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_MPUSEG2IFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_RST_MPUSEG3IFG, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_BAL_CONFIG_INVALID, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CHRG_CONFIG_INVALID, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_SUCCESSFULL_POWERDOWN_COUNTER, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CHRG_CANT_APPLY_CONFIG_2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_TX_COLLISION, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_TX_TIMEOUT, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_RX_MSG_WITH_ZERRO_SIZE, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_HDR_CRC, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_RX_MSG_WITH_WRONG_MSG_CRC, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_RX_COLLISION, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_RX_MSG_MISS_NO_BUFFER, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_RX_TIMEOUT, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_RX_RESTARTED_MSGS, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_SYS1_RX_INTER_BYTE_MAX_TIME, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__HEATER_NVM_CORRUPTION, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__HEATER_NVM_INVALID_SETTINGS, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_03, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_04, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_05, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_06, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_07, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_08, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_09, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_10, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_TX_COLLISION, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_TX_TIMEOUT, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_RX_MSG_WITH_ZERRO_SIZE, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_HDR_CRC, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_RX_MSG_WITH_WRONG_MSG_CRC, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_RX_COLLISION, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_RX_MSG_MISS_NO_BUFFER, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_RX_TIMEOUT, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_RX_RESTARTED_MSGS, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_MAC_PAY1_RX_INTER_BYTE_MAX_TIME, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CONOPS_ENTER_IN_BATTERY_COUNTER, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CONOPS_ENTER_IN_PANEL_COUNTER, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CONOPS_ENTER_IN_HIB_COUNTER, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_11, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_12, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_13, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_14, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_15, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_16, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_17, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CPU_UP_TIME_LO, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CPU_UP_TIME_HI, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CPU_MAIN_LOOP_MAX_TIME, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_BAL_ISL94202IRTZ_RE_APPLY_CNF_CNTR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_RAM_CNTR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_LT8491_FORCE_RE_APPLY_CNF_ROM_CNTR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_CONOPS_ENTER_IN_NOHIB_COUNTER, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_LT8491_CHIP_RESET_DURING_EEPROMWRITE_CNTR, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_INIT_CONFIG_NVM_1_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_INIT_CONFIG_NVM_2_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_EXT_FRAM_PROBE_FAILED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_NVM_ALLOCATED_SIZE, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_NVM_USED_SIZE, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__EDC_BASIC_SETTINGS_NVM_CORRUPTED, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__RESERVED_18, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 246
    
    class enum_BP_Mode_Type:
        BP_MODE_TYPE_ROOT = 0
        BP_MODE_TYPE_IDENTIFYPREVIOUSSTATE = 1
        BP_MODE_TYPE_BATTERY_AVAILABLE = 2
        BP_MODE_TYPE_BATTERY = 3
        BP_MODE_TYPE_TRANSITION_TO_HIB = 4
        BP_MODE_TYPE_NORMAL = 5
        BP_MODE_TYPE_HIB = 6
        BP_MODE_TYPE_NOHIB = 7
        BP_MODE_TYPE_PANEL = 8
        BP_MODE_TYPE____HISTORY_BATTERY_AVAILABLE = 9
    
        ValuesDict = {
            BP_MODE_TYPE_ROOT : 'BP_MODE_TYPE_ROOT', 
            BP_MODE_TYPE_IDENTIFYPREVIOUSSTATE : 'BP_MODE_TYPE_IDENTIFYPREVIOUSSTATE', 
            BP_MODE_TYPE_BATTERY_AVAILABLE : 'BP_MODE_TYPE_BATTERY_AVAILABLE', 
            BP_MODE_TYPE_BATTERY : 'BP_MODE_TYPE_BATTERY', 
            BP_MODE_TYPE_TRANSITION_TO_HIB : 'BP_MODE_TYPE_TRANSITION_TO_HIB', 
            BP_MODE_TYPE_NORMAL : 'BP_MODE_TYPE_NORMAL', 
            BP_MODE_TYPE_HIB : 'BP_MODE_TYPE_HIB', 
            BP_MODE_TYPE_NOHIB : 'BP_MODE_TYPE_NOHIB', 
            BP_MODE_TYPE_PANEL : 'BP_MODE_TYPE_PANEL', 
            BP_MODE_TYPE____HISTORY_BATTERY_AVAILABLE : 'BP_MODE_TYPE____HISTORY_BATTERY_AVAILABLE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_BP_Mode_Type()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_BP_Mode_Type.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_BP_Mode_Type.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_SBpModeChangeInfo:
        def __init__(self, uint32__time_stamp = 0, e__BP_Mode_Type__target_mode = 0):
            self.uint32__time_stamp = uint32__time_stamp
            self.e__BP_Mode_Type__target_mode = e__BP_Mode_Type__target_mode
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__time_stamp)
            
            result += FP_API_EPSII_BP_1.enum_BP_Mode_Type(self.e__BP_Mode_Type__target_mode).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.struct_SBpModeChangeInfo()
    
            currentPos = pos
            
            (resultInstance.uint32__time_stamp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__BP_Mode_Type__target_mode, bytesProcessed) = FP_API_EPSII_BP_1.enum_BP_Mode_Type.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 5
    
    class enum_ESDI_FirmwareType:
        ESDI_FIRMWARETYPE_ESDIFT_PRODUCTION = 0
        ESDI_FIRMWARETYPE_ESDIFT_BASICAPP = 1
    
        ValuesDict = {
            ESDI_FIRMWARETYPE_ESDIFT_PRODUCTION : 'ESDI_FIRMWARETYPE_ESDIFT_PRODUCTION', 
            ESDI_FIRMWARETYPE_ESDIFT_BASICAPP : 'ESDI_FIRMWARETYPE_ESDIFT_BASICAPP'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_ESDI_FirmwareType()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_ESDI_FirmwareType.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_ESDI_FirmwareType.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_EDHI_ChipStatus:
        EDHI_CHIPSTATUS_EDHICS_EMDCS_UNKNOWN = 0
        EDHI_CHIPSTATUS_EDHICS_EMDCS_ONLINE = 1
        EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_ERR = 2
        EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_TIMEOUT = 3
        EDHI_CHIPSTATUS_EDHICS_EMDCS_DRV_DISABLED = 4
    
        ValuesDict = {
            EDHI_CHIPSTATUS_EDHICS_EMDCS_UNKNOWN : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_UNKNOWN', 
            EDHI_CHIPSTATUS_EDHICS_EMDCS_ONLINE : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_ONLINE', 
            EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_ERR : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_ERR', 
            EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_TIMEOUT : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_COM_TIMEOUT', 
            EDHI_CHIPSTATUS_EDHICS_EMDCS_DRV_DISABLED : 'EDHI_CHIPSTATUS_EDHICS_EMDCS_DRV_DISABLED'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_SBH_EnableBitmask:
        SBH_ENABLEBITMASK_SBHEB_ALL_MODES_DISABLE = 0
        SBH_ENABLEBITMASK_SBHEB_NORMAL_MODE_ONLY = 1
        SBH_ENABLEBITMASK_SBHEB_HIB_MODE_ONLY = 2
        SBH_ENABLEBITMASK_SBHEB_HIB_AND_NORMAL = 3
    
        ValuesDict = {
            SBH_ENABLEBITMASK_SBHEB_ALL_MODES_DISABLE : 'SBH_ENABLEBITMASK_SBHEB_ALL_MODES_DISABLE', 
            SBH_ENABLEBITMASK_SBHEB_NORMAL_MODE_ONLY : 'SBH_ENABLEBITMASK_SBHEB_NORMAL_MODE_ONLY', 
            SBH_ENABLEBITMASK_SBHEB_HIB_MODE_ONLY : 'SBH_ENABLEBITMASK_SBHEB_HIB_MODE_ONLY', 
            SBH_ENABLEBITMASK_SBHEB_HIB_AND_NORMAL : 'SBH_ENABLEBITMASK_SBHEB_HIB_AND_NORMAL'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_SBH_EnableBitmask()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_SBH_EnableBitmask.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_SBH_EnableBitmask.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_SBH_SetError:
        SBH_SETERROR_SBHSE_SUCCESS = 0
        SBH_SETERROR_SBHSE_BAD_PARAMS = 1
        SBH_SETERROR_SBHSE_NVM_ERR = 2
    
        ValuesDict = {
            SBH_SETERROR_SBHSE_SUCCESS : 'SBH_SETERROR_SBHSE_SUCCESS', 
            SBH_SETERROR_SBHSE_BAD_PARAMS : 'SBH_SETERROR_SBHSE_BAD_PARAMS', 
            SBH_SETERROR_SBHSE_NVM_ERR : 'SBH_SETERROR_SBHSE_NVM_ERR'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_SBH_SetError()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_SBH_SetError.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_SBH_SetError.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_EMDrvOperationResult:
        EMDRVOPERATIONRESULT_EMDOR_SUCCESS = 0
        EMDRVOPERATIONRESULT_EMDOR_IN_PROGRESS = 1
        EMDRVOPERATIONRESULT_EMDOR_BUSY = 2
        EMDRVOPERATIONRESULT_EMDOR_OFFLINE = 3
        EMDRVOPERATIONRESULT_EMDOR_COM_ERR = 4
        EMDRVOPERATIONRESULT_EMDOR_COM_TIMEOUT = 5
        EMDRVOPERATIONRESULT_EMDOR_WRC_ERR = 6
        EMDRVOPERATIONRESULT_EMDOR_GENERAL_ERR = 7
        EMDRVOPERATIONRESULT_EMDOR_DRV_DISABLED = 8
    
        ValuesDict = {
            EMDRVOPERATIONRESULT_EMDOR_SUCCESS : 'EMDRVOPERATIONRESULT_EMDOR_SUCCESS', 
            EMDRVOPERATIONRESULT_EMDOR_IN_PROGRESS : 'EMDRVOPERATIONRESULT_EMDOR_IN_PROGRESS', 
            EMDRVOPERATIONRESULT_EMDOR_BUSY : 'EMDRVOPERATIONRESULT_EMDOR_BUSY', 
            EMDRVOPERATIONRESULT_EMDOR_OFFLINE : 'EMDRVOPERATIONRESULT_EMDOR_OFFLINE', 
            EMDRVOPERATIONRESULT_EMDOR_COM_ERR : 'EMDRVOPERATIONRESULT_EMDOR_COM_ERR', 
            EMDRVOPERATIONRESULT_EMDOR_COM_TIMEOUT : 'EMDRVOPERATIONRESULT_EMDOR_COM_TIMEOUT', 
            EMDRVOPERATIONRESULT_EMDOR_WRC_ERR : 'EMDRVOPERATIONRESULT_EMDOR_WRC_ERR', 
            EMDRVOPERATIONRESULT_EMDOR_GENERAL_ERR : 'EMDRVOPERATIONRESULT_EMDOR_GENERAL_ERR', 
            EMDRVOPERATIONRESULT_EMDOR_DRV_DISABLED : 'EMDRVOPERATIONRESULT_EMDOR_DRV_DISABLED'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_EMDrvOperationResult()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_EMDrvOperationResult.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_EMDrvOperationResult.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_LeaveNoHibModeResult:
        LEAVENOHIBMODERESULT_SUCCESS = 0
        LEAVENOHIBMODERESULT_DEVICE_NOT_IN_NOHIB_MODE = 1
        LEAVENOHIBMODERESULT_FAIL = 2
    
        ValuesDict = {
            LEAVENOHIBMODERESULT_SUCCESS : 'LEAVENOHIBMODERESULT_SUCCESS', 
            LEAVENOHIBMODERESULT_DEVICE_NOT_IN_NOHIB_MODE : 'LEAVENOHIBMODERESULT_DEVICE_NOT_IN_NOHIB_MODE', 
            LEAVENOHIBMODERESULT_FAIL : 'LEAVENOHIBMODERESULT_FAIL'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_LeaveNoHibModeResult()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_LeaveNoHibModeResult.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_LeaveNoHibModeResult.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_SBS_BpHibSetting:
        def __init__(self, int64__EnterThreshold = 0, int64__ExitThreshold = 0, int64__nLowTemperature = 0, int64__nLowTemperatureRestore = 0, uint8__nMaximumHeatersPower = 0):
            self.int64__EnterThreshold = int64__EnterThreshold
            self.int64__ExitThreshold = int64__ExitThreshold
            self.int64__nLowTemperature = int64__nLowTemperature
            self.int64__nLowTemperatureRestore = int64__nLowTemperatureRestore
            self.uint8__nMaximumHeatersPower = uint8__nMaximumHeatersPower
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("int64", self.int64__EnterThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("int64", self.int64__ExitThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("int64", self.int64__nLowTemperature)
            
            result += SerDesHelpers.serdesType_basic.serialize("int64", self.int64__nLowTemperatureRestore)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__nMaximumHeatersPower)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.struct_SBS_BpHibSetting()
    
            currentPos = pos
            
            (resultInstance.int64__EnterThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int64__ExitThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int64__nLowTemperature, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int64__nLowTemperatureRestore, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__nMaximumHeatersPower, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 33
    
    class struct_SBasicSettings:
        def __init__(self, uint8__BroadcastInterval = 0, uint16__HibModeTimeout = 0, uint16__HealthyBpCheckTime = 0, s__BpHibModeSettings = None, uint16__ChargeCurrentLimit = 0):
            self.uint8__BroadcastInterval = uint8__BroadcastInterval
            self.uint16__HibModeTimeout = uint16__HibModeTimeout
            self.uint16__HealthyBpCheckTime = uint16__HealthyBpCheckTime
            self.s__BpHibModeSettings = s__BpHibModeSettings
            self.uint16__ChargeCurrentLimit = uint16__ChargeCurrentLimit
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__BroadcastInterval)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__HibModeTimeout)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__HealthyBpCheckTime)
            
            result += self.s__BpHibModeSettings.serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ChargeCurrentLimit)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.struct_SBasicSettings()
    
            currentPos = pos
            
            (resultInstance.uint8__BroadcastInterval, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__HibModeTimeout, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__HealthyBpCheckTime, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.s__BpHibModeSettings, bytesProcessed) = FP_API_EPSII_BP_1.struct_SBS_BpHibSetting.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ChargeCurrentLimit, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 40
    
    class enum_SBS_SetError:
        SBS_SETERROR_SBSSE_SUCCESS = 0
        SBS_SETERROR_SBSSE_NVM_ERR = 1
        SBS_SETERROR_SBSSE_BAD_PARAMS = 2
        SBS_SETERROR_SBSSE_REG_TYPE_NOT_SUPP = 3
    
        ValuesDict = {
            SBS_SETERROR_SBSSE_SUCCESS : 'SBS_SETERROR_SBSSE_SUCCESS', 
            SBS_SETERROR_SBSSE_NVM_ERR : 'SBS_SETERROR_SBSSE_NVM_ERR', 
            SBS_SETERROR_SBSSE_BAD_PARAMS : 'SBS_SETERROR_SBSSE_BAD_PARAMS', 
            SBS_SETERROR_SBSSE_REG_TYPE_NOT_SUPP : 'SBS_SETERROR_SBSSE_REG_TYPE_NOT_SUPP'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_SBS_SetError()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_SBS_SetError.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_SBS_SetError.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_SBS_GetError:
        SBS_GETERROR_SBSGE_SUCCESS = 0
        SBS_GETERROR_SBSGE_NVM_ERR = 1
        SBS_GETERROR_SBSGE_CONFIG_NOT_SET = 2
    
        ValuesDict = {
            SBS_GETERROR_SBSGE_SUCCESS : 'SBS_GETERROR_SBSGE_SUCCESS', 
            SBS_GETERROR_SBSGE_NVM_ERR : 'SBS_GETERROR_SBSGE_NVM_ERR', 
            SBS_GETERROR_SBSGE_CONFIG_NOT_SET : 'SBS_GETERROR_SBSGE_CONFIG_NOT_SET'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_SBS_GetError()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_SBS_GetError.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_SBS_GetError.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_SMSP_Exception:
        def __init__(self, uint16__m_nFileID = 0, uint16__m_nLineNum = 0):
            self.uint16__m_nFileID = uint16__m_nFileID
            self.uint16__m_nLineNum = uint16__m_nLineNum
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__m_nFileID)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__m_nLineNum)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.struct_SMSP_Exception()
    
            currentPos = pos
            
            (resultInstance.uint16__m_nFileID, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__m_nLineNum, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 4
    
    class enum_ChargerSettings:
        CHARGERSETTINGS_READ_STAT = 0
        CHARGERSETTINGS_ENABLE_CFG_PRYMARY = 1
        CHARGERSETTINGS_ENABLE_CFG_SECONDARY = 2
        CHARGERSETTINGS_ENABLE_CFG_AUTO = 3
    
        ValuesDict = {
            CHARGERSETTINGS_READ_STAT : 'CHARGERSETTINGS_READ_STAT', 
            CHARGERSETTINGS_ENABLE_CFG_PRYMARY : 'CHARGERSETTINGS_ENABLE_CFG_PRYMARY', 
            CHARGERSETTINGS_ENABLE_CFG_SECONDARY : 'CHARGERSETTINGS_ENABLE_CFG_SECONDARY', 
            CHARGERSETTINGS_ENABLE_CFG_AUTO : 'CHARGERSETTINGS_ENABLE_CFG_AUTO'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_EPSII_BP_1.enum_ChargerSettings()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_EPSII_BP_1.enum_ChargerSettings.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_EPSII_BP_1.enum_ChargerSettings.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    

    ############################################################################################################
    """
    Request function for FIDL method: GetDeviceInfo
        - function ID: 00000001
        - description: Get basic device information: device type, serial number, current operational mode, software version, etc.
    """
    def req_GetDeviceInfo(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000001
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000001, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetDeviceInfo
        - function ID: 00000001
        - description: Get basic device information: device type, serial number, current operational mode, software version, etc.
    """
    def resp_GetDeviceInfo(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000001):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__ModuleTypeID"] = field
        currentPos += bytesProcessed
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__string__ModuleTypeSize"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_string.deserialize(data, currentPos, 20)
        responseInstance["string__ModuleType"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__ModuleHWVersion"] = field
        currentPos += bytesProcessed
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__string__DeviceSerialNumberSize"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_string.deserialize(data, currentPos, 30)
        responseInstance["string__DeviceSerialNumber"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_ESDI_FirmwareType.deserialize(data, currentPos)
        responseInstance["e__ESDI_FirmwareType__FWTypeID"] = field
        currentPos += bytesProcessed
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__string__FWTypeSize"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_string.deserialize(data, currentPos, 20)
        responseInstance["string__FWType"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__FWVersionMaj"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__FWVersionMin"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__BLVersionMaj"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__BLVersionMin"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetRAWSensors
        - function ID: 00000002
        - description: Get RAW sensor values by ID. Up to 50 different sensor values may be got.
    """
    def req_GetRAWSensors(self, uint32__PktIDReq, a__e__EPSIIT_SensorIDs__50__SensorsIDs):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000002
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint32", uint32__PktIDReq)
        actualLen = len(a__e__EPSIIT_SensorIDs__50__SensorsIDs)
    
        if (actualLen > 50):
            raise Exception("The maximum expected size for array argument a__e__EPSIIT_SensorIDs__50__SensorsIDs is 50 bytes but " + str(actualLen) + " bytes were provided.")
        requestBytes += SerDesHelpers.serdesType_customTypeArray.serialize(a__e__EPSIIT_SensorIDs__50__SensorsIDs, 50)
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000002, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetRAWSensors
        - function ID: 00000002
        - description: Get RAW sensor values by ID. Up to 50 different sensor values may be got.
    """
    def resp_GetRAWSensors(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000002):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
        responseInstance["uint32__PktID"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basicArray.deserialize("int32", data, currentPos, 50)
        responseInstance["a__int32__50__SensorValues"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBatteryInfo
        - function ID: 00000003
        - description: Get device information
    """
    def req_GetBatteryInfo(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000003
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000003, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBatteryInfo
        - function ID: 00000003
        - description: Get device information
    """
    def resp_GetBatteryInfo(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000003):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_BP_Mode_Type.deserialize(data, currentPos)
        responseInstance["e__BP_Mode_Type__bp_mode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattEnergy"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattCharge"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattChargeCapacity"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattPercent"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattVoltage"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattCurrent"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int64", data, currentPos)
        responseInstance["int64__BattTemperature"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetDeviceHealthInfo
        - function ID: 00000004
        - description: Get information about all chip statuses (driver state) and CPU temperature, voltage and running time
    """
    def req_GetDeviceHealthInfo(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000004
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000004, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetDeviceHealthInfo
        - function ID: 00000004
        - description: Get information about all chip statuses (driver state) and CPU temperature, voltage and running time
    """
    def resp_GetDeviceHealthInfo(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000004):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__ActiveCPU_RunningTime"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__ActiveCPU_Voltage"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__ActiveCPU_Temperature"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__PCB_Temperature_1"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__PCB_Temperature_2"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__NVM_AllocatedSize"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__NVM_UsedSize"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__Stack_AllocatedSize"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__Stack_UsedSize"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__BALANCER_CHIP_1"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__BALANCER_CHIP_2"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_XP"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_XR"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_YP"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_YR"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_ZP"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__LT8491_IC_ZR"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__INA_BAT_OUT_1"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__INA_BAT_OUT_2"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__TMP117_U810"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__TMP117_U811"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__GPIO_PCA9538_U2001"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__GPIO_PCA9538_U2002"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__DPOT_MCP4562_CURRENT_LIMMITER"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: SetBatHeaterSettings
        - function ID: 00000050
        - description: Set batteries heaters settings
    """
    def req_SetBatHeaterSettings(self, e__SBH_EnableBitmask__EnableBitmask, int32__NormalModeSetPointTemp, int32__HibModeSetPointTemp, uint16__Hysteresis):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000050
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_EPSII_BP_1.enum_SBH_EnableBitmask(e__SBH_EnableBitmask__EnableBitmask).serialize()
        requestBytes += SerDesHelpers.serdesType_basic.serialize("int32", int32__NormalModeSetPointTemp)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("int32", int32__HibModeSetPointTemp)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint16", uint16__Hysteresis)
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000050, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: SetBatHeaterSettings
        - function ID: 00000050
        - description: Set batteries heaters settings
    """
    def resp_SetBatHeaterSettings(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000050):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_SBH_SetError.deserialize(data, currentPos)
        responseInstance["e__SBH_SetError__Err"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBatHeaterSettings
        - function ID: 00000051
        - description: Get current batteries heaters settings
    """
    def req_GetBatHeaterSettings(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000051
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000051, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBatHeaterSettings
        - function ID: 00000051
        - description: Get current batteries heaters settings
    """
    def resp_GetBatHeaterSettings(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000051):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_SBH_SetError.deserialize(data, currentPos)
        responseInstance["e__SBH_SetError__Err"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_SBH_EnableBitmask.deserialize(data, currentPos)
        responseInstance["e__SBH_EnableBitmask__EnableBitmask"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__NormalModeSetPointTemp"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__HibModeSetPointTemp"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__Hysteresis"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: SetBasicSettings
        - function ID: 00000007
        - description: Set basic device operation configuration.
    """
    def req_SetBasicSettings(self, s__BasicSettings):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000007
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += s__BasicSettings.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000007, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: SetBasicSettings
        - function ID: 00000007
        - description: Set basic device operation configuration.
    """
    def resp_SetBasicSettings(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000007):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_SBS_SetError.deserialize(data, currentPos)
        responseInstance["e__SBS_SetError__Err"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBasicSettings
        - function ID: 00000008
        - description: Get current basic device settings
    """
    def req_GetBasicSettings(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000008
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000008, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBasicSettings
        - function ID: 00000008
        - description: Get current basic device settings
    """
    def resp_GetBasicSettings(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000008):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_SBS_GetError.deserialize(data, currentPos)
        responseInstance["e__SBS_GetError__Err"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_EPSII_BP_1.struct_SBasicSettings.deserialize(data, currentPos)
        responseInstance["s__BasicSettings"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBasicAppExceptions
        - function ID: 0000000B
        - description: Get last 16 ASSERT fails
    """
    def req_GetBasicAppExceptions(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000B
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000B, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBasicAppExceptions
        - function ID: 0000000B
        - description: Get last 16 ASSERT fails
    """
    def resp_GetBasicAppExceptions(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000B):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_customTypeArray.deserialize(FP_API_EPSII_BP_1.struct_SMSP_Exception, data, currentPos, 16)
        responseInstance["a__s__16__exceptions"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBasicAppErrCounters
        - function ID: 0000000C
        - description: Counters for different diagnostic parameters
    """
    def req_GetBasicAppErrCounters(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000C
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000C, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBasicAppErrCounters
        - function ID: 0000000C
        - description: Counters for different diagnostic parameters
    """
    def resp_GetBasicAppErrCounters(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000C):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.struct_SDiagErrCounter.deserialize(data, currentPos)
        responseInstance["s__errorCounters"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetMainAppExceptions
        - function ID: 0000000D
        - description: Get last 16 ASSERT fails
    """
    def req_GetMainAppExceptions(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000D
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000D, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetMainAppExceptions
        - function ID: 0000000D
        - description: Get last 16 ASSERT fails
    """
    def resp_GetMainAppExceptions(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000D):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_customTypeArray.deserialize(FP_API_EPSII_BP_1.struct_SMSP_Exception, data, currentPos, 16)
        responseInstance["a__s__16__exceptions"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetMainAppErrCounters
        - function ID: 0000000E
        - description: Counters for different diagnostic parameters
    """
    def req_GetMainAppErrCounters(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000E
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000E, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetMainAppErrCounters
        - function ID: 0000000E
        - description: Counters for different diagnostic parameters
    """
    def resp_GetMainAppErrCounters(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000E):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.struct_SDiagErrCounter.deserialize(data, currentPos)
        responseInstance["s__errorCounters"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: OnESCP_ResetMainAppErrCounters
        - function ID: 0000000F
        - description: Clear all error counters in the Main application
    """
    def req_OnESCP_ResetMainAppErrCounters(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000F
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000F, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: OnESCP_ResetMainAppErrCounters
        - function ID: 0000000F
        - description: Clear all error counters in the Main application
    """
    def resp_OnESCP_ResetMainAppErrCounters(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000F):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["bool__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: OnESCP_ResetMainAppExceptions
        - function ID: 00000010
        - description: Clear all exceptions in the Main application
    """
    def req_OnESCP_ResetMainAppExceptions(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000010
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000010, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: OnESCP_ResetMainAppExceptions
        - function ID: 00000010
        - description: Clear all exceptions in the Main application
    """
    def resp_OnESCP_ResetMainAppExceptions(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000010):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["bool__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: OnESCP_ResetBasicAppErrCounters
        - function ID: 00000011
        - description: Clear all error counters in the BasicApp
    """
    def req_OnESCP_ResetBasicAppErrCounters(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000011
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000011, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: OnESCP_ResetBasicAppErrCounters
        - function ID: 00000011
        - description: Clear all error counters in the BasicApp
    """
    def resp_OnESCP_ResetBasicAppErrCounters(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000011):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["bool__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: OnESCP_ResetBasicAppExceptions
        - function ID: 00000012
        - description: Clear all exceptions in the BasicApp
    """
    def req_OnESCP_ResetBasicAppExceptions(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000012
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000012, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: OnESCP_ResetBasicAppExceptions
        - function ID: 00000012
        - description: Clear all exceptions in the BasicApp
    """
    def resp_OnESCP_ResetBasicAppExceptions(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000012):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["bool__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBalancerStatus
        - function ID: 00000013
        - description: Status Registers 0-3(address 0x80-0x83) from the balancer, external temperature one chosen register
    """
    def req_GetBalancerStatus(self, uint8__requestSpecificRegNumber):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000013
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint8", uint8__requestSpecificRegNumber)
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000013, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBalancerStatus
        - function ID: 00000013
        - description: Status Registers 0-3(address 0x80-0x83) from the balancer, external temperature one chosen register
    """
    def resp_GetBalancerStatus(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000013):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EDHI_ChipStatus.deserialize(data, currentPos)
        responseInstance["e__EDHI_ChipStatus__result"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__status_register_0"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__status_register_1"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__status_register_2"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__status_register_3"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__ntc_resistance_1"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["int32__ntc_resistance_2"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
        responseInstance["int16__requested_register_value"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: ResetDevice
        - function ID: 00000020
        - description: Reset device in same mode (main/basic) as it is at the time command is received.
    """
    def req_ResetDevice(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000020
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000020, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: ResetDevice
        - function ID: 00000020
        - description: Reset device in same mode (main/basic) as it is at the time command is received.
    """
    def resp_ResetDevice(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000020):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["bool__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: ForceInstallMainApp
        - function ID: 00000021
        - description: Restart and install main application. This command may be initiated to switch from BasicApp operation to main.
    """
    def req_ForceInstallMainApp(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000021
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000021, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: ForceInstallMainApp
        - function ID: 00000021
        - description: Restart and install main application. This command may be initiated to switch from BasicApp operation to main.
    """
    def resp_ForceInstallMainApp(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000021):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["bool__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: ForceInstallBasicApp
        - function ID: 00000022
        - description: Restart and install BasicApp.
    """
    def req_ForceInstallBasicApp(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000022
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000022, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: ForceInstallBasicApp
        - function ID: 00000022
        - description: Restart and install BasicApp.
    """
    def resp_ForceInstallBasicApp(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000022):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["bool__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBootLoaderErrCounters
        - function ID: 00000023
        - description: Get the values of the error counters of the bootloader about the App fails to run
    """
    def req_GetBootLoaderErrCounters(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000023
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000023, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBootLoaderErrCounters
        - function ID: 00000023
        - description: Get the values of the error counters of the bootloader about the App fails to run
    """
    def resp_GetBootLoaderErrCounters(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000023):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__c_app_restart_errors"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__g_pAppCyclesErrors"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__reserved"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__g_pIntegrityCheckStates"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: ResetBootLdrErrCounters
        - function ID: 00000024
        - description: Clear the values of the error counters of the bootloader about the App fails to run
    """
    def req_ResetBootLdrErrCounters(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000024
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000024, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: ResetBootLdrErrCounters
        - function ID: 00000024
        - description: Clear the values of the error counters of the bootloader about the App fails to run
    """
    def resp_ResetBootLdrErrCounters(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000024):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__c_app_restart_errors"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__g_pAppCyclesErrors"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__reserved"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__g_pIntegrityCheckStates"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: SetChargerSettings
        - function ID: 00000025
        - description: Three possible configurations: primary, secondary, automatic
    """
    def req_SetChargerSettings(self, a__e__ChargerSettings__3__inChargers):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000025
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        actualLen = len(a__e__ChargerSettings__3__inChargers)
    
        if (actualLen > 3):
            raise Exception("The maximum expected size for array argument a__e__ChargerSettings__3__inChargers is 3 bytes but " + str(actualLen) + " bytes were provided.")
        requestBytes += SerDesHelpers.serdesType_customTypeArray.serialize(a__e__ChargerSettings__3__inChargers, 3)
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000025, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: SetChargerSettings
        - function ID: 00000025
        - description: Three possible configurations: primary, secondary, automatic
    """
    def resp_SetChargerSettings(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000025):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_customTypeArray.deserialize(FP_API_EPSII_BP_1.enum_ChargerSettings, data, currentPos, 3)
        responseInstance["a__e__ChargerSettings__3__outChargers"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: SetRTC
        - function ID: 00000026
        - description: Adjust the time and data of the RTC. To read you can send 0s as data or any invalid data. You can set only data or only time.
    """
    def req_SetRTC(self, uint8__in_hours, uint8__in_minutes, uint8__in_seconds, uint8__in_date, uint8__in_month, uint16__in_year):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000026
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint8", uint8__in_hours)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint8", uint8__in_minutes)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint8", uint8__in_seconds)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint8", uint8__in_date)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint8", uint8__in_month)
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint16", uint16__in_year)
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000026, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: SetRTC
        - function ID: 00000026
        - description: Adjust the time and data of the RTC. To read you can send 0s as data or any invalid data. You can set only data or only time.
    """
    def resp_SetRTC(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000026):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_hours"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_minutes"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_seconds"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_day"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_month"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__out_year"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetRTC
        - function ID: 00000027
        - description: Read data and time of the RTC
    """
    def req_GetRTC(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000027
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000027, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetRTC
        - function ID: 00000027
        - description: Read data and time of the RTC
    """
    def resp_GetRTC(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000027):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_hours"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_minutes"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_seconds"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_day"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__out_month"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
        responseInstance["uint16__out_year"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: LeaveNoHibMode
        - function ID: 00000028
        - description: Read data and time of the RTC
    """
    def req_LeaveNoHibMode(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000028
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000028, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: LeaveNoHibMode
        - function ID: 00000028
        - description: Read data and time of the RTC
    """
    def resp_LeaveNoHibMode(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000028):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_LeaveNoHibModeResult.deserialize(data, currentPos)
        responseInstance["e__LeaveNoHibModeResult__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: RequestPowerDown
        - function ID: 00000029
        - description: Requests Power Down
    """
    def req_RequestPowerDown(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000029
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000029, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: RequestPowerDown
        - function ID: 00000029
        - description: Requests Power Down
    """
    def resp_RequestPowerDown(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000029):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EMDrvOperationResult.deserialize(data, currentPos)
        responseInstance["e__EMDrvOperationResult__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBpModeSmRollingTrace
        - function ID: 00000031
        - description: Get Battery Pack state machine rolling trace
    """
    def req_GetBpModeSmRollingTrace(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000031
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000031, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBpModeSmRollingTrace
        - function ID: 00000031
        - description: Get Battery Pack state machine rolling trace
    """
    def resp_GetBpModeSmRollingTrace(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000031):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["uint8__current_index"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_customTypeArray.deserialize(FP_API_EPSII_BP_1.struct_SBpModeChangeInfo, data, currentPos, 20)
        responseInstance["a__s__20__change_info"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: SetBpReleaseLine
        - function ID: 00000032
        - description: Set Release power line
    """
    def req_SetBpReleaseLine(self, bool__new_state):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000032
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += SerDesHelpers.serdesType_basic.serialize("uint8", bool__new_state)
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000032, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: SetBpReleaseLine
        - function ID: 00000032
        - description: Set Release power line
    """
    def resp_SetBpReleaseLine(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000032):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EMDrvOperationResult.deserialize(data, currentPos)
        responseInstance["e__EMDrvOperationResult__result"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: GetBpReleaseLine
        - function ID: 00000033
        - description: Set Release power line
    """
    def req_GetBpReleaseLine(self):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_EPSII_BP_1_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000033
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000033, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: GetBpReleaseLine
        - function ID: 00000033
        - description: Set Release power line
    """
    def resp_GetBpReleaseLine(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000033):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = FP_API_EPSII_BP_1.enum_EMDrvOperationResult.deserialize(data, currentPos)
        responseInstance["e__EMDrvOperationResult__result"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
        responseInstance["bool__release_line_state"] = field
        currentPos += bytesProcessed
    
        return responseInstance


    ############################################################################################################
    """
    Deserializes the provided bytearray and returns a dictionary of parsed values for the response;
    functionId parameter shall be supplied if the class is used in rawSerDesSupport mode, otherwise
    it is extracted from the FP header
    """
    def resp_parse(self, respBytes, functionId : int = 0):
        if not self.rawSerDesSupport:
            # try to parse FunctionProtocol header
            (fpHeaderInstance, bytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(respBytes, 0)
            funcId = fpHeaderInstance.u32FuncId

            if fpHeaderInstance.u16ProtoId != self.const_EPSII_BP_1_PROTOCOL_ID:
                raise Exception("Unsupported protocol ID", fpHeaderInstance.u16ProtoId)
        else:
            funcId = functionId

        if funcId in self.responseParsersDict:
            respParserFunc = self.responseParsersDict[funcId]
            return respParserFunc(respBytes) if respParserFunc is not None else None
        else:
            raise Exception('Unsupported function id', hex(funcId))
    ############################################################################################################
    """
    Returns the Protocol version as a string vM.m
    """
    def get_version(self):
        return f'v{self.versionMajor}.{self.versionMinor}'
    ############################################################################################################

