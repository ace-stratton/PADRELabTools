# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class SimulationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'satellite_id': 'str',
        'telecommands': 'list[TelecommandSimulationRequest]',
        'simulation_config': 'SimulationConfig',
        'orbit_config': 'OrbitConfig'
    }

    attribute_map = {
        'satellite_id': 'satelliteId',
        'telecommands': 'telecommands',
        'simulation_config': 'simulationConfig',
        'orbit_config': 'orbitConfig'
    }

    def __init__(self, satellite_id=None, telecommands=None, simulation_config=None, orbit_config=None, local_vars_configuration=None):  # noqa: E501
        """SimulationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._satellite_id = None
        self._telecommands = None
        self._simulation_config = None
        self._orbit_config = None
        self.discriminator = None

        self.satellite_id = satellite_id
        self.telecommands = telecommands
        if simulation_config is not None:
            self.simulation_config = simulation_config
        if orbit_config is not None:
            self.orbit_config = orbit_config

    @property
    def satellite_id(self):
        """Gets the satellite_id of this SimulationRequest.  # noqa: E501

        Id of the satellite  # noqa: E501

        :return: The satellite_id of this SimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._satellite_id

    @satellite_id.setter
    def satellite_id(self, satellite_id):
        """Sets the satellite_id of this SimulationRequest.

        Id of the satellite  # noqa: E501

        :param satellite_id: The satellite_id of this SimulationRequest.  # noqa: E501
        :type satellite_id: str
        """
        if self.local_vars_configuration.client_side_validation and satellite_id is None:  # noqa: E501
            raise ValueError("Invalid value for `satellite_id`, must not be `None`")  # noqa: E501

        self._satellite_id = satellite_id

    @property
    def telecommands(self):
        """Gets the telecommands of this SimulationRequest.  # noqa: E501

        List of telecommands to be simulated  # noqa: E501

        :return: The telecommands of this SimulationRequest.  # noqa: E501
        :rtype: list[TelecommandSimulationRequest]
        """
        return self._telecommands

    @telecommands.setter
    def telecommands(self, telecommands):
        """Sets the telecommands of this SimulationRequest.

        List of telecommands to be simulated  # noqa: E501

        :param telecommands: The telecommands of this SimulationRequest.  # noqa: E501
        :type telecommands: list[TelecommandSimulationRequest]
        """
        if self.local_vars_configuration.client_side_validation and telecommands is None:  # noqa: E501
            raise ValueError("Invalid value for `telecommands`, must not be `None`")  # noqa: E501

        self._telecommands = telecommands

    @property
    def simulation_config(self):
        """Gets the simulation_config of this SimulationRequest.  # noqa: E501


        :return: The simulation_config of this SimulationRequest.  # noqa: E501
        :rtype: SimulationConfig
        """
        return self._simulation_config

    @simulation_config.setter
    def simulation_config(self, simulation_config):
        """Sets the simulation_config of this SimulationRequest.


        :param simulation_config: The simulation_config of this SimulationRequest.  # noqa: E501
        :type simulation_config: SimulationConfig
        """

        self._simulation_config = simulation_config

    @property
    def orbit_config(self):
        """Gets the orbit_config of this SimulationRequest.  # noqa: E501


        :return: The orbit_config of this SimulationRequest.  # noqa: E501
        :rtype: OrbitConfig
        """
        return self._orbit_config

    @orbit_config.setter
    def orbit_config(self, orbit_config):
        """Sets the orbit_config of this SimulationRequest.


        :param orbit_config: The orbit_config of this SimulationRequest.  # noqa: E501
        :type orbit_config: OrbitConfig
        """

        self._orbit_config = orbit_config

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimulationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimulationRequest):
            return True

        return self.to_dict() != other.to_dict()
