# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import endurosat_api
from endurosat_api.models.conjunction_event import ConjunctionEvent  # noqa: E501
from endurosat_api.rest import ApiException

class TestConjunctionEvent(unittest.TestCase):
    """ConjunctionEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ConjunctionEvent
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = endurosat_api.models.conjunction_event.ConjunctionEvent()  # noqa: E501
        if include_optional :
            return ConjunctionEvent(
                conjunction_id = '', 
                satellite_id = '', 
                conjunction_data = endurosat_api.models.base_conjunction_data.BaseConjunctionData(
                    tca = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    miss_distance = 1.337, 
                    relative_position_r = 1.337, 
                    relative_position_t = 1.337, 
                    relative_position_n = 1.337, 
                    relative_speed = 1.337, 
                    relative_velocity_r = 1.337, 
                    relative_velocity_t = 1.337, 
                    relative_velocity_n = 1.337, 
                    apparent_incidence_angle = 1.337, 
                    event_altitude = 1.337, 
                    combined_hard_body_radius = 1.337, 
                    collision_probability = 1.337, 
                    collision_probability_method = 'AKELLAALFRIEND_2000', 
                    risk_level = 'LOW', 
                    screening_type = 'CAT_VS_CAT', 
                    max_scaled_collision_probability = endurosat_api.models.scaled_collision_probability.ScaledCollisionProbability(
                        primary_factor = 1.337, 
                        secondary_factor = 1.337, 
                        probability_of_collision = 1.337, ), 
                    is_in_dilution_zone = True, ), 
                object1 = endurosat_api.models.catalogue_object_with_keplerian_elements.CatalogueObjectWithKeplerianElements(
                    catalogue_id = 56, 
                    catalogue_name = '', 
                    object_name = '', 
                    cospar_id = '', 
                    object_type = '', 
                    manoeuvrable = 'YES', 
                    hard_body_radius = 1.337, 
                    orbital_period = 1.337, 
                    perigee_altitude = 1.337, 
                    apogee_altitude = 1.337, 
                    semi_major_axis = 1.337, 
                    eccentricity = 1.337, 
                    inclination = 1.337, 
                    ra_of_asc_node = 1.337, 
                    arg_of_pericenter = 1.337, 
                    true_anomaly = 1.337, 
                    arg_of_latitude = 1.337, ), 
                object2 = endurosat_api.models.catalogue_object_with_keplerian_elements.CatalogueObjectWithKeplerianElements(
                    catalogue_id = 56, 
                    catalogue_name = '', 
                    object_name = '', 
                    cospar_id = '', 
                    object_type = '', 
                    manoeuvrable = 'YES', 
                    hard_body_radius = 1.337, 
                    orbital_period = 1.337, 
                    perigee_altitude = 1.337, 
                    apogee_altitude = 1.337, 
                    semi_major_axis = 1.337, 
                    eccentricity = 1.337, 
                    inclination = 1.337, 
                    ra_of_asc_node = 1.337, 
                    arg_of_pericenter = 1.337, 
                    true_anomaly = 1.337, 
                    arg_of_latitude = 1.337, ), 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                last_screened_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else :
            return ConjunctionEvent(
        )

    def testConjunctionEvent(self):
        """Test ConjunctionEvent"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
