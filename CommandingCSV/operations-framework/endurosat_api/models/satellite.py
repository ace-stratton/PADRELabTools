# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class Satellite(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'norad_id': 'int',
        'tle1': 'str',
        'tle2': 'str',
        'protocol': 'str',
        'protocol_configuration': 'dict(str, str)',
        'channels': 'list[ChannelConfiguration]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'norad_id': 'noradId',
        'tle1': 'tle1',
        'tle2': 'tle2',
        'protocol': 'protocol',
        'protocol_configuration': 'protocolConfiguration',
        'channels': 'channels'
    }

    def __init__(self, id=None, name=None, norad_id=None, tle1=None, tle2=None, protocol=None, protocol_configuration=None, channels=None, local_vars_configuration=None):  # noqa: E501
        """Satellite - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._norad_id = None
        self._tle1 = None
        self._tle2 = None
        self._protocol = None
        self._protocol_configuration = None
        self._channels = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if norad_id is not None:
            self.norad_id = norad_id
        if tle1 is not None:
            self.tle1 = tle1
        if tle2 is not None:
            self.tle2 = tle2
        self.protocol = protocol
        if protocol_configuration is not None:
            self.protocol_configuration = protocol_configuration
        self.channels = channels

    @property
    def id(self):
        """Gets the id of this Satellite.  # noqa: E501

        Object ID  # noqa: E501

        :return: The id of this Satellite.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Satellite.

        Object ID  # noqa: E501

        :param id: The id of this Satellite.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Satellite.  # noqa: E501

        Satellite Name  # noqa: E501

        :return: The name of this Satellite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Satellite.

        Satellite Name  # noqa: E501

        :param name: The name of this Satellite.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def norad_id(self):
        """Gets the norad_id of this Satellite.  # noqa: E501

        Satellite Catalog ID (NORAD ID)  # noqa: E501

        :return: The norad_id of this Satellite.  # noqa: E501
        :rtype: int
        """
        return self._norad_id

    @norad_id.setter
    def norad_id(self, norad_id):
        """Sets the norad_id of this Satellite.

        Satellite Catalog ID (NORAD ID)  # noqa: E501

        :param norad_id: The norad_id of this Satellite.  # noqa: E501
        :type norad_id: int
        """
        if (self.local_vars_configuration.client_side_validation and
                norad_id is not None and norad_id > 99999):  # noqa: E501
            raise ValueError("Invalid value for `norad_id`, must be a value less than or equal to `99999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                norad_id is not None and norad_id < 10000):  # noqa: E501
            raise ValueError("Invalid value for `norad_id`, must be a value greater than or equal to `10000`")  # noqa: E501

        self._norad_id = norad_id

    @property
    def tle1(self):
        """Gets the tle1 of this Satellite.  # noqa: E501

        TLE Line 1  # noqa: E501

        :return: The tle1 of this Satellite.  # noqa: E501
        :rtype: str
        """
        return self._tle1

    @tle1.setter
    def tle1(self, tle1):
        """Sets the tle1 of this Satellite.

        TLE Line 1  # noqa: E501

        :param tle1: The tle1 of this Satellite.  # noqa: E501
        :type tle1: str
        """

        self._tle1 = tle1

    @property
    def tle2(self):
        """Gets the tle2 of this Satellite.  # noqa: E501

        TLE Line 2  # noqa: E501

        :return: The tle2 of this Satellite.  # noqa: E501
        :rtype: str
        """
        return self._tle2

    @tle2.setter
    def tle2(self, tle2):
        """Sets the tle2 of this Satellite.

        TLE Line 2  # noqa: E501

        :param tle2: The tle2 of this Satellite.  # noqa: E501
        :type tle2: str
        """

        self._tle2 = tle2

    @property
    def protocol(self):
        """Gets the protocol of this Satellite.  # noqa: E501

        Satellite Protocol as supported by EnduroSat  # noqa: E501

        :return: The protocol of this Satellite.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Satellite.

        Satellite Protocol as supported by EnduroSat  # noqa: E501

        :param protocol: The protocol of this Satellite.  # noqa: E501
        :type protocol: str
        """
        if self.local_vars_configuration.client_side_validation and protocol is None:  # noqa: E501
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def protocol_configuration(self):
        """Gets the protocol_configuration of this Satellite.  # noqa: E501

        Protocol Configuration Properties as supported by EnduroSat  # noqa: E501

        :return: The protocol_configuration of this Satellite.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._protocol_configuration

    @protocol_configuration.setter
    def protocol_configuration(self, protocol_configuration):
        """Sets the protocol_configuration of this Satellite.

        Protocol Configuration Properties as supported by EnduroSat  # noqa: E501

        :param protocol_configuration: The protocol_configuration of this Satellite.  # noqa: E501
        :type protocol_configuration: dict(str, str)
        """

        self._protocol_configuration = protocol_configuration

    @property
    def channels(self):
        """Gets the channels of this Satellite.  # noqa: E501

        Communication Channel Configuration as supported by EnduroSat  # noqa: E501

        :return: The channels of this Satellite.  # noqa: E501
        :rtype: list[ChannelConfiguration]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Satellite.

        Communication Channel Configuration as supported by EnduroSat  # noqa: E501

        :param channels: The channels of this Satellite.  # noqa: E501
        :type channels: list[ChannelConfiguration]
        """
        if self.local_vars_configuration.client_side_validation and channels is None:  # noqa: E501
            raise ValueError("Invalid value for `channels`, must not be `None`")  # noqa: E501

        self._channels = channels

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Satellite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Satellite):
            return True

        return self.to_dict() != other.to_dict()
