# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from endurosat_api.api_client import ApiClient
from endurosat_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SatellitePassesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_satellite_pass(self, satellite_pass_id, **kwargs):  # noqa: E501
        """Cancel a Satellite Pass  # noqa: E501

        This method cancels a satellite pass by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_satellite_pass(satellite_pass_id, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to delete (required)
        :type satellite_pass_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.cancel_satellite_pass_with_http_info(satellite_pass_id, **kwargs)  # noqa: E501

    def cancel_satellite_pass_with_http_info(self, satellite_pass_id, **kwargs):  # noqa: E501
        """Cancel a Satellite Pass  # noqa: E501

        This method cancels a satellite pass by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_satellite_pass_with_http_info(satellite_pass_id, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to delete (required)
        :type satellite_pass_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'satellite_pass_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_satellite_pass" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'satellite_pass_id' is set
        if self.api_client.client_side_validation and ('satellite_pass_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_pass_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_pass_id` when calling `cancel_satellite_pass`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'satellite_pass_id' in local_var_params:
            path_params['satellitePassId'] = local_var_params['satellite_pass_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/satellite-passes/{satellitePassId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_satellite_pass(self, pass_prediction, **kwargs):  # noqa: E501
        """Book a Satellite Pass  # noqa: E501

        This method is used for booking passes for the current user. It requires a Pass Prediction obtained from the Pass Prediction API to be provided in the body of the request. Pass predictions are valid for 20 minutes.If the prediction has expired or is ivalid, a 400 Bad Request response will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_satellite_pass(pass_prediction, async_req=True)
        >>> result = thread.get()

        :param pass_prediction: (required)
        :type pass_prediction: PassPrediction
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.create_satellite_pass_with_http_info(pass_prediction, **kwargs)  # noqa: E501

    def create_satellite_pass_with_http_info(self, pass_prediction, **kwargs):  # noqa: E501
        """Book a Satellite Pass  # noqa: E501

        This method is used for booking passes for the current user. It requires a Pass Prediction obtained from the Pass Prediction API to be provided in the body of the request. Pass predictions are valid for 20 minutes.If the prediction has expired or is ivalid, a 400 Bad Request response will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_satellite_pass_with_http_info(pass_prediction, async_req=True)
        >>> result = thread.get()

        :param pass_prediction: (required)
        :type pass_prediction: PassPrediction
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'pass_prediction'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_satellite_pass" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pass_prediction' is set
        if self.api_client.client_side_validation and ('pass_prediction' not in local_var_params or  # noqa: E501
                                                        local_var_params['pass_prediction'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pass_prediction` when calling `create_satellite_pass`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pass_prediction' in local_var_params:
            body_params = local_var_params['pass_prediction']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            201: "str",
            401: "ErrorResponse",
            403: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/satellite-passes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_filtered_satellite_passes(self, **kwargs):  # noqa: E501
        """Get Filtered Satellite Passes  # noqa: E501

        This method returns a filtered list of Satellite Passes. Satellite Passes could be filtered by Satellite, Ground Station and Status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_filtered_satellite_passes(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get Satellite Passes
        :type satellite_id: str
        :param ground_station: Specifies the Ground Station(s) of the Satellite Passes to get.
        :type ground_station: list[str]
        :param status: Specifies the Status (or part of the Status) of the Satellite Passes to get
        :type status: str
        :param from_time: Filter to only return entries that were received after the specified time (inclusive)
        :type from_time: int
        :param to_time: Filter to only return entries that were received before the specified time (exclusive)
        :type to_time: int
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SatellitePassesResultPage
        """
        kwargs['_return_http_data_only'] = True
        return self.get_filtered_satellite_passes_with_http_info(**kwargs)  # noqa: E501

    def get_filtered_satellite_passes_with_http_info(self, **kwargs):  # noqa: E501
        """Get Filtered Satellite Passes  # noqa: E501

        This method returns a filtered list of Satellite Passes. Satellite Passes could be filtered by Satellite, Ground Station and Status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_filtered_satellite_passes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get Satellite Passes
        :type satellite_id: str
        :param ground_station: Specifies the Ground Station(s) of the Satellite Passes to get.
        :type ground_station: list[str]
        :param status: Specifies the Status (or part of the Status) of the Satellite Passes to get
        :type status: str
        :param from_time: Filter to only return entries that were received after the specified time (inclusive)
        :type from_time: int
        :param to_time: Filter to only return entries that were received before the specified time (exclusive)
        :type to_time: int
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SatellitePassesResultPage, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'satellite_id',
            'ground_station',
            'status',
            'from_time',
            'to_time',
            'last_evaluated_item',
            'page_size_limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filtered_satellite_passes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'satellite_id' in local_var_params and local_var_params['satellite_id'] is not None:  # noqa: E501
            query_params.append(('satelliteId', local_var_params['satellite_id']))  # noqa: E501
        if 'ground_station' in local_var_params and local_var_params['ground_station'] is not None:  # noqa: E501
            query_params.append(('groundStation', local_var_params['ground_station']))  # noqa: E501
            collection_formats['groundStation'] = 'multi'  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'from_time' in local_var_params and local_var_params['from_time'] is not None:  # noqa: E501
            query_params.append(('fromTime', local_var_params['from_time']))  # noqa: E501
        if 'to_time' in local_var_params and local_var_params['to_time'] is not None:  # noqa: E501
            query_params.append(('toTime', local_var_params['to_time']))  # noqa: E501
        if 'last_evaluated_item' in local_var_params and local_var_params['last_evaluated_item'] is not None:  # noqa: E501
            query_params.append(('lastEvaluatedItem', local_var_params['last_evaluated_item']))  # noqa: E501
        if 'page_size_limit' in local_var_params and local_var_params['page_size_limit'] is not None:  # noqa: E501
            query_params.append(('pageSizeLimit', local_var_params['page_size_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            200: "SatellitePassesResultPage",
        }

        return self.api_client.call_api(
            '/satellite-passes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_satellite_pass_by_id(self, satellite_pass_id, **kwargs):  # noqa: E501
        """Get a Satellite Pass by ID  # noqa: E501

        This method returns a pass by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_satellite_pass_by_id(satellite_pass_id, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to get (required)
        :type satellite_pass_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SatellitePass
        """
        kwargs['_return_http_data_only'] = True
        return self.get_satellite_pass_by_id_with_http_info(satellite_pass_id, **kwargs)  # noqa: E501

    def get_satellite_pass_by_id_with_http_info(self, satellite_pass_id, **kwargs):  # noqa: E501
        """Get a Satellite Pass by ID  # noqa: E501

        This method returns a pass by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_satellite_pass_by_id_with_http_info(satellite_pass_id, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to get (required)
        :type satellite_pass_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SatellitePass, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'satellite_pass_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_satellite_pass_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'satellite_pass_id' is set
        if self.api_client.client_side_validation and ('satellite_pass_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_pass_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_pass_id` when calling `get_satellite_pass_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'satellite_pass_id' in local_var_params:
            path_params['satellitePassId'] = local_var_params['satellite_pass_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            200: "SatellitePass",
            403: "ErrorResponse",
            404: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/satellite-passes/{satellitePassId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def record_satellite_pass_artifact(self, satellite_pass_id, artifact_type, payload, **kwargs):  # noqa: E501
        """Record a Satellite Pass Artifact  # noqa: E501

        This method records artifacts of the satellite pass  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.record_satellite_pass_artifact(satellite_pass_id, artifact_type, payload, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to update (required)
        :type satellite_pass_id: str
        :param artifact_type: Specifies the artifact type of the Satellite Passes to upload (required)
        :type artifact_type: ArtifactType
        :param payload: (required)
        :type payload: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.record_satellite_pass_artifact_with_http_info(satellite_pass_id, artifact_type, payload, **kwargs)  # noqa: E501

    def record_satellite_pass_artifact_with_http_info(self, satellite_pass_id, artifact_type, payload, **kwargs):  # noqa: E501
        """Record a Satellite Pass Artifact  # noqa: E501

        This method records artifacts of the satellite pass  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.record_satellite_pass_artifact_with_http_info(satellite_pass_id, artifact_type, payload, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to update (required)
        :type satellite_pass_id: str
        :param artifact_type: Specifies the artifact type of the Satellite Passes to upload (required)
        :type artifact_type: ArtifactType
        :param payload: (required)
        :type payload: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'satellite_pass_id',
            'artifact_type',
            'payload'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method record_satellite_pass_artifact" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'satellite_pass_id' is set
        if self.api_client.client_side_validation and ('satellite_pass_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_pass_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_pass_id` when calling `record_satellite_pass_artifact`")  # noqa: E501
        # verify the required parameter 'artifact_type' is set
        if self.api_client.client_side_validation and ('artifact_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['artifact_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `artifact_type` when calling `record_satellite_pass_artifact`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in local_var_params or  # noqa: E501
                                                        local_var_params['payload'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payload` when calling `record_satellite_pass_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'satellite_pass_id' in local_var_params:
            path_params['satellitePassId'] = local_var_params['satellite_pass_id']  # noqa: E501
        if 'artifact_type' in local_var_params:
            path_params['artifactType'] = local_var_params['artifact_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payload' in local_var_params:
            local_var_files['payload'] = local_var_params['payload']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/satellite-passes/{satellitePassId}/artifacts/{artifactType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def record_satellite_pass_log(self, satellite_pass_id, payload, **kwargs):  # noqa: E501
        """Record a Satellite Pass Log  # noqa: E501

        This method records a log of the satellite pass  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.record_satellite_pass_log(satellite_pass_id, payload, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to update (required)
        :type satellite_pass_id: str
        :param payload: (required)
        :type payload: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.record_satellite_pass_log_with_http_info(satellite_pass_id, payload, **kwargs)  # noqa: E501

    def record_satellite_pass_log_with_http_info(self, satellite_pass_id, payload, **kwargs):  # noqa: E501
        """Record a Satellite Pass Log  # noqa: E501

        This method records a log of the satellite pass  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.record_satellite_pass_log_with_http_info(satellite_pass_id, payload, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to update (required)
        :type satellite_pass_id: str
        :param payload: (required)
        :type payload: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'satellite_pass_id',
            'payload'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method record_satellite_pass_log" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'satellite_pass_id' is set
        if self.api_client.client_side_validation and ('satellite_pass_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_pass_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_pass_id` when calling `record_satellite_pass_log`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in local_var_params or  # noqa: E501
                                                        local_var_params['payload'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payload` when calling `record_satellite_pass_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'satellite_pass_id' in local_var_params:
            path_params['satellitePassId'] = local_var_params['satellite_pass_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payload' in local_var_params:
            local_var_files['payload'] = local_var_params['payload']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/satellite-passes/{satellitePassId}/log', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_satellite_pass_by_id(self, satellite_pass_id, satellite_pass, **kwargs):  # noqa: E501
        """Update a Satellite Pass  # noqa: E501

        This method updates a satellite pass by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_satellite_pass_by_id(satellite_pass_id, satellite_pass, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to update (required)
        :type satellite_pass_id: str
        :param satellite_pass: (required)
        :type satellite_pass: SatellitePass
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.update_satellite_pass_by_id_with_http_info(satellite_pass_id, satellite_pass, **kwargs)  # noqa: E501

    def update_satellite_pass_by_id_with_http_info(self, satellite_pass_id, satellite_pass, **kwargs):  # noqa: E501
        """Update a Satellite Pass  # noqa: E501

        This method updates a satellite pass by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_satellite_pass_by_id_with_http_info(satellite_pass_id, satellite_pass, async_req=True)
        >>> result = thread.get()

        :param satellite_pass_id: ID of the Satellite Pass to update (required)
        :type satellite_pass_id: str
        :param satellite_pass: (required)
        :type satellite_pass: SatellitePass
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'satellite_pass_id',
            'satellite_pass'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_satellite_pass_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'satellite_pass_id' is set
        if self.api_client.client_side_validation and ('satellite_pass_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_pass_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_pass_id` when calling `update_satellite_pass_by_id`")  # noqa: E501
        # verify the required parameter 'satellite_pass' is set
        if self.api_client.client_side_validation and ('satellite_pass' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_pass'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_pass` when calling `update_satellite_pass_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'satellite_pass_id' in local_var_params:
            path_params['satellitePassId'] = local_var_params['satellite_pass_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'satellite_pass' in local_var_params:
            body_params = local_var_params['satellite_pass']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/satellite-passes/{satellitePassId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
