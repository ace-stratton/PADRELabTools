# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class ScaledCollisionProbability(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'primary_factor': 'float',
        'secondary_factor': 'float',
        'probability_of_collision': 'float'
    }

    attribute_map = {
        'primary_factor': 'primaryFactor',
        'secondary_factor': 'secondaryFactor',
        'probability_of_collision': 'probabilityOfCollision'
    }

    def __init__(self, primary_factor=None, secondary_factor=None, probability_of_collision=None, local_vars_configuration=None):  # noqa: E501
        """ScaledCollisionProbability - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._primary_factor = None
        self._secondary_factor = None
        self._probability_of_collision = None
        self.discriminator = None

        if primary_factor is not None:
            self.primary_factor = primary_factor
        if secondary_factor is not None:
            self.secondary_factor = secondary_factor
        if probability_of_collision is not None:
            self.probability_of_collision = probability_of_collision

    @property
    def primary_factor(self):
        """Gets the primary_factor of this ScaledCollisionProbability.  # noqa: E501


        :return: The primary_factor of this ScaledCollisionProbability.  # noqa: E501
        :rtype: float
        """
        return self._primary_factor

    @primary_factor.setter
    def primary_factor(self, primary_factor):
        """Sets the primary_factor of this ScaledCollisionProbability.


        :param primary_factor: The primary_factor of this ScaledCollisionProbability.  # noqa: E501
        :type primary_factor: float
        """

        self._primary_factor = primary_factor

    @property
    def secondary_factor(self):
        """Gets the secondary_factor of this ScaledCollisionProbability.  # noqa: E501


        :return: The secondary_factor of this ScaledCollisionProbability.  # noqa: E501
        :rtype: float
        """
        return self._secondary_factor

    @secondary_factor.setter
    def secondary_factor(self, secondary_factor):
        """Sets the secondary_factor of this ScaledCollisionProbability.


        :param secondary_factor: The secondary_factor of this ScaledCollisionProbability.  # noqa: E501
        :type secondary_factor: float
        """

        self._secondary_factor = secondary_factor

    @property
    def probability_of_collision(self):
        """Gets the probability_of_collision of this ScaledCollisionProbability.  # noqa: E501


        :return: The probability_of_collision of this ScaledCollisionProbability.  # noqa: E501
        :rtype: float
        """
        return self._probability_of_collision

    @probability_of_collision.setter
    def probability_of_collision(self, probability_of_collision):
        """Sets the probability_of_collision of this ScaledCollisionProbability.


        :param probability_of_collision: The probability_of_collision of this ScaledCollisionProbability.  # noqa: E501
        :type probability_of_collision: float
        """

        self._probability_of_collision = probability_of_collision

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScaledCollisionProbability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScaledCollisionProbability):
            return True

        return self.to_dict() != other.to_dict()
