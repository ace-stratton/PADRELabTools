# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class CommandConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mac_interface_id': 'int',
        'target_address': 'int',
        'priority': 'int',
        'timeout': 'int',
        'command_bytes': 'str'
    }

    attribute_map = {
        'mac_interface_id': 'macInterfaceID',
        'target_address': 'targetAddress',
        'priority': 'priority',
        'timeout': 'timeout',
        'command_bytes': 'commandBytes'
    }

    def __init__(self, mac_interface_id=None, target_address=None, priority=None, timeout=None, command_bytes=None, local_vars_configuration=None):  # noqa: E501
        """CommandConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._mac_interface_id = None
        self._target_address = None
        self._priority = None
        self._timeout = None
        self._command_bytes = None
        self.discriminator = None

        self.mac_interface_id = mac_interface_id
        self.target_address = target_address
        self.priority = priority
        self.timeout = timeout
        self.command_bytes = command_bytes

    @property
    def mac_interface_id(self):
        """Gets the mac_interface_id of this CommandConfig.  # noqa: E501

        macInterfaceID of the telecommand  # noqa: E501

        :return: The mac_interface_id of this CommandConfig.  # noqa: E501
        :rtype: int
        """
        return self._mac_interface_id

    @mac_interface_id.setter
    def mac_interface_id(self, mac_interface_id):
        """Sets the mac_interface_id of this CommandConfig.

        macInterfaceID of the telecommand  # noqa: E501

        :param mac_interface_id: The mac_interface_id of this CommandConfig.  # noqa: E501
        :type mac_interface_id: int
        """
        if self.local_vars_configuration.client_side_validation and mac_interface_id is None:  # noqa: E501
            raise ValueError("Invalid value for `mac_interface_id`, must not be `None`")  # noqa: E501

        self._mac_interface_id = mac_interface_id

    @property
    def target_address(self):
        """Gets the target_address of this CommandConfig.  # noqa: E501

        targetAddress of the telecommand  # noqa: E501

        :return: The target_address of this CommandConfig.  # noqa: E501
        :rtype: int
        """
        return self._target_address

    @target_address.setter
    def target_address(self, target_address):
        """Sets the target_address of this CommandConfig.

        targetAddress of the telecommand  # noqa: E501

        :param target_address: The target_address of this CommandConfig.  # noqa: E501
        :type target_address: int
        """
        if self.local_vars_configuration.client_side_validation and target_address is None:  # noqa: E501
            raise ValueError("Invalid value for `target_address`, must not be `None`")  # noqa: E501

        self._target_address = target_address

    @property
    def priority(self):
        """Gets the priority of this CommandConfig.  # noqa: E501

        priority of the telecommand  # noqa: E501

        :return: The priority of this CommandConfig.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CommandConfig.

        priority of the telecommand  # noqa: E501

        :param priority: The priority of this CommandConfig.  # noqa: E501
        :type priority: int
        """
        if self.local_vars_configuration.client_side_validation and priority is None:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def timeout(self):
        """Gets the timeout of this CommandConfig.  # noqa: E501

        timeout of the telecommand  # noqa: E501

        :return: The timeout of this CommandConfig.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this CommandConfig.

        timeout of the telecommand  # noqa: E501

        :param timeout: The timeout of this CommandConfig.  # noqa: E501
        :type timeout: int
        """
        if self.local_vars_configuration.client_side_validation and timeout is None:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must not be `None`")  # noqa: E501

        self._timeout = timeout

    @property
    def command_bytes(self):
        """Gets the command_bytes of this CommandConfig.  # noqa: E501

        commandBytes of the telecommand  # noqa: E501

        :return: The command_bytes of this CommandConfig.  # noqa: E501
        :rtype: str
        """
        return self._command_bytes

    @command_bytes.setter
    def command_bytes(self, command_bytes):
        """Sets the command_bytes of this CommandConfig.

        commandBytes of the telecommand  # noqa: E501

        :param command_bytes: The command_bytes of this CommandConfig.  # noqa: E501
        :type command_bytes: str
        """
        if self.local_vars_configuration.client_side_validation and command_bytes is None:  # noqa: E501
            raise ValueError("Invalid value for `command_bytes`, must not be `None`")  # noqa: E501

        self._command_bytes = command_bytes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommandConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommandConfig):
            return True

        return self.to_dict() != other.to_dict()
