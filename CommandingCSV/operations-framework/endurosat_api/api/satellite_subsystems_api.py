# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from endurosat_api.api_client import ApiClient
from endurosat_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SatelliteSubsystemsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_satellite_subsystem(self, satellite_subsystem, **kwargs):  # noqa: E501
        """Create a Satellite Subsystem  # noqa: E501

        This method creates a new Satellite Subsystem for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_satellite_subsystem(satellite_subsystem, async_req=True)
        >>> result = thread.get()

        :param satellite_subsystem: (required)
        :type satellite_subsystem: SatelliteSubsystem
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.create_satellite_subsystem_with_http_info(satellite_subsystem, **kwargs)  # noqa: E501

    def create_satellite_subsystem_with_http_info(self, satellite_subsystem, **kwargs):  # noqa: E501
        """Create a Satellite Subsystem  # noqa: E501

        This method creates a new Satellite Subsystem for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_satellite_subsystem_with_http_info(satellite_subsystem, async_req=True)
        >>> result = thread.get()

        :param satellite_subsystem: (required)
        :type satellite_subsystem: SatelliteSubsystem
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'satellite_subsystem'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_satellite_subsystem" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'satellite_subsystem' is set
        if self.api_client.client_side_validation and ('satellite_subsystem' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_subsystem'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_subsystem` when calling `create_satellite_subsystem`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'satellite_subsystem' in local_var_params:
            body_params = local_var_params['satellite_subsystem']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/satellite-subsystems', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_satellite_subsystem_by_id(self, satellite_subsystem_id, **kwargs):  # noqa: E501
        """Delete a Satellite Subsystem  # noqa: E501

        This method deletes a Satellite Subsystem by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_satellite_subsystem_by_id(satellite_subsystem_id, async_req=True)
        >>> result = thread.get()

        :param satellite_subsystem_id: ID of the Satellite Subsystem to delete (required)
        :type satellite_subsystem_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_satellite_subsystem_by_id_with_http_info(satellite_subsystem_id, **kwargs)  # noqa: E501

    def delete_satellite_subsystem_by_id_with_http_info(self, satellite_subsystem_id, **kwargs):  # noqa: E501
        """Delete a Satellite Subsystem  # noqa: E501

        This method deletes a Satellite Subsystem by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_satellite_subsystem_by_id_with_http_info(satellite_subsystem_id, async_req=True)
        >>> result = thread.get()

        :param satellite_subsystem_id: ID of the Satellite Subsystem to delete (required)
        :type satellite_subsystem_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'satellite_subsystem_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_satellite_subsystem_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'satellite_subsystem_id' is set
        if self.api_client.client_side_validation and ('satellite_subsystem_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_subsystem_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_subsystem_id` when calling `delete_satellite_subsystem_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'satellite_subsystem_id' in local_var_params:
            path_params['satelliteSubsystemId'] = local_var_params['satellite_subsystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/satellite-subsystems/{satelliteSubsystemId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_filtered_satellite_subsystems(self, **kwargs):  # noqa: E501
        """Get all Satellite Subsystems  # noqa: E501

        This method returns a filtered list of Satellite Subsystems. Satellite Subsystems could be filtered by Satellite, Name and Type. Maximum count of the returned items is 10000.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_filtered_satellite_subsystems(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the Satellite for which the Subsystems are applicable
        :type satellite_id: str
        :param name: Specifies the name (or part of the name) of the Subsystem
        :type name: str
        :param type: Specifies the type (or part of the type) of the Subsystem
        :type type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[SatelliteSubsystem]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_filtered_satellite_subsystems_with_http_info(**kwargs)  # noqa: E501

    def get_filtered_satellite_subsystems_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Satellite Subsystems  # noqa: E501

        This method returns a filtered list of Satellite Subsystems. Satellite Subsystems could be filtered by Satellite, Name and Type. Maximum count of the returned items is 10000.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_filtered_satellite_subsystems_with_http_info(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the Satellite for which the Subsystems are applicable
        :type satellite_id: str
        :param name: Specifies the name (or part of the name) of the Subsystem
        :type name: str
        :param type: Specifies the type (or part of the type) of the Subsystem
        :type type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[SatelliteSubsystem], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'satellite_id',
            'name',
            'type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filtered_satellite_subsystems" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'satellite_id' in local_var_params and local_var_params['satellite_id'] is not None:  # noqa: E501
            query_params.append(('satelliteId', local_var_params['satellite_id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            200: "list[SatelliteSubsystem]",
        }

        return self.api_client.call_api(
            '/satellite-subsystems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_satellite_subsystem_by_id(self, satellite_subsystem_id, **kwargs):  # noqa: E501
        """Get a Satellite Subsystem by ID  # noqa: E501

        This method returns a Satellite Subsystem by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_satellite_subsystem_by_id(satellite_subsystem_id, async_req=True)
        >>> result = thread.get()

        :param satellite_subsystem_id: ID of the Satellite Subsystem to get (required)
        :type satellite_subsystem_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SatelliteSubsystem
        """
        kwargs['_return_http_data_only'] = True
        return self.get_satellite_subsystem_by_id_with_http_info(satellite_subsystem_id, **kwargs)  # noqa: E501

    def get_satellite_subsystem_by_id_with_http_info(self, satellite_subsystem_id, **kwargs):  # noqa: E501
        """Get a Satellite Subsystem by ID  # noqa: E501

        This method returns a Satellite Subsystem by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_satellite_subsystem_by_id_with_http_info(satellite_subsystem_id, async_req=True)
        >>> result = thread.get()

        :param satellite_subsystem_id: ID of the Satellite Subsystem to get (required)
        :type satellite_subsystem_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SatelliteSubsystem, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'satellite_subsystem_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_satellite_subsystem_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'satellite_subsystem_id' is set
        if self.api_client.client_side_validation and ('satellite_subsystem_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_subsystem_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_subsystem_id` when calling `get_satellite_subsystem_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'satellite_subsystem_id' in local_var_params:
            path_params['satelliteSubsystemId'] = local_var_params['satellite_subsystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            200: "SatelliteSubsystem",
        }

        return self.api_client.call_api(
            '/satellite-subsystems/{satelliteSubsystemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_satellite_subsystem_by_id(self, satellite_subsystem_id, satellite_subsystem, **kwargs):  # noqa: E501
        """Update a Satellite Subsystem  # noqa: E501

        This method updates a Satellite Subsystem by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_satellite_subsystem_by_id(satellite_subsystem_id, satellite_subsystem, async_req=True)
        >>> result = thread.get()

        :param satellite_subsystem_id: ID of the Satellite Subsystem to update (required)
        :type satellite_subsystem_id: str
        :param satellite_subsystem: (required)
        :type satellite_subsystem: SatelliteSubsystem
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.update_satellite_subsystem_by_id_with_http_info(satellite_subsystem_id, satellite_subsystem, **kwargs)  # noqa: E501

    def update_satellite_subsystem_by_id_with_http_info(self, satellite_subsystem_id, satellite_subsystem, **kwargs):  # noqa: E501
        """Update a Satellite Subsystem  # noqa: E501

        This method updates a Satellite Subsystem by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_satellite_subsystem_by_id_with_http_info(satellite_subsystem_id, satellite_subsystem, async_req=True)
        >>> result = thread.get()

        :param satellite_subsystem_id: ID of the Satellite Subsystem to update (required)
        :type satellite_subsystem_id: str
        :param satellite_subsystem: (required)
        :type satellite_subsystem: SatelliteSubsystem
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'satellite_subsystem_id',
            'satellite_subsystem'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_satellite_subsystem_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'satellite_subsystem_id' is set
        if self.api_client.client_side_validation and ('satellite_subsystem_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_subsystem_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_subsystem_id` when calling `update_satellite_subsystem_by_id`")  # noqa: E501
        # verify the required parameter 'satellite_subsystem' is set
        if self.api_client.client_side_validation and ('satellite_subsystem' not in local_var_params or  # noqa: E501
                                                        local_var_params['satellite_subsystem'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `satellite_subsystem` when calling `update_satellite_subsystem_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'satellite_subsystem_id' in local_var_params:
            path_params['satelliteSubsystemId'] = local_var_params['satellite_subsystem_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'satellite_subsystem' in local_var_params:
            body_params = local_var_params['satellite_subsystem']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/satellite-subsystems/{satelliteSubsystemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
