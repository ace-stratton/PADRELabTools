# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class Telecommand(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'file_upload_start': 'int',
        'has_file': 'bool',
        'mission_database': 'str',
        'name': 'str',
        'raw_data': 'str',
        'data': 'object',
        'priority': 'int',
        'satellite': 'str',
        'satellite_subsystem': 'str',
        'requested_satellite_pass': 'str',
        'executed_satellite_pass': 'str',
        'status': 'str',
        'has_payload_file': 'bool',
        'expect_telemetry_response': 'bool',
        'telemetry_response': 'str',
        'max_tries': 'int',
        'continue_on_fail': 'bool',
        'execution_rules': 'TelecommandGroundExecutionRules',
        'satellite_execution_rule': 'TelecommandSatelliteExecutionRule',
        'executed_at_timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'file_upload_start': 'fileUploadStart',
        'has_file': 'hasFile',
        'mission_database': 'missionDatabase',
        'name': 'name',
        'raw_data': 'rawData',
        'data': 'data',
        'priority': 'priority',
        'satellite': 'satellite',
        'satellite_subsystem': 'satelliteSubsystem',
        'requested_satellite_pass': 'requestedSatellitePass',
        'executed_satellite_pass': 'executedSatellitePass',
        'status': 'status',
        'has_payload_file': 'hasPayloadFile',
        'expect_telemetry_response': 'expectTelemetryResponse',
        'telemetry_response': 'telemetryResponse',
        'max_tries': 'maxTries',
        'continue_on_fail': 'continueOnFail',
        'execution_rules': 'executionRules',
        'satellite_execution_rule': 'satelliteExecutionRule',
        'executed_at_timestamp': 'executedAtTimestamp'
    }

    def __init__(self, id=None, file_upload_start=None, has_file=None, mission_database=None, name=None, raw_data=None, data=None, priority=None, satellite=None, satellite_subsystem=None, requested_satellite_pass=None, executed_satellite_pass=None, status=None, has_payload_file=None, expect_telemetry_response=None, telemetry_response=None, max_tries=None, continue_on_fail=None, execution_rules=None, satellite_execution_rule=None, executed_at_timestamp=None, local_vars_configuration=None):  # noqa: E501
        """Telecommand - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._file_upload_start = None
        self._has_file = None
        self._mission_database = None
        self._name = None
        self._raw_data = None
        self._data = None
        self._priority = None
        self._satellite = None
        self._satellite_subsystem = None
        self._requested_satellite_pass = None
        self._executed_satellite_pass = None
        self._status = None
        self._has_payload_file = None
        self._expect_telemetry_response = None
        self._telemetry_response = None
        self._max_tries = None
        self._continue_on_fail = None
        self._execution_rules = None
        self._satellite_execution_rule = None
        self._executed_at_timestamp = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if file_upload_start is not None:
            self.file_upload_start = file_upload_start
        if has_file is not None:
            self.has_file = has_file
        if mission_database is not None:
            self.mission_database = mission_database
        self.name = name
        if raw_data is not None:
            self.raw_data = raw_data
        if data is not None:
            self.data = data
        if priority is not None:
            self.priority = priority
        self.satellite = satellite
        if satellite_subsystem is not None:
            self.satellite_subsystem = satellite_subsystem
        if requested_satellite_pass is not None:
            self.requested_satellite_pass = requested_satellite_pass
        if executed_satellite_pass is not None:
            self.executed_satellite_pass = executed_satellite_pass
        if status is not None:
            self.status = status
        if has_payload_file is not None:
            self.has_payload_file = has_payload_file
        if expect_telemetry_response is not None:
            self.expect_telemetry_response = expect_telemetry_response
        if telemetry_response is not None:
            self.telemetry_response = telemetry_response
        if max_tries is not None:
            self.max_tries = max_tries
        if continue_on_fail is not None:
            self.continue_on_fail = continue_on_fail
        if execution_rules is not None:
            self.execution_rules = execution_rules
        if satellite_execution_rule is not None:
            self.satellite_execution_rule = satellite_execution_rule
        if executed_at_timestamp is not None:
            self.executed_at_timestamp = executed_at_timestamp

    @property
    def id(self):
        """Gets the id of this Telecommand.  # noqa: E501

        Object ID  # noqa: E501

        :return: The id of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Telecommand.

        Object ID  # noqa: E501

        :param id: The id of this Telecommand.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def file_upload_start(self):
        """Gets the file_upload_start of this Telecommand.  # noqa: E501

        Start time of multipart upload in progress  # noqa: E501

        :return: The file_upload_start of this Telecommand.  # noqa: E501
        :rtype: int
        """
        return self._file_upload_start

    @file_upload_start.setter
    def file_upload_start(self, file_upload_start):
        """Sets the file_upload_start of this Telecommand.

        Start time of multipart upload in progress  # noqa: E501

        :param file_upload_start: The file_upload_start of this Telecommand.  # noqa: E501
        :type file_upload_start: int
        """

        self._file_upload_start = file_upload_start

    @property
    def has_file(self):
        """Gets the has_file of this Telecommand.  # noqa: E501

        Specifies if this resource has an uploaded payload file  # noqa: E501

        :return: The has_file of this Telecommand.  # noqa: E501
        :rtype: bool
        """
        return self._has_file

    @has_file.setter
    def has_file(self, has_file):
        """Sets the has_file of this Telecommand.

        Specifies if this resource has an uploaded payload file  # noqa: E501

        :param has_file: The has_file of this Telecommand.  # noqa: E501
        :type has_file: bool
        """

        self._has_file = has_file

    @property
    def mission_database(self):
        """Gets the mission_database of this Telecommand.  # noqa: E501

        ID of the Mission Database where this type of telecommand is defined  # noqa: E501

        :return: The mission_database of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._mission_database

    @mission_database.setter
    def mission_database(self, mission_database):
        """Sets the mission_database of this Telecommand.

        ID of the Mission Database where this type of telecommand is defined  # noqa: E501

        :param mission_database: The mission_database of this Telecommand.  # noqa: E501
        :type mission_database: str
        """

        self._mission_database = mission_database

    @property
    def name(self):
        """Gets the name of this Telecommand.  # noqa: E501

        Human friendly name of the Satellite Telecommand  # noqa: E501

        :return: The name of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Telecommand.

        Human friendly name of the Satellite Telecommand  # noqa: E501

        :param name: The name of this Telecommand.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def raw_data(self):
        """Gets the raw_data of this Telecommand.  # noqa: E501

        Base64 encoded value of the Telecommand's raw byte stream  # noqa: E501

        :return: The raw_data of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._raw_data

    @raw_data.setter
    def raw_data(self, raw_data):
        """Sets the raw_data of this Telecommand.

        Base64 encoded value of the Telecommand's raw byte stream  # noqa: E501

        :param raw_data: The raw_data of this Telecommand.  # noqa: E501
        :type raw_data: str
        """

        self._raw_data = raw_data

    @property
    def data(self):
        """Gets the data of this Telecommand.  # noqa: E501

        A JSON String representation of the telecommand before binary encoding  # noqa: E501

        :return: The data of this Telecommand.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Telecommand.

        A JSON String representation of the telecommand before binary encoding  # noqa: E501

        :param data: The data of this Telecommand.  # noqa: E501
        :type data: object
        """

        self._data = data

    @property
    def priority(self):
        """Gets the priority of this Telecommand.  # noqa: E501

        Command priority  # noqa: E501

        :return: The priority of this Telecommand.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Telecommand.

        Command priority  # noqa: E501

        :param priority: The priority of this Telecommand.  # noqa: E501
        :type priority: int
        """

        self._priority = priority

    @property
    def satellite(self):
        """Gets the satellite of this Telecommand.  # noqa: E501

        ID of the Satellite for which the Telecommand is issued.  # noqa: E501

        :return: The satellite of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._satellite

    @satellite.setter
    def satellite(self, satellite):
        """Sets the satellite of this Telecommand.

        ID of the Satellite for which the Telecommand is issued.  # noqa: E501

        :param satellite: The satellite of this Telecommand.  # noqa: E501
        :type satellite: str
        """
        if self.local_vars_configuration.client_side_validation and satellite is None:  # noqa: E501
            raise ValueError("Invalid value for `satellite`, must not be `None`")  # noqa: E501

        self._satellite = satellite

    @property
    def satellite_subsystem(self):
        """Gets the satellite_subsystem of this Telecommand.  # noqa: E501

        ID of the Satellite Subsystem for which the Telecommand is issued.  # noqa: E501

        :return: The satellite_subsystem of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._satellite_subsystem

    @satellite_subsystem.setter
    def satellite_subsystem(self, satellite_subsystem):
        """Sets the satellite_subsystem of this Telecommand.

        ID of the Satellite Subsystem for which the Telecommand is issued.  # noqa: E501

        :param satellite_subsystem: The satellite_subsystem of this Telecommand.  # noqa: E501
        :type satellite_subsystem: str
        """

        self._satellite_subsystem = satellite_subsystem

    @property
    def requested_satellite_pass(self):
        """Gets the requested_satellite_pass of this Telecommand.  # noqa: E501

        ID of the Satellite Pass for which the Telecommand is scheduled. If null - Telecommand will be executed when possible  # noqa: E501

        :return: The requested_satellite_pass of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._requested_satellite_pass

    @requested_satellite_pass.setter
    def requested_satellite_pass(self, requested_satellite_pass):
        """Sets the requested_satellite_pass of this Telecommand.

        ID of the Satellite Pass for which the Telecommand is scheduled. If null - Telecommand will be executed when possible  # noqa: E501

        :param requested_satellite_pass: The requested_satellite_pass of this Telecommand.  # noqa: E501
        :type requested_satellite_pass: str
        """

        self._requested_satellite_pass = requested_satellite_pass

    @property
    def executed_satellite_pass(self):
        """Gets the executed_satellite_pass of this Telecommand.  # noqa: E501

        ID of the Satellite Pass during which the Telecommand was sent.  # noqa: E501

        :return: The executed_satellite_pass of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._executed_satellite_pass

    @executed_satellite_pass.setter
    def executed_satellite_pass(self, executed_satellite_pass):
        """Sets the executed_satellite_pass of this Telecommand.

        ID of the Satellite Pass during which the Telecommand was sent.  # noqa: E501

        :param executed_satellite_pass: The executed_satellite_pass of this Telecommand.  # noqa: E501
        :type executed_satellite_pass: str
        """

        self._executed_satellite_pass = executed_satellite_pass

    @property
    def status(self):
        """Gets the status of this Telecommand.  # noqa: E501

        Current status of the Telecommand  # noqa: E501

        :return: The status of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Telecommand.

        Current status of the Telecommand  # noqa: E501

        :param status: The status of this Telecommand.  # noqa: E501
        :type status: str
        """
        allowed_values = ["DRAFT", "SCHEDULED", "REQUESTED", "TESTED", "SENDING", "SENT", "FAILED_TO_SEND", "RECEIVED", "EXECUTING", "SUCCESSFUL", "FAILED", "CANCELED", "TEMPLATE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def has_payload_file(self):
        """Gets the has_payload_file of this Telecommand.  # noqa: E501

        Specifies if the telecommand has a payload file   # noqa: E501

        :return: The has_payload_file of this Telecommand.  # noqa: E501
        :rtype: bool
        """
        return self._has_payload_file

    @has_payload_file.setter
    def has_payload_file(self, has_payload_file):
        """Sets the has_payload_file of this Telecommand.

        Specifies if the telecommand has a payload file   # noqa: E501

        :param has_payload_file: The has_payload_file of this Telecommand.  # noqa: E501
        :type has_payload_file: bool
        """

        self._has_payload_file = has_payload_file

    @property
    def expect_telemetry_response(self):
        """Gets the expect_telemetry_response of this Telecommand.  # noqa: E501

        Specifies if a response is expected for this telecommand as a separate telemetry value  # noqa: E501

        :return: The expect_telemetry_response of this Telecommand.  # noqa: E501
        :rtype: bool
        """
        return self._expect_telemetry_response

    @expect_telemetry_response.setter
    def expect_telemetry_response(self, expect_telemetry_response):
        """Sets the expect_telemetry_response of this Telecommand.

        Specifies if a response is expected for this telecommand as a separate telemetry value  # noqa: E501

        :param expect_telemetry_response: The expect_telemetry_response of this Telecommand.  # noqa: E501
        :type expect_telemetry_response: bool
        """

        self._expect_telemetry_response = expect_telemetry_response

    @property
    def telemetry_response(self):
        """Gets the telemetry_response of this Telecommand.  # noqa: E501

        Specifies the telemetry entry that contains the response of this telecommand. Will be empty if expectTelemetryResponse is false or if expectTelemetryResponse is true but the response has not arrived yet  # noqa: E501

        :return: The telemetry_response of this Telecommand.  # noqa: E501
        :rtype: str
        """
        return self._telemetry_response

    @telemetry_response.setter
    def telemetry_response(self, telemetry_response):
        """Sets the telemetry_response of this Telecommand.

        Specifies the telemetry entry that contains the response of this telecommand. Will be empty if expectTelemetryResponse is false or if expectTelemetryResponse is true but the response has not arrived yet  # noqa: E501

        :param telemetry_response: The telemetry_response of this Telecommand.  # noqa: E501
        :type telemetry_response: str
        """

        self._telemetry_response = telemetry_response

    @property
    def max_tries(self):
        """Gets the max_tries of this Telecommand.  # noqa: E501

        Specifies the maximum number of execution attempts for the command before it is considered as failed.  # noqa: E501

        :return: The max_tries of this Telecommand.  # noqa: E501
        :rtype: int
        """
        return self._max_tries

    @max_tries.setter
    def max_tries(self, max_tries):
        """Sets the max_tries of this Telecommand.

        Specifies the maximum number of execution attempts for the command before it is considered as failed.  # noqa: E501

        :param max_tries: The max_tries of this Telecommand.  # noqa: E501
        :type max_tries: int
        """

        self._max_tries = max_tries

    @property
    def continue_on_fail(self):
        """Gets the continue_on_fail of this Telecommand.  # noqa: E501

        Specifies whether command execution should continue if thic command fails.  # noqa: E501

        :return: The continue_on_fail of this Telecommand.  # noqa: E501
        :rtype: bool
        """
        return self._continue_on_fail

    @continue_on_fail.setter
    def continue_on_fail(self, continue_on_fail):
        """Sets the continue_on_fail of this Telecommand.

        Specifies whether command execution should continue if thic command fails.  # noqa: E501

        :param continue_on_fail: The continue_on_fail of this Telecommand.  # noqa: E501
        :type continue_on_fail: bool
        """

        self._continue_on_fail = continue_on_fail

    @property
    def execution_rules(self):
        """Gets the execution_rules of this Telecommand.  # noqa: E501


        :return: The execution_rules of this Telecommand.  # noqa: E501
        :rtype: TelecommandGroundExecutionRules
        """
        return self._execution_rules

    @execution_rules.setter
    def execution_rules(self, execution_rules):
        """Sets the execution_rules of this Telecommand.


        :param execution_rules: The execution_rules of this Telecommand.  # noqa: E501
        :type execution_rules: TelecommandGroundExecutionRules
        """

        self._execution_rules = execution_rules

    @property
    def satellite_execution_rule(self):
        """Gets the satellite_execution_rule of this Telecommand.  # noqa: E501


        :return: The satellite_execution_rule of this Telecommand.  # noqa: E501
        :rtype: TelecommandSatelliteExecutionRule
        """
        return self._satellite_execution_rule

    @satellite_execution_rule.setter
    def satellite_execution_rule(self, satellite_execution_rule):
        """Sets the satellite_execution_rule of this Telecommand.


        :param satellite_execution_rule: The satellite_execution_rule of this Telecommand.  # noqa: E501
        :type satellite_execution_rule: TelecommandSatelliteExecutionRule
        """

        self._satellite_execution_rule = satellite_execution_rule

    @property
    def executed_at_timestamp(self):
        """Gets the executed_at_timestamp of this Telecommand.  # noqa: E501

        Time at which the Telecommand was executed by the Ground Station  # noqa: E501

        :return: The executed_at_timestamp of this Telecommand.  # noqa: E501
        :rtype: int
        """
        return self._executed_at_timestamp

    @executed_at_timestamp.setter
    def executed_at_timestamp(self, executed_at_timestamp):
        """Sets the executed_at_timestamp of this Telecommand.

        Time at which the Telecommand was executed by the Ground Station  # noqa: E501

        :param executed_at_timestamp: The executed_at_timestamp of this Telecommand.  # noqa: E501
        :type executed_at_timestamp: int
        """

        self._executed_at_timestamp = executed_at_timestamp

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Telecommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Telecommand):
            return True

        return self.to_dict() != other.to_dict()
