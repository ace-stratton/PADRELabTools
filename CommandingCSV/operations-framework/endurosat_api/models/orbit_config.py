# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class OrbitConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start_time': 'list[int]',
        'tp': 'int',
        'sma': 'int',
        'eccentricity': 'float',
        'inclination': 'float',
        'aop': 'float',
        'raan': 'float',
        'ltan': 'float',
        'separation_angle': 'float',
        'altitude_difference': 'float',
        'position_error_rtn': 'list[int]'
    }

    attribute_map = {
        'start_time': 'startTime',
        'tp': 'tp',
        'sma': 'sma',
        'eccentricity': 'eccentricity',
        'inclination': 'inclination',
        'aop': 'aop',
        'raan': 'raan',
        'ltan': 'ltan',
        'separation_angle': 'separationAngle',
        'altitude_difference': 'altitudeDifference',
        'position_error_rtn': 'positionErrorRTN'
    }

    def __init__(self, start_time=None, tp=None, sma=None, eccentricity=None, inclination=None, aop=None, raan=None, ltan=None, separation_angle=None, altitude_difference=None, position_error_rtn=None, local_vars_configuration=None):  # noqa: E501
        """OrbitConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._start_time = None
        self._tp = None
        self._sma = None
        self._eccentricity = None
        self._inclination = None
        self._aop = None
        self._raan = None
        self._ltan = None
        self._separation_angle = None
        self._altitude_difference = None
        self._position_error_rtn = None
        self.discriminator = None

        if start_time is not None:
            self.start_time = start_time
        if tp is not None:
            self.tp = tp
        if sma is not None:
            self.sma = sma
        if eccentricity is not None:
            self.eccentricity = eccentricity
        if inclination is not None:
            self.inclination = inclination
        if aop is not None:
            self.aop = aop
        if raan is not None:
            self.raan = raan
        if ltan is not None:
            self.ltan = ltan
        if separation_angle is not None:
            self.separation_angle = separation_angle
        if altitude_difference is not None:
            self.altitude_difference = altitude_difference
        if position_error_rtn is not None:
            self.position_error_rtn = position_error_rtn

    @property
    def start_time(self):
        """Gets the start_time of this OrbitConfig.  # noqa: E501

        Time and date of start simulation. Format: [Y, M, D, H, M, S]  # noqa: E501

        :return: The start_time of this OrbitConfig.  # noqa: E501
        :rtype: list[int]
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this OrbitConfig.

        Time and date of start simulation. Format: [Y, M, D, H, M, S]  # noqa: E501

        :param start_time: The start_time of this OrbitConfig.  # noqa: E501
        :type start_time: list[int]
        """

        self._start_time = start_time

    @property
    def tp(self):
        """Gets the tp of this OrbitConfig.  # noqa: E501

        Time since last perigee passage [s]  # noqa: E501

        :return: The tp of this OrbitConfig.  # noqa: E501
        :rtype: int
        """
        return self._tp

    @tp.setter
    def tp(self, tp):
        """Sets the tp of this OrbitConfig.

        Time since last perigee passage [s]  # noqa: E501

        :param tp: The tp of this OrbitConfig.  # noqa: E501
        :type tp: int
        """

        self._tp = tp

    @property
    def sma(self):
        """Gets the sma of this OrbitConfig.  # noqa: E501

        Satellite altitude [km]  # noqa: E501

        :return: The sma of this OrbitConfig.  # noqa: E501
        :rtype: int
        """
        return self._sma

    @sma.setter
    def sma(self, sma):
        """Sets the sma of this OrbitConfig.

        Satellite altitude [km]  # noqa: E501

        :param sma: The sma of this OrbitConfig.  # noqa: E501
        :type sma: int
        """

        self._sma = sma

    @property
    def eccentricity(self):
        """Gets the eccentricity of this OrbitConfig.  # noqa: E501

        Eccentricity  # noqa: E501

        :return: The eccentricity of this OrbitConfig.  # noqa: E501
        :rtype: float
        """
        return self._eccentricity

    @eccentricity.setter
    def eccentricity(self, eccentricity):
        """Sets the eccentricity of this OrbitConfig.

        Eccentricity  # noqa: E501

        :param eccentricity: The eccentricity of this OrbitConfig.  # noqa: E501
        :type eccentricity: float
        """

        self._eccentricity = eccentricity

    @property
    def inclination(self):
        """Gets the inclination of this OrbitConfig.  # noqa: E501

        Inclination [deg]  # noqa: E501

        :return: The inclination of this OrbitConfig.  # noqa: E501
        :rtype: float
        """
        return self._inclination

    @inclination.setter
    def inclination(self, inclination):
        """Sets the inclination of this OrbitConfig.

        Inclination [deg]  # noqa: E501

        :param inclination: The inclination of this OrbitConfig.  # noqa: E501
        :type inclination: float
        """

        self._inclination = inclination

    @property
    def aop(self):
        """Gets the aop of this OrbitConfig.  # noqa: E501

        Argument of Periapsis [deg]  # noqa: E501

        :return: The aop of this OrbitConfig.  # noqa: E501
        :rtype: float
        """
        return self._aop

    @aop.setter
    def aop(self, aop):
        """Sets the aop of this OrbitConfig.

        Argument of Periapsis [deg]  # noqa: E501

        :param aop: The aop of this OrbitConfig.  # noqa: E501
        :type aop: float
        """

        self._aop = aop

    @property
    def raan(self):
        """Gets the raan of this OrbitConfig.  # noqa: E501

        Right ascension of a.n. [deg]. (Either choose RAAN or LTAN input, if use one, set the other to null)  # noqa: E501

        :return: The raan of this OrbitConfig.  # noqa: E501
        :rtype: float
        """
        return self._raan

    @raan.setter
    def raan(self, raan):
        """Sets the raan of this OrbitConfig.

        Right ascension of a.n. [deg]. (Either choose RAAN or LTAN input, if use one, set the other to null)  # noqa: E501

        :param raan: The raan of this OrbitConfig.  # noqa: E501
        :type raan: float
        """

        self._raan = raan

    @property
    def ltan(self):
        """Gets the ltan of this OrbitConfig.  # noqa: E501

        Float (e.g. 13.5 = 13:30). (Either choose RAAN or LTAN input, if use one, set the other to null)  # noqa: E501

        :return: The ltan of this OrbitConfig.  # noqa: E501
        :rtype: float
        """
        return self._ltan

    @ltan.setter
    def ltan(self, ltan):
        """Sets the ltan of this OrbitConfig.

        Float (e.g. 13.5 = 13:30). (Either choose RAAN or LTAN input, if use one, set the other to null)  # noqa: E501

        :param ltan: The ltan of this OrbitConfig.  # noqa: E501
        :type ltan: float
        """

        self._ltan = ltan

    @property
    def separation_angle(self):
        """Gets the separation_angle of this OrbitConfig.  # noqa: E501

        True anomaly difference between two satellites if intersat pointing [deg]  # noqa: E501

        :return: The separation_angle of this OrbitConfig.  # noqa: E501
        :rtype: float
        """
        return self._separation_angle

    @separation_angle.setter
    def separation_angle(self, separation_angle):
        """Sets the separation_angle of this OrbitConfig.

        True anomaly difference between two satellites if intersat pointing [deg]  # noqa: E501

        :param separation_angle: The separation_angle of this OrbitConfig.  # noqa: E501
        :type separation_angle: float
        """

        self._separation_angle = separation_angle

    @property
    def altitude_difference(self):
        """Gets the altitude_difference of this OrbitConfig.  # noqa: E501

        Altitude difference between the two sats, negative difference means satellite 2 is lower [km]  # noqa: E501

        :return: The altitude_difference of this OrbitConfig.  # noqa: E501
        :rtype: float
        """
        return self._altitude_difference

    @altitude_difference.setter
    def altitude_difference(self, altitude_difference):
        """Sets the altitude_difference of this OrbitConfig.

        Altitude difference between the two sats, negative difference means satellite 2 is lower [km]  # noqa: E501

        :param altitude_difference: The altitude_difference of this OrbitConfig.  # noqa: E501
        :type altitude_difference: float
        """

        self._altitude_difference = altitude_difference

    @property
    def position_error_rtn(self):
        """Gets the position_error_rtn of this OrbitConfig.  # noqa: E501

        Position knowledge accuracy [Rmean, Rsigma, Tmean, Tsigma, Nmean, Nsigma] Radial Tangent Normal [14, 95, 1, 547, 4, 153] [m]  # noqa: E501

        :return: The position_error_rtn of this OrbitConfig.  # noqa: E501
        :rtype: list[int]
        """
        return self._position_error_rtn

    @position_error_rtn.setter
    def position_error_rtn(self, position_error_rtn):
        """Sets the position_error_rtn of this OrbitConfig.

        Position knowledge accuracy [Rmean, Rsigma, Tmean, Tsigma, Nmean, Nsigma] Radial Tangent Normal [14, 95, 1, 547, 4, 153] [m]  # noqa: E501

        :param position_error_rtn: The position_error_rtn of this OrbitConfig.  # noqa: E501
        :type position_error_rtn: list[int]
        """

        self._position_error_rtn = position_error_rtn

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrbitConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrbitConfig):
            return True

        return self.to_dict() != other.to_dict()
