# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class TelemetryEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'file_upload_start': 'int',
        'has_file': 'bool',
        'name': 'str',
        'mission_database': 'str',
        'raw_data': 'str',
        'data': 'object',
        'received_at_timestamp': 'int',
        'satellite_pass': 'str',
        'satellite': 'str',
        'satellite_subsystem': 'str',
        'has_payload_file': 'bool',
        'telecommand_request': 'str'
    }

    attribute_map = {
        'id': 'id',
        'file_upload_start': 'fileUploadStart',
        'has_file': 'hasFile',
        'name': 'name',
        'mission_database': 'missionDatabase',
        'raw_data': 'rawData',
        'data': 'data',
        'received_at_timestamp': 'receivedAtTimestamp',
        'satellite_pass': 'satellitePass',
        'satellite': 'satellite',
        'satellite_subsystem': 'satelliteSubsystem',
        'has_payload_file': 'hasPayloadFile',
        'telecommand_request': 'telecommandRequest'
    }

    def __init__(self, id=None, file_upload_start=None, has_file=None, name=None, mission_database=None, raw_data=None, data=None, received_at_timestamp=None, satellite_pass=None, satellite=None, satellite_subsystem=None, has_payload_file=None, telecommand_request=None, local_vars_configuration=None):  # noqa: E501
        """TelemetryEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._file_upload_start = None
        self._has_file = None
        self._name = None
        self._mission_database = None
        self._raw_data = None
        self._data = None
        self._received_at_timestamp = None
        self._satellite_pass = None
        self._satellite = None
        self._satellite_subsystem = None
        self._has_payload_file = None
        self._telecommand_request = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if file_upload_start is not None:
            self.file_upload_start = file_upload_start
        if has_file is not None:
            self.has_file = has_file
        if name is not None:
            self.name = name
        if mission_database is not None:
            self.mission_database = mission_database
        if raw_data is not None:
            self.raw_data = raw_data
        if data is not None:
            self.data = data
        self.received_at_timestamp = received_at_timestamp
        self.satellite_pass = satellite_pass
        self.satellite = satellite
        if satellite_subsystem is not None:
            self.satellite_subsystem = satellite_subsystem
        if has_payload_file is not None:
            self.has_payload_file = has_payload_file
        if telecommand_request is not None:
            self.telecommand_request = telecommand_request

    @property
    def id(self):
        """Gets the id of this TelemetryEntry.  # noqa: E501

        Object ID  # noqa: E501

        :return: The id of this TelemetryEntry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TelemetryEntry.

        Object ID  # noqa: E501

        :param id: The id of this TelemetryEntry.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def file_upload_start(self):
        """Gets the file_upload_start of this TelemetryEntry.  # noqa: E501

        Start time of multipart upload in progress  # noqa: E501

        :return: The file_upload_start of this TelemetryEntry.  # noqa: E501
        :rtype: int
        """
        return self._file_upload_start

    @file_upload_start.setter
    def file_upload_start(self, file_upload_start):
        """Sets the file_upload_start of this TelemetryEntry.

        Start time of multipart upload in progress  # noqa: E501

        :param file_upload_start: The file_upload_start of this TelemetryEntry.  # noqa: E501
        :type file_upload_start: int
        """

        self._file_upload_start = file_upload_start

    @property
    def has_file(self):
        """Gets the has_file of this TelemetryEntry.  # noqa: E501

        Specifies if this resource has an uploaded payload file  # noqa: E501

        :return: The has_file of this TelemetryEntry.  # noqa: E501
        :rtype: bool
        """
        return self._has_file

    @has_file.setter
    def has_file(self, has_file):
        """Sets the has_file of this TelemetryEntry.

        Specifies if this resource has an uploaded payload file  # noqa: E501

        :param has_file: The has_file of this TelemetryEntry.  # noqa: E501
        :type has_file: bool
        """

        self._has_file = has_file

    @property
    def name(self):
        """Gets the name of this TelemetryEntry.  # noqa: E501

        Human friendly name of the Telemetry Entry  # noqa: E501

        :return: The name of this TelemetryEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TelemetryEntry.

        Human friendly name of the Telemetry Entry  # noqa: E501

        :param name: The name of this TelemetryEntry.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def mission_database(self):
        """Gets the mission_database of this TelemetryEntry.  # noqa: E501

        ID of the Mission Database where this type of telemetry entry is defined  # noqa: E501

        :return: The mission_database of this TelemetryEntry.  # noqa: E501
        :rtype: str
        """
        return self._mission_database

    @mission_database.setter
    def mission_database(self, mission_database):
        """Sets the mission_database of this TelemetryEntry.

        ID of the Mission Database where this type of telemetry entry is defined  # noqa: E501

        :param mission_database: The mission_database of this TelemetryEntry.  # noqa: E501
        :type mission_database: str
        """

        self._mission_database = mission_database

    @property
    def raw_data(self):
        """Gets the raw_data of this TelemetryEntry.  # noqa: E501

        Base64 encoded value of the Telemetry Entry's raw byte stream if hasPayloadFile is false  # noqa: E501

        :return: The raw_data of this TelemetryEntry.  # noqa: E501
        :rtype: str
        """
        return self._raw_data

    @raw_data.setter
    def raw_data(self, raw_data):
        """Sets the raw_data of this TelemetryEntry.

        Base64 encoded value of the Telemetry Entry's raw byte stream if hasPayloadFile is false  # noqa: E501

        :param raw_data: The raw_data of this TelemetryEntry.  # noqa: E501
        :type raw_data: str
        """

        self._raw_data = raw_data

    @property
    def data(self):
        """Gets the data of this TelemetryEntry.  # noqa: E501

        Decoded (from the raw data) telemetry data represented as JSON String if hasPayloadFile is false  # noqa: E501

        :return: The data of this TelemetryEntry.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TelemetryEntry.

        Decoded (from the raw data) telemetry data represented as JSON String if hasPayloadFile is false  # noqa: E501

        :param data: The data of this TelemetryEntry.  # noqa: E501
        :type data: object
        """

        self._data = data

    @property
    def received_at_timestamp(self):
        """Gets the received_at_timestamp of this TelemetryEntry.  # noqa: E501

        Time at which the Telemetry Entry was received on the Ground Station  # noqa: E501

        :return: The received_at_timestamp of this TelemetryEntry.  # noqa: E501
        :rtype: int
        """
        return self._received_at_timestamp

    @received_at_timestamp.setter
    def received_at_timestamp(self, received_at_timestamp):
        """Sets the received_at_timestamp of this TelemetryEntry.

        Time at which the Telemetry Entry was received on the Ground Station  # noqa: E501

        :param received_at_timestamp: The received_at_timestamp of this TelemetryEntry.  # noqa: E501
        :type received_at_timestamp: int
        """
        if self.local_vars_configuration.client_side_validation and received_at_timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `received_at_timestamp`, must not be `None`")  # noqa: E501

        self._received_at_timestamp = received_at_timestamp

    @property
    def satellite_pass(self):
        """Gets the satellite_pass of this TelemetryEntry.  # noqa: E501

        ID of Satellite Pass during which the Telemetry Entry was recorded  # noqa: E501

        :return: The satellite_pass of this TelemetryEntry.  # noqa: E501
        :rtype: str
        """
        return self._satellite_pass

    @satellite_pass.setter
    def satellite_pass(self, satellite_pass):
        """Sets the satellite_pass of this TelemetryEntry.

        ID of Satellite Pass during which the Telemetry Entry was recorded  # noqa: E501

        :param satellite_pass: The satellite_pass of this TelemetryEntry.  # noqa: E501
        :type satellite_pass: str
        """
        if self.local_vars_configuration.client_side_validation and satellite_pass is None:  # noqa: E501
            raise ValueError("Invalid value for `satellite_pass`, must not be `None`")  # noqa: E501

        self._satellite_pass = satellite_pass

    @property
    def satellite(self):
        """Gets the satellite of this TelemetryEntry.  # noqa: E501

        ID of the Satellite from which the Telemetry Entry was recorded  # noqa: E501

        :return: The satellite of this TelemetryEntry.  # noqa: E501
        :rtype: str
        """
        return self._satellite

    @satellite.setter
    def satellite(self, satellite):
        """Sets the satellite of this TelemetryEntry.

        ID of the Satellite from which the Telemetry Entry was recorded  # noqa: E501

        :param satellite: The satellite of this TelemetryEntry.  # noqa: E501
        :type satellite: str
        """
        if self.local_vars_configuration.client_side_validation and satellite is None:  # noqa: E501
            raise ValueError("Invalid value for `satellite`, must not be `None`")  # noqa: E501

        self._satellite = satellite

    @property
    def satellite_subsystem(self):
        """Gets the satellite_subsystem of this TelemetryEntry.  # noqa: E501

        ID of the Satellite Subsystem from which the Telemetry Entry was recorded  # noqa: E501

        :return: The satellite_subsystem of this TelemetryEntry.  # noqa: E501
        :rtype: str
        """
        return self._satellite_subsystem

    @satellite_subsystem.setter
    def satellite_subsystem(self, satellite_subsystem):
        """Sets the satellite_subsystem of this TelemetryEntry.

        ID of the Satellite Subsystem from which the Telemetry Entry was recorded  # noqa: E501

        :param satellite_subsystem: The satellite_subsystem of this TelemetryEntry.  # noqa: E501
        :type satellite_subsystem: str
        """

        self._satellite_subsystem = satellite_subsystem

    @property
    def has_payload_file(self):
        """Gets the has_payload_file of this TelemetryEntry.  # noqa: E501

        Specifies if the telemetry value is a separate file (available for download from fileUrl) or contains the TM value in the same object  # noqa: E501

        :return: The has_payload_file of this TelemetryEntry.  # noqa: E501
        :rtype: bool
        """
        return self._has_payload_file

    @has_payload_file.setter
    def has_payload_file(self, has_payload_file):
        """Sets the has_payload_file of this TelemetryEntry.

        Specifies if the telemetry value is a separate file (available for download from fileUrl) or contains the TM value in the same object  # noqa: E501

        :param has_payload_file: The has_payload_file of this TelemetryEntry.  # noqa: E501
        :type has_payload_file: bool
        """

        self._has_payload_file = has_payload_file

    @property
    def telecommand_request(self):
        """Gets the telecommand_request of this TelemetryEntry.  # noqa: E501

        Specifies the telecommand request to which the current telemetry entry is a response. Will be empty if the telemetry entry is not a response to a telecommand  # noqa: E501

        :return: The telecommand_request of this TelemetryEntry.  # noqa: E501
        :rtype: str
        """
        return self._telecommand_request

    @telecommand_request.setter
    def telecommand_request(self, telecommand_request):
        """Sets the telecommand_request of this TelemetryEntry.

        Specifies the telecommand request to which the current telemetry entry is a response. Will be empty if the telemetry entry is not a response to a telecommand  # noqa: E501

        :param telecommand_request: The telecommand_request of this TelemetryEntry.  # noqa: E501
        :type telecommand_request: str
        """

        self._telecommand_request = telecommand_request

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TelemetryEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TelemetryEntry):
            return True

        return self.to_dict() != other.to_dict()
