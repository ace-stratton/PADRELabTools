# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class GroundStation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'elevation': 'float',
        'antennas': 'dict(str, TypedDescriptor)',
        'channels': 'list[CommunicationChannel]',
        'supported_protocols': 'list[str]',
        'protocols': 'dict(str, CommunicationProtocol)',
        'sockets': 'dict(str, TypedDescriptor)',
        'satellite_streams': 'dict(str, dict(str, StreamDescriptor))',
        'user_streams': 'dict(str, UserStreamDescriptor)',
        'hardware': 'dict(str, TypedDescriptor)',
        'additional_properties': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'elevation': 'elevation',
        'antennas': 'antennas',
        'channels': 'channels',
        'supported_protocols': 'supportedProtocols',
        'protocols': 'protocols',
        'sockets': 'sockets',
        'satellite_streams': 'satelliteStreams',
        'user_streams': 'userStreams',
        'hardware': 'hardware',
        'additional_properties': 'additionalProperties'
    }

    def __init__(self, id=None, longitude=None, latitude=None, elevation=None, antennas=None, channels=None, supported_protocols=None, protocols=None, sockets=None, satellite_streams=None, user_streams=None, hardware=None, additional_properties=None, local_vars_configuration=None):  # noqa: E501
        """GroundStation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._longitude = None
        self._latitude = None
        self._elevation = None
        self._antennas = None
        self._channels = None
        self._supported_protocols = None
        self._protocols = None
        self._sockets = None
        self._satellite_streams = None
        self._user_streams = None
        self._hardware = None
        self._additional_properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if elevation is not None:
            self.elevation = elevation
        if antennas is not None:
            self.antennas = antennas
        if channels is not None:
            self.channels = channels
        if supported_protocols is not None:
            self.supported_protocols = supported_protocols
        if protocols is not None:
            self.protocols = protocols
        if sockets is not None:
            self.sockets = sockets
        if satellite_streams is not None:
            self.satellite_streams = satellite_streams
        if user_streams is not None:
            self.user_streams = user_streams
        if hardware is not None:
            self.hardware = hardware
        if additional_properties is not None:
            self.additional_properties = additional_properties

    @property
    def id(self):
        """Gets the id of this GroundStation.  # noqa: E501

        Object ID  # noqa: E501

        :return: The id of this GroundStation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroundStation.

        Object ID  # noqa: E501

        :param id: The id of this GroundStation.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def longitude(self):
        """Gets the longitude of this GroundStation.  # noqa: E501

        Ground Station Geographic Longitude  # noqa: E501

        :return: The longitude of this GroundStation.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GroundStation.

        Ground Station Geographic Longitude  # noqa: E501

        :param longitude: The longitude of this GroundStation.  # noqa: E501
        :type longitude: float
        """
        if (self.local_vars_configuration.client_side_validation and
                longitude is not None and longitude > 180):  # noqa: E501
            raise ValueError("Invalid value for `longitude`, must be a value less than or equal to `180`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                longitude is not None and longitude < -180):  # noqa: E501
            raise ValueError("Invalid value for `longitude`, must be a value greater than or equal to `-180`")  # noqa: E501

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this GroundStation.  # noqa: E501

        Ground Station Geographic Latitude  # noqa: E501

        :return: The latitude of this GroundStation.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GroundStation.

        Ground Station Geographic Latitude  # noqa: E501

        :param latitude: The latitude of this GroundStation.  # noqa: E501
        :type latitude: float
        """
        if (self.local_vars_configuration.client_side_validation and
                latitude is not None and latitude > 90):  # noqa: E501
            raise ValueError("Invalid value for `latitude`, must be a value less than or equal to `90`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                latitude is not None and latitude < -90):  # noqa: E501
            raise ValueError("Invalid value for `latitude`, must be a value greater than or equal to `-90`")  # noqa: E501

        self._latitude = latitude

    @property
    def elevation(self):
        """Gets the elevation of this GroundStation.  # noqa: E501

        Ground Station Geographic Elevation  # noqa: E501

        :return: The elevation of this GroundStation.  # noqa: E501
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this GroundStation.

        Ground Station Geographic Elevation  # noqa: E501

        :param elevation: The elevation of this GroundStation.  # noqa: E501
        :type elevation: float
        """
        if (self.local_vars_configuration.client_side_validation and
                elevation is not None and elevation > 8849):  # noqa: E501
            raise ValueError("Invalid value for `elevation`, must be a value less than or equal to `8849`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                elevation is not None and elevation < -100):  # noqa: E501
            raise ValueError("Invalid value for `elevation`, must be a value greater than or equal to `-100`")  # noqa: E501

        self._elevation = elevation

    @property
    def antennas(self):
        """Gets the antennas of this GroundStation.  # noqa: E501

        Antenna Descriptions as supported by EnduroSat  # noqa: E501

        :return: The antennas of this GroundStation.  # noqa: E501
        :rtype: dict(str, TypedDescriptor)
        """
        return self._antennas

    @antennas.setter
    def antennas(self, antennas):
        """Sets the antennas of this GroundStation.

        Antenna Descriptions as supported by EnduroSat  # noqa: E501

        :param antennas: The antennas of this GroundStation.  # noqa: E501
        :type antennas: dict(str, TypedDescriptor)
        """

        self._antennas = antennas

    @property
    def channels(self):
        """Gets the channels of this GroundStation.  # noqa: E501

        Communication Channel Descriptions as supported by EnduroSat  # noqa: E501

        :return: The channels of this GroundStation.  # noqa: E501
        :rtype: list[CommunicationChannel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this GroundStation.

        Communication Channel Descriptions as supported by EnduroSat  # noqa: E501

        :param channels: The channels of this GroundStation.  # noqa: E501
        :type channels: list[CommunicationChannel]
        """

        self._channels = channels

    @property
    def supported_protocols(self):
        """Gets the supported_protocols of this GroundStation.  # noqa: E501

        Communication Channel Protocols as supported by EnduroSat  # noqa: E501

        :return: The supported_protocols of this GroundStation.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_protocols

    @supported_protocols.setter
    def supported_protocols(self, supported_protocols):
        """Sets the supported_protocols of this GroundStation.

        Communication Channel Protocols as supported by EnduroSat  # noqa: E501

        :param supported_protocols: The supported_protocols of this GroundStation.  # noqa: E501
        :type supported_protocols: list[str]
        """

        self._supported_protocols = supported_protocols

    @property
    def protocols(self):
        """Gets the protocols of this GroundStation.  # noqa: E501

        Communication Channel Protocols as supported by EnduroSat  # noqa: E501

        :return: The protocols of this GroundStation.  # noqa: E501
        :rtype: dict(str, CommunicationProtocol)
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this GroundStation.

        Communication Channel Protocols as supported by EnduroSat  # noqa: E501

        :param protocols: The protocols of this GroundStation.  # noqa: E501
        :type protocols: dict(str, CommunicationProtocol)
        """

        self._protocols = protocols

    @property
    def sockets(self):
        """Gets the sockets of this GroundStation.  # noqa: E501

        Represent the endpoints of Streams as supported by EnduroSat  # noqa: E501

        :return: The sockets of this GroundStation.  # noqa: E501
        :rtype: dict(str, TypedDescriptor)
        """
        return self._sockets

    @sockets.setter
    def sockets(self, sockets):
        """Sets the sockets of this GroundStation.

        Represent the endpoints of Streams as supported by EnduroSat  # noqa: E501

        :param sockets: The sockets of this GroundStation.  # noqa: E501
        :type sockets: dict(str, TypedDescriptor)
        """

        self._sockets = sockets

    @property
    def satellite_streams(self):
        """Gets the satellite_streams of this GroundStation.  # noqa: E501

        Describes streams between satellites and the ground station  # noqa: E501

        :return: The satellite_streams of this GroundStation.  # noqa: E501
        :rtype: dict(str, dict(str, StreamDescriptor))
        """
        return self._satellite_streams

    @satellite_streams.setter
    def satellite_streams(self, satellite_streams):
        """Sets the satellite_streams of this GroundStation.

        Describes streams between satellites and the ground station  # noqa: E501

        :param satellite_streams: The satellite_streams of this GroundStation.  # noqa: E501
        :type satellite_streams: dict(str, dict(str, StreamDescriptor))
        """

        self._satellite_streams = satellite_streams

    @property
    def user_streams(self):
        """Gets the user_streams of this GroundStation.  # noqa: E501

        Describes streams between the ground station and the Cloud layer  # noqa: E501

        :return: The user_streams of this GroundStation.  # noqa: E501
        :rtype: dict(str, UserStreamDescriptor)
        """
        return self._user_streams

    @user_streams.setter
    def user_streams(self, user_streams):
        """Sets the user_streams of this GroundStation.

        Describes streams between the ground station and the Cloud layer  # noqa: E501

        :param user_streams: The user_streams of this GroundStation.  # noqa: E501
        :type user_streams: dict(str, UserStreamDescriptor)
        """

        self._user_streams = user_streams

    @property
    def hardware(self):
        """Gets the hardware of this GroundStation.  # noqa: E501

        Describes the available hardware on the radio layer  # noqa: E501

        :return: The hardware of this GroundStation.  # noqa: E501
        :rtype: dict(str, TypedDescriptor)
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this GroundStation.

        Describes the available hardware on the radio layer  # noqa: E501

        :param hardware: The hardware of this GroundStation.  # noqa: E501
        :type hardware: dict(str, TypedDescriptor)
        """

        self._hardware = hardware

    @property
    def additional_properties(self):
        """Gets the additional_properties of this GroundStation.  # noqa: E501

        Additional Properties for the configuration of the Ground Station  # noqa: E501

        :return: The additional_properties of this GroundStation.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this GroundStation.

        Additional Properties for the configuration of the Ground Station  # noqa: E501

        :param additional_properties: The additional_properties of this GroundStation.  # noqa: E501
        :type additional_properties: dict(str, str)
        """

        self._additional_properties = additional_properties

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroundStation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroundStation):
            return True

        return self.to_dict() != other.to_dict()
