# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class CommunicationChannel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'antenna': 'str',
        'direction': 'str',
        'frequency_band': 'str'
    }

    attribute_map = {
        'id': 'id',
        'antenna': 'antenna',
        'direction': 'direction',
        'frequency_band': 'frequencyBand'
    }

    def __init__(self, id=None, antenna=None, direction=None, frequency_band=None, local_vars_configuration=None):  # noqa: E501
        """CommunicationChannel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._antenna = None
        self._direction = None
        self._frequency_band = None
        self.discriminator = None

        self.id = id
        self.antenna = antenna
        self.direction = direction
        self.frequency_band = frequency_band

    @property
    def id(self):
        """Gets the id of this CommunicationChannel.  # noqa: E501

        Channel ID as supported by EnduroSat  # noqa: E501

        :return: The id of this CommunicationChannel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommunicationChannel.

        Channel ID as supported by EnduroSat  # noqa: E501

        :param id: The id of this CommunicationChannel.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def antenna(self):
        """Gets the antenna of this CommunicationChannel.  # noqa: E501

        Antenna ID as supported by EnduroSat  # noqa: E501

        :return: The antenna of this CommunicationChannel.  # noqa: E501
        :rtype: str
        """
        return self._antenna

    @antenna.setter
    def antenna(self, antenna):
        """Sets the antenna of this CommunicationChannel.

        Antenna ID as supported by EnduroSat  # noqa: E501

        :param antenna: The antenna of this CommunicationChannel.  # noqa: E501
        :type antenna: str
        """
        if self.local_vars_configuration.client_side_validation and antenna is None:  # noqa: E501
            raise ValueError("Invalid value for `antenna`, must not be `None`")  # noqa: E501

        self._antenna = antenna

    @property
    def direction(self):
        """Gets the direction of this CommunicationChannel.  # noqa: E501

        Communcation Channel Direction - UPLINK | DOWNLINK  # noqa: E501

        :return: The direction of this CommunicationChannel.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CommunicationChannel.

        Communcation Channel Direction - UPLINK | DOWNLINK  # noqa: E501

        :param direction: The direction of this CommunicationChannel.  # noqa: E501
        :type direction: str
        """
        if self.local_vars_configuration.client_side_validation and direction is None:  # noqa: E501
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501
        allowed_values = ["UPLINK", "DOWNLINK"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and direction not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def frequency_band(self):
        """Gets the frequency_band of this CommunicationChannel.  # noqa: E501

        Frequency Band - UHF | SBAND | XBAND  # noqa: E501

        :return: The frequency_band of this CommunicationChannel.  # noqa: E501
        :rtype: str
        """
        return self._frequency_band

    @frequency_band.setter
    def frequency_band(self, frequency_band):
        """Sets the frequency_band of this CommunicationChannel.

        Frequency Band - UHF | SBAND | XBAND  # noqa: E501

        :param frequency_band: The frequency_band of this CommunicationChannel.  # noqa: E501
        :type frequency_band: str
        """
        if self.local_vars_configuration.client_side_validation and frequency_band is None:  # noqa: E501
            raise ValueError("Invalid value for `frequency_band`, must not be `None`")  # noqa: E501
        allowed_values = ["UHF", "SBAND", "XBAND"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and frequency_band not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `frequency_band` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency_band, allowed_values)
            )

        self._frequency_band = frequency_band

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommunicationChannel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommunicationChannel):
            return True

        return self.to_dict() != other.to_dict()
