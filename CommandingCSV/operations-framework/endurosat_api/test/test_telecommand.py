# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import endurosat_api
from endurosat_api.models.telecommand import Telecommand  # noqa: E501
from endurosat_api.rest import ApiException

class TestTelecommand(unittest.TestCase):
    """Telecommand unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Telecommand
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = endurosat_api.models.telecommand.Telecommand()  # noqa: E501
        if include_optional :
            return Telecommand(
                id = '01d11243-af60-46d3-ac8e-d7f4cc3c9104', 
                file_upload_start = 1613865691000, 
                has_file = True, 
                mission_database = 'beacons', 
                name = 'Raise orbit to 501km', 
                raw_data = 'SGVsbG8gOik=', 
                data = {"testPlan":"command1","platform":"1u","verificationIndex":1,"maxTries":3,"continueOnFail":false,"inner":{"key":12}}, 
                priority = 3, 
                satellite = '20ec20b5-8535-4593-be85-6fee2a4dd4ba', 
                satellite_subsystem = '20ec20b5-8535-4593-be85-6fee2a4dd4ba', 
                requested_satellite_pass = '20ec20b5-8535-4593-be85-6fee2a4dd4ba', 
                executed_satellite_pass = '20ec20b5-8535-4593-be85-6fee2a4dd4ba', 
                status = 'SCHEDULED', 
                has_payload_file = True, 
                expect_telemetry_response = True, 
                telemetry_response = '20ec20b5-8535-4593-be85-6fee2a4dd4ba', 
                max_tries = 3, 
                continue_on_fail = True, 
                execution_rules = endurosat_api.models.telecommand_ground_execution_rules.TelecommandGroundExecutionRules(
                    telecommand_template = '20ec20b5-8535-4593-be85-6fee2a4dd4ba', 
                    rules = [
                        endurosat_api.models.execution_rule.ExecutionRule(
                            execution_rule_type = 'SPECIFIC_GROUND_STATION', 
                            properties = {"groundStation":"plana-gs"}, )
                        ], ), 
                satellite_execution_rule = endurosat_api.models.telecommand_satellite_execution_rule.TelecommandSatelliteExecutionRule(
                    start = 1613865691000, 
                    end = 1613865691000, 
                    adcs_config = endurosat_api.models.adcs_config.ADCSConfig(
                        control_mode = 'PWR_UP', 
                        geo_longitude = 23.4290789, 
                        geo_latitude = 42.4794107, 
                        geo_altitude = 1100, ), ), 
                executed_at_timestamp = 1613865691000
            )
        else :
            return Telecommand(
                name = 'Raise orbit to 501km',
                satellite = '20ec20b5-8535-4593-be85-6fee2a4dd4ba',
        )

    def testTelecommand(self):
        """Test Telecommand"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
