# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class EventSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'event_type': 'str',
        'event_filters': 'list[EventFilter]',
        'action': 'EventAction',
        'user_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'event_type': 'eventType',
        'event_filters': 'eventFilters',
        'action': 'action',
        'user_id': 'userId'
    }

    def __init__(self, id=None, event_type=None, event_filters=None, action=None, user_id=None, local_vars_configuration=None):  # noqa: E501
        """EventSubscription - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._event_type = None
        self._event_filters = None
        self._action = None
        self._user_id = None
        self.discriminator = None

        self.id = id
        self.event_type = event_type
        self.event_filters = event_filters
        self.action = action
        self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this EventSubscription.  # noqa: E501

        The Id of the event subscription  # noqa: E501

        :return: The id of this EventSubscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventSubscription.

        The Id of the event subscription  # noqa: E501

        :param id: The id of this EventSubscription.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def event_type(self):
        """Gets the event_type of this EventSubscription.  # noqa: E501

        The Id of the event-type to which the user is subscribed  # noqa: E501

        :return: The event_type of this EventSubscription.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventSubscription.

        The Id of the event-type to which the user is subscribed  # noqa: E501

        :param event_type: The event_type of this EventSubscription.  # noqa: E501
        :type event_type: str
        """
        if self.local_vars_configuration.client_side_validation and event_type is None:  # noqa: E501
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501

        self._event_type = event_type

    @property
    def event_filters(self):
        """Gets the event_filters of this EventSubscription.  # noqa: E501

        The filters to be applied to the event  # noqa: E501

        :return: The event_filters of this EventSubscription.  # noqa: E501
        :rtype: list[EventFilter]
        """
        return self._event_filters

    @event_filters.setter
    def event_filters(self, event_filters):
        """Sets the event_filters of this EventSubscription.

        The filters to be applied to the event  # noqa: E501

        :param event_filters: The event_filters of this EventSubscription.  # noqa: E501
        :type event_filters: list[EventFilter]
        """
        if self.local_vars_configuration.client_side_validation and event_filters is None:  # noqa: E501
            raise ValueError("Invalid value for `event_filters`, must not be `None`")  # noqa: E501

        self._event_filters = event_filters

    @property
    def action(self):
        """Gets the action of this EventSubscription.  # noqa: E501


        :return: The action of this EventSubscription.  # noqa: E501
        :rtype: EventAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this EventSubscription.


        :param action: The action of this EventSubscription.  # noqa: E501
        :type action: EventAction
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def user_id(self):
        """Gets the user_id of this EventSubscription.  # noqa: E501

        The Id of the user who created the event subscription  # noqa: E501

        :return: The user_id of this EventSubscription.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EventSubscription.

        The Id of the user who created the event subscription  # noqa: E501

        :param user_id: The user_id of this EventSubscription.  # noqa: E501
        :type user_id: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventSubscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventSubscription):
            return True

        return self.to_dict() != other.to_dict()
