# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class ADCSConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'control_mode': 'str',
        'geo_longitude': 'float',
        'geo_latitude': 'float',
        'geo_altitude': 'float'
    }

    attribute_map = {
        'control_mode': 'controlMode',
        'geo_longitude': 'geoLongitude',
        'geo_latitude': 'geoLatitude',
        'geo_altitude': 'geoAltitude'
    }

    def __init__(self, control_mode=None, geo_longitude=None, geo_latitude=None, geo_altitude=None, local_vars_configuration=None):  # noqa: E501
        """ADCSConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._control_mode = None
        self._geo_longitude = None
        self._geo_latitude = None
        self._geo_altitude = None
        self.discriminator = None

        if control_mode is not None:
            self.control_mode = control_mode
        if geo_longitude is not None:
            self.geo_longitude = geo_longitude
        if geo_latitude is not None:
            self.geo_latitude = geo_latitude
        if geo_altitude is not None:
            self.geo_altitude = geo_altitude

    @property
    def control_mode(self):
        """Gets the control_mode of this ADCSConfig.  # noqa: E501

        ADCS Control Mode  # noqa: E501

        :return: The control_mode of this ADCSConfig.  # noqa: E501
        :rtype: str
        """
        return self._control_mode

    @control_mode.setter
    def control_mode(self, control_mode):
        """Sets the control_mode of this ADCSConfig.

        ADCS Control Mode  # noqa: E501

        :param control_mode: The control_mode of this ADCSConfig.  # noqa: E501
        :type control_mode: str
        """
        allowed_values = ["PWR_UP", "NORMAL_DETUMBLING", "Y_THOMSON", "Y_THOMSON_MEMS_RATE", "FAST_DETUMBLING", "VERY_FAST_DETUMBLING", "Y_MOMENTUM", "Y_MOMENTUM_FULL_STATE_EKF", "_3AXIS", "SUN_TRACKING", "TARGET_TRACKING", "NO_CONTROL", "ATTITUDE_CHANGE", "ORBITAL_CHANGE", "XBAND_TARGET_TRACKING"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and control_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `control_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(control_mode, allowed_values)
            )

        self._control_mode = control_mode

    @property
    def geo_longitude(self):
        """Gets the geo_longitude of this ADCSConfig.  # noqa: E501

        Ground Target Geographic Longitude  # noqa: E501

        :return: The geo_longitude of this ADCSConfig.  # noqa: E501
        :rtype: float
        """
        return self._geo_longitude

    @geo_longitude.setter
    def geo_longitude(self, geo_longitude):
        """Sets the geo_longitude of this ADCSConfig.

        Ground Target Geographic Longitude  # noqa: E501

        :param geo_longitude: The geo_longitude of this ADCSConfig.  # noqa: E501
        :type geo_longitude: float
        """

        self._geo_longitude = geo_longitude

    @property
    def geo_latitude(self):
        """Gets the geo_latitude of this ADCSConfig.  # noqa: E501

        Ground Target Geographic Latitude  # noqa: E501

        :return: The geo_latitude of this ADCSConfig.  # noqa: E501
        :rtype: float
        """
        return self._geo_latitude

    @geo_latitude.setter
    def geo_latitude(self, geo_latitude):
        """Sets the geo_latitude of this ADCSConfig.

        Ground Target Geographic Latitude  # noqa: E501

        :param geo_latitude: The geo_latitude of this ADCSConfig.  # noqa: E501
        :type geo_latitude: float
        """

        self._geo_latitude = geo_latitude

    @property
    def geo_altitude(self):
        """Gets the geo_altitude of this ADCSConfig.  # noqa: E501

        Ground Target Geographic Elevation  # noqa: E501

        :return: The geo_altitude of this ADCSConfig.  # noqa: E501
        :rtype: float
        """
        return self._geo_altitude

    @geo_altitude.setter
    def geo_altitude(self, geo_altitude):
        """Sets the geo_altitude of this ADCSConfig.

        Ground Target Geographic Elevation  # noqa: E501

        :param geo_altitude: The geo_altitude of this ADCSConfig.  # noqa: E501
        :type geo_altitude: float
        """

        self._geo_altitude = geo_altitude

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ADCSConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ADCSConfig):
            return True

        return self.to_dict() != other.to_dict()
