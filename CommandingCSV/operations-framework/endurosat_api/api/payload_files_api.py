# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from endurosat_api.api_client import ApiClient
from endurosat_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PayloadFilesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def finish_multipart_upload(self, multipart_upload_id, e_tags, **kwargs):  # noqa: E501
        """Finish multipart upload  # noqa: E501

        This method finishes a multipart upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.finish_multipart_upload(multipart_upload_id, e_tags, async_req=True)
        >>> result = thread.get()

        :param multipart_upload_id: (required)
        :type multipart_upload_id: str
        :param e_tags: (required)
        :type e_tags: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.finish_multipart_upload_with_http_info(multipart_upload_id, e_tags, **kwargs)  # noqa: E501

    def finish_multipart_upload_with_http_info(self, multipart_upload_id, e_tags, **kwargs):  # noqa: E501
        """Finish multipart upload  # noqa: E501

        This method finishes a multipart upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.finish_multipart_upload_with_http_info(multipart_upload_id, e_tags, async_req=True)
        >>> result = thread.get()

        :param multipart_upload_id: (required)
        :type multipart_upload_id: str
        :param e_tags: (required)
        :type e_tags: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'multipart_upload_id',
            'e_tags'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method finish_multipart_upload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'multipart_upload_id' is set
        if self.api_client.client_side_validation and ('multipart_upload_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['multipart_upload_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `multipart_upload_id` when calling `finish_multipart_upload`")  # noqa: E501
        # verify the required parameter 'e_tags' is set
        if self.api_client.client_side_validation and ('e_tags' not in local_var_params or  # noqa: E501
                                                        local_var_params['e_tags'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `e_tags` when calling `finish_multipart_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'multipart_upload_id' in local_var_params and local_var_params['multipart_upload_id'] is not None:  # noqa: E501
            query_params.append(('MultipartUploadId', local_var_params['multipart_upload_id']))  # noqa: E501
        if 'e_tags' in local_var_params and local_var_params['e_tags'] is not None:  # noqa: E501
            query_params.append(('eTags', local_var_params['e_tags']))  # noqa: E501
            collection_formats['eTags'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "object",
            200: "object",
        }

        return self.api_client.call_api(
            '/payload-files/finish', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_download_url(self, resource_type, resource_id, **kwargs):  # noqa: E501
        """(DEPRECATED) Get a URL from which to download a file. Use GET /{resourceType}/{resourceId}/artifacts/{artifactType} instead.  # noqa: E501

        This method returns a URL from which to download a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_download_url(resource_type, resource_id, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to get a file. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to get a file (required)
        :type resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_download_url_with_http_info(resource_type, resource_id, **kwargs)  # noqa: E501

    def get_download_url_with_http_info(self, resource_type, resource_id, **kwargs):  # noqa: E501
        """(DEPRECATED) Get a URL from which to download a file. Use GET /{resourceType}/{resourceId}/artifacts/{artifactType} instead.  # noqa: E501

        This method returns a URL from which to download a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_download_url_with_http_info(resource_type, resource_id, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to get a file. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to get a file (required)
        :type resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'resource_type',
            'resource_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_download_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_type` when calling `get_download_url`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if self.api_client.client_side_validation and ('resource_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_id` when calling `get_download_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in local_var_params:
            path_params['resourceType'] = local_var_params['resource_type']  # noqa: E501
        if 'resource_id' in local_var_params:
            path_params['resourceId'] = local_var_params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "object",
            200: "str",
        }

        return self.api_client.call_api(
            '/payload-files/{resourceType}/{resourceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_download_url1(self, resource_type, resource_id, artifact_type, **kwargs):  # noqa: E501
        """Get a URL from which to download a file  # noqa: E501

        This method returns a URL from which to download a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_download_url1(resource_type, resource_id, artifact_type, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to get a file. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to get a file (required)
        :type resource_id: str
        :param artifact_type: Specifies the artifact type of the Satellite Passes to get (required)
        :type artifact_type: ArtifactType
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_download_url1_with_http_info(resource_type, resource_id, artifact_type, **kwargs)  # noqa: E501

    def get_download_url1_with_http_info(self, resource_type, resource_id, artifact_type, **kwargs):  # noqa: E501
        """Get a URL from which to download a file  # noqa: E501

        This method returns a URL from which to download a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_download_url1_with_http_info(resource_type, resource_id, artifact_type, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to get a file. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to get a file (required)
        :type resource_id: str
        :param artifact_type: Specifies the artifact type of the Satellite Passes to get (required)
        :type artifact_type: ArtifactType
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'resource_type',
            'resource_id',
            'artifact_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_download_url1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_type` when calling `get_download_url1`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if self.api_client.client_side_validation and ('resource_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_id` when calling `get_download_url1`")  # noqa: E501
        # verify the required parameter 'artifact_type' is set
        if self.api_client.client_side_validation and ('artifact_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['artifact_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `artifact_type` when calling `get_download_url1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in local_var_params:
            path_params['resourceType'] = local_var_params['resource_type']  # noqa: E501
        if 'resource_id' in local_var_params:
            path_params['resourceId'] = local_var_params['resource_id']  # noqa: E501
        if 'artifact_type' in local_var_params:
            path_params['artifactType'] = local_var_params['artifact_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "object",
            200: "str",
        }

        return self.api_client.call_api(
            '/payload-files/{resourceType}/{resourceId}/artifacts/{artifactType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def initiate_multipart_upload(self, resource_type, resource_id, **kwargs):  # noqa: E501
        """Initiate Multipart Upload  # noqa: E501

        This method begins a multipart upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initiate_multipart_upload(resource_type, resource_id, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to init a file upload. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to init a file upload (required)
        :type resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.initiate_multipart_upload_with_http_info(resource_type, resource_id, **kwargs)  # noqa: E501

    def initiate_multipart_upload_with_http_info(self, resource_type, resource_id, **kwargs):  # noqa: E501
        """Initiate Multipart Upload  # noqa: E501

        This method begins a multipart upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initiate_multipart_upload_with_http_info(resource_type, resource_id, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to init a file upload. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to init a file upload (required)
        :type resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'resource_type',
            'resource_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_multipart_upload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_type` when calling `initiate_multipart_upload`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if self.api_client.client_side_validation and ('resource_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_id` when calling `initiate_multipart_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in local_var_params:
            path_params['resourceType'] = local_var_params['resource_type']  # noqa: E501
        if 'resource_id' in local_var_params:
            path_params['resourceId'] = local_var_params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "object",
            200: "str",
        }

        return self.api_client.call_api(
            '/payload-files/multipart/{resourceType}/{resourceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def upload_artifact_file(self, resource_type, resource_id, artifact_type, payload, **kwargs):  # noqa: E501
        """Attach payload file to resouce  # noqa: E501

        This method attaches a payload file to a resouce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_artifact_file(resource_type, resource_id, artifact_type, payload, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to upload a file. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to upload a file (required)
        :type resource_id: str
        :param artifact_type: Specifies the artifact type of the Satellite Passes to upload (required)
        :type artifact_type: ArtifactType
        :param payload: (required)
        :type payload: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_artifact_file_with_http_info(resource_type, resource_id, artifact_type, payload, **kwargs)  # noqa: E501

    def upload_artifact_file_with_http_info(self, resource_type, resource_id, artifact_type, payload, **kwargs):  # noqa: E501
        """Attach payload file to resouce  # noqa: E501

        This method attaches a payload file to a resouce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_artifact_file_with_http_info(resource_type, resource_id, artifact_type, payload, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to upload a file. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to upload a file (required)
        :type resource_id: str
        :param artifact_type: Specifies the artifact type of the Satellite Passes to upload (required)
        :type artifact_type: ArtifactType
        :param payload: (required)
        :type payload: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'resource_type',
            'resource_id',
            'artifact_type',
            'payload'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_artifact_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_type` when calling `upload_artifact_file`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if self.api_client.client_side_validation and ('resource_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_id` when calling `upload_artifact_file`")  # noqa: E501
        # verify the required parameter 'artifact_type' is set
        if self.api_client.client_side_validation and ('artifact_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['artifact_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `artifact_type` when calling `upload_artifact_file`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in local_var_params or  # noqa: E501
                                                        local_var_params['payload'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payload` when calling `upload_artifact_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in local_var_params:
            path_params['resourceType'] = local_var_params['resource_type']  # noqa: E501
        if 'resource_id' in local_var_params:
            path_params['resourceId'] = local_var_params['resource_id']  # noqa: E501
        if 'artifact_type' in local_var_params:
            path_params['artifactType'] = local_var_params['artifact_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payload' in local_var_params:
            local_var_files['payload'] = local_var_params['payload']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/payload-files/{resourceType}/{resourceId}/artifacts/{artifactType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def upload_file(self, resource_type, resource_id, payload, **kwargs):  # noqa: E501
        """(DEPRECATED) Attach payload file to resouce. Use PUT /{resourceType}/{resourceId}/artifacts/{artifactType} instead.  # noqa: E501

        This method attaches a payload file to a resouce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_file(resource_type, resource_id, payload, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to upload a file. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to upload a file (required)
        :type resource_id: str
        :param payload: (required)
        :type payload: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_file_with_http_info(resource_type, resource_id, payload, **kwargs)  # noqa: E501

    def upload_file_with_http_info(self, resource_type, resource_id, payload, **kwargs):  # noqa: E501
        """(DEPRECATED) Attach payload file to resouce. Use PUT /{resourceType}/{resourceId}/artifacts/{artifactType} instead.  # noqa: E501

        This method attaches a payload file to a resouce  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_file_with_http_info(resource_type, resource_id, payload, async_req=True)
        >>> result = thread.get()

        :param resource_type: Type of the resource for which to upload a file. Possible values are 'telemetry', 'telecommand' and 'satellite-pass'. (required)
        :type resource_type: str
        :param resource_id: Id of the resource for which to upload a file (required)
        :type resource_id: str
        :param payload: (required)
        :type payload: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'resource_type',
            'resource_id',
            'payload'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_type` when calling `upload_file`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if self.api_client.client_side_validation and ('resource_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_id` when calling `upload_file`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in local_var_params or  # noqa: E501
                                                        local_var_params['payload'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payload` when calling `upload_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in local_var_params:
            path_params['resourceType'] = local_var_params['resource_type']  # noqa: E501
        if 'resource_id' in local_var_params:
            path_params['resourceId'] = local_var_params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payload' in local_var_params:
            local_var_files['payload'] = local_var_params['payload']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/payload-files/{resourceType}/{resourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def upload_part(self, multipart_upload_id, part_number, payload, **kwargs):  # noqa: E501
        """Upload Part  # noqa: E501

        This method uploads a part of a multipart file upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_part(multipart_upload_id, part_number, payload, async_req=True)
        >>> result = thread.get()

        :param multipart_upload_id: (required)
        :type multipart_upload_id: str
        :param part_number: (required)
        :type part_number: int
        :param payload: (required)
        :type payload: file
        :param last_part:
        :type last_part: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_part_with_http_info(multipart_upload_id, part_number, payload, **kwargs)  # noqa: E501

    def upload_part_with_http_info(self, multipart_upload_id, part_number, payload, **kwargs):  # noqa: E501
        """Upload Part  # noqa: E501

        This method uploads a part of a multipart file upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_part_with_http_info(multipart_upload_id, part_number, payload, async_req=True)
        >>> result = thread.get()

        :param multipart_upload_id: (required)
        :type multipart_upload_id: str
        :param part_number: (required)
        :type part_number: int
        :param payload: (required)
        :type payload: file
        :param last_part:
        :type last_part: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'multipart_upload_id',
            'part_number',
            'payload',
            'last_part'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_part" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'multipart_upload_id' is set
        if self.api_client.client_side_validation and ('multipart_upload_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['multipart_upload_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `multipart_upload_id` when calling `upload_part`")  # noqa: E501
        # verify the required parameter 'part_number' is set
        if self.api_client.client_side_validation and ('part_number' not in local_var_params or  # noqa: E501
                                                        local_var_params['part_number'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `part_number` when calling `upload_part`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in local_var_params or  # noqa: E501
                                                        local_var_params['payload'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payload` when calling `upload_part`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'multipart_upload_id' in local_var_params and local_var_params['multipart_upload_id'] is not None:  # noqa: E501
            query_params.append(('MultipartUploadId', local_var_params['multipart_upload_id']))  # noqa: E501
        if 'part_number' in local_var_params and local_var_params['part_number'] is not None:  # noqa: E501
            query_params.append(('partNumber', local_var_params['part_number']))  # noqa: E501
        if 'last_part' in local_var_params and local_var_params['last_part'] is not None:  # noqa: E501
            query_params.append(('lastPart', local_var_params['last_part']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payload' in local_var_params:
            local_var_files['payload'] = local_var_params['payload']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "object",
            200: "str",
        }

        return self.api_client.call_api(
            '/payload-files/upload-part', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
