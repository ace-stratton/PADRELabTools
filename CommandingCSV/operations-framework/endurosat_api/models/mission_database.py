# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class MissionDatabase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'satellites': 'list[str]',
        'satellite_subsystems': 'list[str]',
        'configuration': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'satellites': 'satellites',
        'satellite_subsystems': 'satelliteSubsystems',
        'configuration': 'configuration'
    }

    def __init__(self, id=None, name=None, type=None, satellites=None, satellite_subsystems=None, configuration=None, local_vars_configuration=None):  # noqa: E501
        """MissionDatabase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._type = None
        self._satellites = None
        self._satellite_subsystems = None
        self._configuration = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if satellites is not None:
            self.satellites = satellites
        if satellite_subsystems is not None:
            self.satellite_subsystems = satellite_subsystems
        if configuration is not None:
            self.configuration = configuration

    @property
    def id(self):
        """Gets the id of this MissionDatabase.  # noqa: E501

        Object ID  # noqa: E501

        :return: The id of this MissionDatabase.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MissionDatabase.

        Object ID  # noqa: E501

        :param id: The id of this MissionDatabase.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MissionDatabase.  # noqa: E501

        Name of the Mission Database  # noqa: E501

        :return: The name of this MissionDatabase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MissionDatabase.

        Name of the Mission Database  # noqa: E501

        :param name: The name of this MissionDatabase.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this MissionDatabase.  # noqa: E501

        Type of the Mission Database  # noqa: E501

        :return: The type of this MissionDatabase.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MissionDatabase.

        Type of the Mission Database  # noqa: E501

        :param type: The type of this MissionDatabase.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def satellites(self):
        """Gets the satellites of this MissionDatabase.  # noqa: E501

        IDs of the Satellites for which the Mission Database is valid.  # noqa: E501

        :return: The satellites of this MissionDatabase.  # noqa: E501
        :rtype: list[str]
        """
        return self._satellites

    @satellites.setter
    def satellites(self, satellites):
        """Sets the satellites of this MissionDatabase.

        IDs of the Satellites for which the Mission Database is valid.  # noqa: E501

        :param satellites: The satellites of this MissionDatabase.  # noqa: E501
        :type satellites: list[str]
        """

        self._satellites = satellites

    @property
    def satellite_subsystems(self):
        """Gets the satellite_subsystems of this MissionDatabase.  # noqa: E501

        IDs of the Satellite Subsystems for which the Mission Database is valid.  # noqa: E501

        :return: The satellite_subsystems of this MissionDatabase.  # noqa: E501
        :rtype: list[str]
        """
        return self._satellite_subsystems

    @satellite_subsystems.setter
    def satellite_subsystems(self, satellite_subsystems):
        """Sets the satellite_subsystems of this MissionDatabase.

        IDs of the Satellite Subsystems for which the Mission Database is valid.  # noqa: E501

        :param satellite_subsystems: The satellite_subsystems of this MissionDatabase.  # noqa: E501
        :type satellite_subsystems: list[str]
        """

        self._satellite_subsystems = satellite_subsystems

    @property
    def configuration(self):
        """Gets the configuration of this MissionDatabase.  # noqa: E501

        Key-Value Configuration Properties  # noqa: E501

        :return: The configuration of this MissionDatabase.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this MissionDatabase.

        Key-Value Configuration Properties  # noqa: E501

        :param configuration: The configuration of this MissionDatabase.  # noqa: E501
        :type configuration: dict(str, str)
        """

        self._configuration = configuration

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MissionDatabase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MissionDatabase):
            return True

        return self.to_dict() != other.to_dict()
