# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class SatellitePass(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'file_upload_start': 'int',
        'has_file': 'bool',
        'status': 'str',
        'satellite': 'str',
        'ground_station': 'str',
        'aos': 'int',
        'los': 'int',
        'max_elevation': 'float',
        'tle1': 'str',
        'tle2': 'str',
        'extra_attributes': 'object'
    }

    attribute_map = {
        'id': 'id',
        'file_upload_start': 'fileUploadStart',
        'has_file': 'hasFile',
        'status': 'status',
        'satellite': 'satellite',
        'ground_station': 'groundStation',
        'aos': 'aos',
        'los': 'los',
        'max_elevation': 'maxElevation',
        'tle1': 'tle1',
        'tle2': 'tle2',
        'extra_attributes': 'extraAttributes'
    }

    def __init__(self, id=None, file_upload_start=None, has_file=None, status=None, satellite=None, ground_station=None, aos=None, los=None, max_elevation=None, tle1=None, tle2=None, extra_attributes=None, local_vars_configuration=None):  # noqa: E501
        """SatellitePass - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._file_upload_start = None
        self._has_file = None
        self._status = None
        self._satellite = None
        self._ground_station = None
        self._aos = None
        self._los = None
        self._max_elevation = None
        self._tle1 = None
        self._tle2 = None
        self._extra_attributes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if file_upload_start is not None:
            self.file_upload_start = file_upload_start
        if has_file is not None:
            self.has_file = has_file
        self.status = status
        self.satellite = satellite
        self.ground_station = ground_station
        self.aos = aos
        self.los = los
        self.max_elevation = max_elevation
        if tle1 is not None:
            self.tle1 = tle1
        if tle2 is not None:
            self.tle2 = tle2
        if extra_attributes is not None:
            self.extra_attributes = extra_attributes

    @property
    def id(self):
        """Gets the id of this SatellitePass.  # noqa: E501

        Object ID  # noqa: E501

        :return: The id of this SatellitePass.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SatellitePass.

        Object ID  # noqa: E501

        :param id: The id of this SatellitePass.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def file_upload_start(self):
        """Gets the file_upload_start of this SatellitePass.  # noqa: E501

        Start time of multipart upload in progress  # noqa: E501

        :return: The file_upload_start of this SatellitePass.  # noqa: E501
        :rtype: int
        """
        return self._file_upload_start

    @file_upload_start.setter
    def file_upload_start(self, file_upload_start):
        """Sets the file_upload_start of this SatellitePass.

        Start time of multipart upload in progress  # noqa: E501

        :param file_upload_start: The file_upload_start of this SatellitePass.  # noqa: E501
        :type file_upload_start: int
        """

        self._file_upload_start = file_upload_start

    @property
    def has_file(self):
        """Gets the has_file of this SatellitePass.  # noqa: E501

        Specifies if this resource has an uploaded payload file  # noqa: E501

        :return: The has_file of this SatellitePass.  # noqa: E501
        :rtype: bool
        """
        return self._has_file

    @has_file.setter
    def has_file(self, has_file):
        """Sets the has_file of this SatellitePass.

        Specifies if this resource has an uploaded payload file  # noqa: E501

        :param has_file: The has_file of this SatellitePass.  # noqa: E501
        :type has_file: bool
        """

        self._has_file = has_file

    @property
    def status(self):
        """Gets the status of this SatellitePass.  # noqa: E501

        Status of the Satellite Pass - SCHEDULED | IN_PROGRESS | FINISHED_SUCCESSFULLY | FINISHED_WITH_ERRORS | CANCELED  # noqa: E501

        :return: The status of this SatellitePass.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SatellitePass.

        Status of the Satellite Pass - SCHEDULED | IN_PROGRESS | FINISHED_SUCCESSFULLY | FINISHED_WITH_ERRORS | CANCELED  # noqa: E501

        :param status: The status of this SatellitePass.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["PREDICTION", "SCHEDULED", "IN_PROGRESS", "FINISHED_SUCCESSFULLY", "FINISHED_WITH_ERRORS", "CANCELED", "MISSED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def satellite(self):
        """Gets the satellite of this SatellitePass.  # noqa: E501

        ID of the Satellite for this Pass  # noqa: E501

        :return: The satellite of this SatellitePass.  # noqa: E501
        :rtype: str
        """
        return self._satellite

    @satellite.setter
    def satellite(self, satellite):
        """Sets the satellite of this SatellitePass.

        ID of the Satellite for this Pass  # noqa: E501

        :param satellite: The satellite of this SatellitePass.  # noqa: E501
        :type satellite: str
        """
        if self.local_vars_configuration.client_side_validation and satellite is None:  # noqa: E501
            raise ValueError("Invalid value for `satellite`, must not be `None`")  # noqa: E501

        self._satellite = satellite

    @property
    def ground_station(self):
        """Gets the ground_station of this SatellitePass.  # noqa: E501

        ID of the Ground Station above which the satellite will pass  # noqa: E501

        :return: The ground_station of this SatellitePass.  # noqa: E501
        :rtype: str
        """
        return self._ground_station

    @ground_station.setter
    def ground_station(self, ground_station):
        """Sets the ground_station of this SatellitePass.

        ID of the Ground Station above which the satellite will pass  # noqa: E501

        :param ground_station: The ground_station of this SatellitePass.  # noqa: E501
        :type ground_station: str
        """
        if self.local_vars_configuration.client_side_validation and ground_station is None:  # noqa: E501
            raise ValueError("Invalid value for `ground_station`, must not be `None`")  # noqa: E501

        self._ground_station = ground_station

    @property
    def aos(self):
        """Gets the aos of this SatellitePass.  # noqa: E501

        Aquisition of Signal Time for the Satellite Pass  # noqa: E501

        :return: The aos of this SatellitePass.  # noqa: E501
        :rtype: int
        """
        return self._aos

    @aos.setter
    def aos(self, aos):
        """Sets the aos of this SatellitePass.

        Aquisition of Signal Time for the Satellite Pass  # noqa: E501

        :param aos: The aos of this SatellitePass.  # noqa: E501
        :type aos: int
        """
        if self.local_vars_configuration.client_side_validation and aos is None:  # noqa: E501
            raise ValueError("Invalid value for `aos`, must not be `None`")  # noqa: E501

        self._aos = aos

    @property
    def los(self):
        """Gets the los of this SatellitePass.  # noqa: E501

        Loss of Signal Time for the Satellite Pass  # noqa: E501

        :return: The los of this SatellitePass.  # noqa: E501
        :rtype: int
        """
        return self._los

    @los.setter
    def los(self, los):
        """Sets the los of this SatellitePass.

        Loss of Signal Time for the Satellite Pass  # noqa: E501

        :param los: The los of this SatellitePass.  # noqa: E501
        :type los: int
        """
        if self.local_vars_configuration.client_side_validation and los is None:  # noqa: E501
            raise ValueError("Invalid value for `los`, must not be `None`")  # noqa: E501

        self._los = los

    @property
    def max_elevation(self):
        """Gets the max_elevation of this SatellitePass.  # noqa: E501

        Max Elevation in degrees of the Satellite Pass  # noqa: E501

        :return: The max_elevation of this SatellitePass.  # noqa: E501
        :rtype: float
        """
        return self._max_elevation

    @max_elevation.setter
    def max_elevation(self, max_elevation):
        """Sets the max_elevation of this SatellitePass.

        Max Elevation in degrees of the Satellite Pass  # noqa: E501

        :param max_elevation: The max_elevation of this SatellitePass.  # noqa: E501
        :type max_elevation: float
        """
        if self.local_vars_configuration.client_side_validation and max_elevation is None:  # noqa: E501
            raise ValueError("Invalid value for `max_elevation`, must not be `None`")  # noqa: E501

        self._max_elevation = max_elevation

    @property
    def tle1(self):
        """Gets the tle1 of this SatellitePass.  # noqa: E501

        TLE Line 1  # noqa: E501

        :return: The tle1 of this SatellitePass.  # noqa: E501
        :rtype: str
        """
        return self._tle1

    @tle1.setter
    def tle1(self, tle1):
        """Sets the tle1 of this SatellitePass.

        TLE Line 1  # noqa: E501

        :param tle1: The tle1 of this SatellitePass.  # noqa: E501
        :type tle1: str
        """

        self._tle1 = tle1

    @property
    def tle2(self):
        """Gets the tle2 of this SatellitePass.  # noqa: E501

        TLE Line 2  # noqa: E501

        :return: The tle2 of this SatellitePass.  # noqa: E501
        :rtype: str
        """
        return self._tle2

    @tle2.setter
    def tle2(self, tle2):
        """Sets the tle2 of this SatellitePass.

        TLE Line 2  # noqa: E501

        :param tle2: The tle2 of this SatellitePass.  # noqa: E501
        :type tle2: str
        """

        self._tle2 = tle2

    @property
    def extra_attributes(self):
        """Gets the extra_attributes of this SatellitePass.  # noqa: E501

        Configuration of the action  # noqa: E501

        :return: The extra_attributes of this SatellitePass.  # noqa: E501
        :rtype: object
        """
        return self._extra_attributes

    @extra_attributes.setter
    def extra_attributes(self, extra_attributes):
        """Sets the extra_attributes of this SatellitePass.

        Configuration of the action  # noqa: E501

        :param extra_attributes: The extra_attributes of this SatellitePass.  # noqa: E501
        :type extra_attributes: object
        """

        self._extra_attributes = extra_attributes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SatellitePass):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SatellitePass):
            return True

        return self.to_dict() != other.to_dict()
