# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class ConjunctionEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conjunction_id': 'str',
        'satellite_id': 'str',
        'conjunction_data': 'BaseConjunctionData',
        'object1': 'CatalogueObjectWithKeplerianElements',
        'object2': 'CatalogueObjectWithKeplerianElements',
        'updated_at': 'datetime',
        'created_at': 'datetime',
        'last_screened_at': 'datetime'
    }

    attribute_map = {
        'conjunction_id': 'conjunctionId',
        'satellite_id': 'satelliteId',
        'conjunction_data': 'conjunctionData',
        'object1': 'object1',
        'object2': 'object2',
        'updated_at': 'updatedAt',
        'created_at': 'createdAt',
        'last_screened_at': 'lastScreenedAt'
    }

    def __init__(self, conjunction_id=None, satellite_id=None, conjunction_data=None, object1=None, object2=None, updated_at=None, created_at=None, last_screened_at=None, local_vars_configuration=None):  # noqa: E501
        """ConjunctionEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._conjunction_id = None
        self._satellite_id = None
        self._conjunction_data = None
        self._object1 = None
        self._object2 = None
        self._updated_at = None
        self._created_at = None
        self._last_screened_at = None
        self.discriminator = None

        if conjunction_id is not None:
            self.conjunction_id = conjunction_id
        if satellite_id is not None:
            self.satellite_id = satellite_id
        if conjunction_data is not None:
            self.conjunction_data = conjunction_data
        if object1 is not None:
            self.object1 = object1
        if object2 is not None:
            self.object2 = object2
        if updated_at is not None:
            self.updated_at = updated_at
        if created_at is not None:
            self.created_at = created_at
        if last_screened_at is not None:
            self.last_screened_at = last_screened_at

    @property
    def conjunction_id(self):
        """Gets the conjunction_id of this ConjunctionEvent.  # noqa: E501


        :return: The conjunction_id of this ConjunctionEvent.  # noqa: E501
        :rtype: str
        """
        return self._conjunction_id

    @conjunction_id.setter
    def conjunction_id(self, conjunction_id):
        """Sets the conjunction_id of this ConjunctionEvent.


        :param conjunction_id: The conjunction_id of this ConjunctionEvent.  # noqa: E501
        :type conjunction_id: str
        """

        self._conjunction_id = conjunction_id

    @property
    def satellite_id(self):
        """Gets the satellite_id of this ConjunctionEvent.  # noqa: E501


        :return: The satellite_id of this ConjunctionEvent.  # noqa: E501
        :rtype: str
        """
        return self._satellite_id

    @satellite_id.setter
    def satellite_id(self, satellite_id):
        """Sets the satellite_id of this ConjunctionEvent.


        :param satellite_id: The satellite_id of this ConjunctionEvent.  # noqa: E501
        :type satellite_id: str
        """

        self._satellite_id = satellite_id

    @property
    def conjunction_data(self):
        """Gets the conjunction_data of this ConjunctionEvent.  # noqa: E501


        :return: The conjunction_data of this ConjunctionEvent.  # noqa: E501
        :rtype: BaseConjunctionData
        """
        return self._conjunction_data

    @conjunction_data.setter
    def conjunction_data(self, conjunction_data):
        """Sets the conjunction_data of this ConjunctionEvent.


        :param conjunction_data: The conjunction_data of this ConjunctionEvent.  # noqa: E501
        :type conjunction_data: BaseConjunctionData
        """

        self._conjunction_data = conjunction_data

    @property
    def object1(self):
        """Gets the object1 of this ConjunctionEvent.  # noqa: E501


        :return: The object1 of this ConjunctionEvent.  # noqa: E501
        :rtype: CatalogueObjectWithKeplerianElements
        """
        return self._object1

    @object1.setter
    def object1(self, object1):
        """Sets the object1 of this ConjunctionEvent.


        :param object1: The object1 of this ConjunctionEvent.  # noqa: E501
        :type object1: CatalogueObjectWithKeplerianElements
        """

        self._object1 = object1

    @property
    def object2(self):
        """Gets the object2 of this ConjunctionEvent.  # noqa: E501


        :return: The object2 of this ConjunctionEvent.  # noqa: E501
        :rtype: CatalogueObjectWithKeplerianElements
        """
        return self._object2

    @object2.setter
    def object2(self, object2):
        """Sets the object2 of this ConjunctionEvent.


        :param object2: The object2 of this ConjunctionEvent.  # noqa: E501
        :type object2: CatalogueObjectWithKeplerianElements
        """

        self._object2 = object2

    @property
    def updated_at(self):
        """Gets the updated_at of this ConjunctionEvent.  # noqa: E501


        :return: The updated_at of this ConjunctionEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConjunctionEvent.


        :param updated_at: The updated_at of this ConjunctionEvent.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this ConjunctionEvent.  # noqa: E501


        :return: The created_at of this ConjunctionEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConjunctionEvent.


        :param created_at: The created_at of this ConjunctionEvent.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def last_screened_at(self):
        """Gets the last_screened_at of this ConjunctionEvent.  # noqa: E501


        :return: The last_screened_at of this ConjunctionEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._last_screened_at

    @last_screened_at.setter
    def last_screened_at(self, last_screened_at):
        """Sets the last_screened_at of this ConjunctionEvent.


        :param last_screened_at: The last_screened_at of this ConjunctionEvent.  # noqa: E501
        :type last_screened_at: datetime
        """

        self._last_screened_at = last_screened_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConjunctionEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConjunctionEvent):
            return True

        return self.to_dict() != other.to_dict()
