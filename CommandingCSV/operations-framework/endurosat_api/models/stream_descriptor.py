# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class StreamDescriptor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'socket': 'str',
        'socket_type': 'str',
        'configuration': 'dict(str, str)',
        'hardware': 'list[str]'
    }

    attribute_map = {
        'socket': 'socket',
        'socket_type': 'socketType',
        'configuration': 'configuration',
        'hardware': 'hardware'
    }

    def __init__(self, socket=None, socket_type=None, configuration=None, hardware=None, local_vars_configuration=None):  # noqa: E501
        """StreamDescriptor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._socket = None
        self._socket_type = None
        self._configuration = None
        self._hardware = None
        self.discriminator = None

        if socket is not None:
            self.socket = socket
        if socket_type is not None:
            self.socket_type = socket_type
        if configuration is not None:
            self.configuration = configuration
        if hardware is not None:
            self.hardware = hardware

    @property
    def socket(self):
        """Gets the socket of this StreamDescriptor.  # noqa: E501

        Name of the socket  # noqa: E501

        :return: The socket of this StreamDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._socket

    @socket.setter
    def socket(self, socket):
        """Sets the socket of this StreamDescriptor.

        Name of the socket  # noqa: E501

        :param socket: The socket of this StreamDescriptor.  # noqa: E501
        :type socket: str
        """

        self._socket = socket

    @property
    def socket_type(self):
        """Gets the socket_type of this StreamDescriptor.  # noqa: E501

        Type of the socket  # noqa: E501

        :return: The socket_type of this StreamDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._socket_type

    @socket_type.setter
    def socket_type(self, socket_type):
        """Sets the socket_type of this StreamDescriptor.

        Type of the socket  # noqa: E501

        :param socket_type: The socket_type of this StreamDescriptor.  # noqa: E501
        :type socket_type: str
        """
        allowed_values = ["IN", "OUT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and socket_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `socket_type` ({0}), must be one of {1}"  # noqa: E501
                .format(socket_type, allowed_values)
            )

        self._socket_type = socket_type

    @property
    def configuration(self):
        """Gets the configuration of this StreamDescriptor.  # noqa: E501

        Stream Configuration Properties as supported by EnduroSat  # noqa: E501

        :return: The configuration of this StreamDescriptor.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this StreamDescriptor.

        Stream Configuration Properties as supported by EnduroSat  # noqa: E501

        :param configuration: The configuration of this StreamDescriptor.  # noqa: E501
        :type configuration: dict(str, str)
        """

        self._configuration = configuration

    @property
    def hardware(self):
        """Gets the hardware of this StreamDescriptor.  # noqa: E501

        List of hardware that is needed to enable the stream to function  # noqa: E501

        :return: The hardware of this StreamDescriptor.  # noqa: E501
        :rtype: list[str]
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this StreamDescriptor.

        List of hardware that is needed to enable the stream to function  # noqa: E501

        :param hardware: The hardware of this StreamDescriptor.  # noqa: E501
        :type hardware: list[str]
        """

        self._hardware = hardware

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StreamDescriptor):
            return True

        return self.to_dict() != other.to_dict()
