# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from endurosat_api.api_client import ApiClient
from endurosat_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SatelliteTelecommandsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_telecommand(self, telecommand, **kwargs):  # noqa: E501
        """Create a Satellite Telecommand  # noqa: E501

        This method creates new satellite telecommands for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_telecommand(telecommand, async_req=True)
        >>> result = thread.get()

        :param telecommand: (required)
        :type telecommand: Telecommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.create_telecommand_with_http_info(telecommand, **kwargs)  # noqa: E501

    def create_telecommand_with_http_info(self, telecommand, **kwargs):  # noqa: E501
        """Create a Satellite Telecommand  # noqa: E501

        This method creates new satellite telecommands for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_telecommand_with_http_info(telecommand, async_req=True)
        >>> result = thread.get()

        :param telecommand: (required)
        :type telecommand: Telecommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'telecommand'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_telecommand" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'telecommand' is set
        if self.api_client.client_side_validation and ('telecommand' not in local_var_params or  # noqa: E501
                                                        local_var_params['telecommand'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `telecommand` when calling `create_telecommand`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'telecommand' in local_var_params:
            body_params = local_var_params['telecommand']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            201: "str",
            403: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/satellite-telecommands', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_telecommand_with_payload(self, payload, telecommand, **kwargs):  # noqa: E501
        """Create a Satellite Telecommand with Payload  # noqa: E501

        This method creates new satellite telecommands with payloads for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_telecommand_with_payload(payload, telecommand, async_req=True)
        >>> result = thread.get()

        :param payload: (required)
        :type payload: file
        :param telecommand: (required)
        :type telecommand: Telecommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.create_telecommand_with_payload_with_http_info(payload, telecommand, **kwargs)  # noqa: E501

    def create_telecommand_with_payload_with_http_info(self, payload, telecommand, **kwargs):  # noqa: E501
        """Create a Satellite Telecommand with Payload  # noqa: E501

        This method creates new satellite telecommands with payloads for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_telecommand_with_payload_with_http_info(payload, telecommand, async_req=True)
        >>> result = thread.get()

        :param payload: (required)
        :type payload: file
        :param telecommand: (required)
        :type telecommand: Telecommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'payload',
            'telecommand'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_telecommand_with_payload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in local_var_params or  # noqa: E501
                                                        local_var_params['payload'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payload` when calling `create_telecommand_with_payload`")  # noqa: E501
        # verify the required parameter 'telecommand' is set
        if self.api_client.client_side_validation and ('telecommand' not in local_var_params or  # noqa: E501
                                                        local_var_params['telecommand'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `telecommand` when calling `create_telecommand_with_payload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payload' in local_var_params:
            local_var_files['payload'] = local_var_params['payload']  # noqa: E501
        if 'telecommand' in local_var_params:
            form_params.append(('telecommand', local_var_params['telecommand']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            201: "str",
            403: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/satellite-telecommands/with-payload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_telecommand_by_id(self, telecommand_id, **kwargs):  # noqa: E501
        """Delete a Satellite Telecommand  # noqa: E501

        This method deletes a Satellite Telecommand by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_telecommand_by_id(telecommand_id, async_req=True)
        >>> result = thread.get()

        :param telecommand_id: ID of the Satellite Telecommand to delete (required)
        :type telecommand_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_telecommand_by_id_with_http_info(telecommand_id, **kwargs)  # noqa: E501

    def delete_telecommand_by_id_with_http_info(self, telecommand_id, **kwargs):  # noqa: E501
        """Delete a Satellite Telecommand  # noqa: E501

        This method deletes a Satellite Telecommand by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_telecommand_by_id_with_http_info(telecommand_id, async_req=True)
        >>> result = thread.get()

        :param telecommand_id: ID of the Satellite Telecommand to delete (required)
        :type telecommand_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'telecommand_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_telecommand_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'telecommand_id' is set
        if self.api_client.client_side_validation and ('telecommand_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['telecommand_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `telecommand_id` when calling `delete_telecommand_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'telecommand_id' in local_var_params:
            path_params['telecommandId'] = local_var_params['telecommand_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/satellite-telecommands/{telecommandId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_executed_telecommands(self, **kwargs):  # noqa: E501
        """Get Telecommand History  # noqa: E501

        This method returns a list of already executed telecommands for a satellite. Telecommands could be filtered by Satellite, FromTime, ToTime based on their execution time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_executed_telecommands(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get telecommands
        :type satellite_id: str
        :param from_time: Filter to only return entries that were received after the specified time (inclusive)
        :type from_time: int
        :param to_time: Filter to only return entries that were received before the specified time (exclusive)
        :type to_time: int
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param data_query: Allows you to filter the data field using a query that supports the following comparison operations: '>' (greater than), '=='(equal to), '<'(less than), '>=' (greater than or equal to), '<=' (less than or equal to). Supported logical operators are 'and' and 'or'. Fields and values are case-sensitive. Example: fpHeader.SatId == 1 and (fpHeader.FuncId == 2 or fpHeader.FuncId == 3)
        :type data_query: str
        :param projection_expression: Allows you to specify a subset of attributes to be returned. By default, all attributes are returned. Projection expression supports all properties of the data field. Example: fpHeader.SatId, fpHeader.FuncId, data.types[0]
        :type projection_expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TelecommandsResultPage
        """
        kwargs['_return_http_data_only'] = True
        return self.get_executed_telecommands_with_http_info(**kwargs)  # noqa: E501

    def get_executed_telecommands_with_http_info(self, **kwargs):  # noqa: E501
        """Get Telecommand History  # noqa: E501

        This method returns a list of already executed telecommands for a satellite. Telecommands could be filtered by Satellite, FromTime, ToTime based on their execution time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_executed_telecommands_with_http_info(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get telecommands
        :type satellite_id: str
        :param from_time: Filter to only return entries that were received after the specified time (inclusive)
        :type from_time: int
        :param to_time: Filter to only return entries that were received before the specified time (exclusive)
        :type to_time: int
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param data_query: Allows you to filter the data field using a query that supports the following comparison operations: '>' (greater than), '=='(equal to), '<'(less than), '>=' (greater than or equal to), '<=' (less than or equal to). Supported logical operators are 'and' and 'or'. Fields and values are case-sensitive. Example: fpHeader.SatId == 1 and (fpHeader.FuncId == 2 or fpHeader.FuncId == 3)
        :type data_query: str
        :param projection_expression: Allows you to specify a subset of attributes to be returned. By default, all attributes are returned. Projection expression supports all properties of the data field. Example: fpHeader.SatId, fpHeader.FuncId, data.types[0]
        :type projection_expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TelecommandsResultPage, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'satellite_id',
            'from_time',
            'to_time',
            'last_evaluated_item',
            'page_size_limit',
            'data_query',
            'projection_expression'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_executed_telecommands" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'satellite_id' in local_var_params and local_var_params['satellite_id'] is not None:  # noqa: E501
            query_params.append(('satelliteId', local_var_params['satellite_id']))  # noqa: E501
        if 'from_time' in local_var_params and local_var_params['from_time'] is not None:  # noqa: E501
            query_params.append(('fromTime', local_var_params['from_time']))  # noqa: E501
        if 'to_time' in local_var_params and local_var_params['to_time'] is not None:  # noqa: E501
            query_params.append(('toTime', local_var_params['to_time']))  # noqa: E501
        if 'last_evaluated_item' in local_var_params and local_var_params['last_evaluated_item'] is not None:  # noqa: E501
            query_params.append(('lastEvaluatedItem', local_var_params['last_evaluated_item']))  # noqa: E501
        if 'page_size_limit' in local_var_params and local_var_params['page_size_limit'] is not None:  # noqa: E501
            query_params.append(('pageSizeLimit', local_var_params['page_size_limit']))  # noqa: E501
        if 'data_query' in local_var_params and local_var_params['data_query'] is not None:  # noqa: E501
            query_params.append(('dataQuery', local_var_params['data_query']))  # noqa: E501
        if 'projection_expression' in local_var_params and local_var_params['projection_expression'] is not None:  # noqa: E501
            query_params.append(('projectionExpression', local_var_params['projection_expression']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            200: "TelecommandsResultPage",
        }

        return self.api_client.call_api(
            '/satellite-telecommands/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_filtered_telecommands(self, **kwargs):  # noqa: E501
        """Get Filtered Telecommands  # noqa: E501

        This method returns a filtered list of telecommands for a satellite. Telecommands could be filtered by Satellite, Satellite Subsystem, Requested Satellite Pass, Executed Satellite Pass and Status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_filtered_telecommands(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get telecommands
        :type satellite_id: str
        :param satellite_subsystem_id: Specifies the satellite subsystem (or part of the subsystem) for which to get telecommands
        :type satellite_subsystem_id: str
        :param name: Specifies the name or part of the name (or part of the name) of the telecommand
        :type name: str
        :param requested_satellite_pass: Specifies the satellite pass (or part of the pass) for which the telecommand was originally scheduled
        :type requested_satellite_pass: str
        :param executed_satellite_pass: Specifies the satellite pass (or part of the pass) during which the telecommand was sent to the satellite
        :type executed_satellite_pass: str
        :param status: Specifies the status (or part of the status) of the telecommand
        :type status: str
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param data_query: Allows you to filter the data field using a query that supports the following comparison operations: '>' (greater than), '=='(equal to), '<'(less than), '>=' (greater than or equal to), '<=' (less than or equal to). Supported logical operators are 'and' and 'or'. Fields and values are case-sensitive. Example: fpHeader.SatId == 1 and (fpHeader.FuncId == 2 or fpHeader.FuncId == 3)
        :type data_query: str
        :param projection_expression: Allows you to specify a subset of attributes to be returned. By default, all attributes are returned. Projection expression supports all properties of the data field. Example: fpHeader.SatId, fpHeader.FuncId, data.types[0]
        :type projection_expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TelecommandsResultPage
        """
        kwargs['_return_http_data_only'] = True
        return self.get_filtered_telecommands_with_http_info(**kwargs)  # noqa: E501

    def get_filtered_telecommands_with_http_info(self, **kwargs):  # noqa: E501
        """Get Filtered Telecommands  # noqa: E501

        This method returns a filtered list of telecommands for a satellite. Telecommands could be filtered by Satellite, Satellite Subsystem, Requested Satellite Pass, Executed Satellite Pass and Status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_filtered_telecommands_with_http_info(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get telecommands
        :type satellite_id: str
        :param satellite_subsystem_id: Specifies the satellite subsystem (or part of the subsystem) for which to get telecommands
        :type satellite_subsystem_id: str
        :param name: Specifies the name or part of the name (or part of the name) of the telecommand
        :type name: str
        :param requested_satellite_pass: Specifies the satellite pass (or part of the pass) for which the telecommand was originally scheduled
        :type requested_satellite_pass: str
        :param executed_satellite_pass: Specifies the satellite pass (or part of the pass) during which the telecommand was sent to the satellite
        :type executed_satellite_pass: str
        :param status: Specifies the status (or part of the status) of the telecommand
        :type status: str
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param data_query: Allows you to filter the data field using a query that supports the following comparison operations: '>' (greater than), '=='(equal to), '<'(less than), '>=' (greater than or equal to), '<=' (less than or equal to). Supported logical operators are 'and' and 'or'. Fields and values are case-sensitive. Example: fpHeader.SatId == 1 and (fpHeader.FuncId == 2 or fpHeader.FuncId == 3)
        :type data_query: str
        :param projection_expression: Allows you to specify a subset of attributes to be returned. By default, all attributes are returned. Projection expression supports all properties of the data field. Example: fpHeader.SatId, fpHeader.FuncId, data.types[0]
        :type projection_expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TelecommandsResultPage, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'satellite_id',
            'satellite_subsystem_id',
            'name',
            'requested_satellite_pass',
            'executed_satellite_pass',
            'status',
            'last_evaluated_item',
            'page_size_limit',
            'data_query',
            'projection_expression'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filtered_telecommands" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'satellite_id' in local_var_params and local_var_params['satellite_id'] is not None:  # noqa: E501
            query_params.append(('satelliteId', local_var_params['satellite_id']))  # noqa: E501
        if 'satellite_subsystem_id' in local_var_params and local_var_params['satellite_subsystem_id'] is not None:  # noqa: E501
            query_params.append(('satelliteSubsystemId', local_var_params['satellite_subsystem_id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'requested_satellite_pass' in local_var_params and local_var_params['requested_satellite_pass'] is not None:  # noqa: E501
            query_params.append(('requestedSatellitePass', local_var_params['requested_satellite_pass']))  # noqa: E501
        if 'executed_satellite_pass' in local_var_params and local_var_params['executed_satellite_pass'] is not None:  # noqa: E501
            query_params.append(('executedSatellitePass', local_var_params['executed_satellite_pass']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'last_evaluated_item' in local_var_params and local_var_params['last_evaluated_item'] is not None:  # noqa: E501
            query_params.append(('lastEvaluatedItem', local_var_params['last_evaluated_item']))  # noqa: E501
        if 'page_size_limit' in local_var_params and local_var_params['page_size_limit'] is not None:  # noqa: E501
            query_params.append(('pageSizeLimit', local_var_params['page_size_limit']))  # noqa: E501
        if 'data_query' in local_var_params and local_var_params['data_query'] is not None:  # noqa: E501
            query_params.append(('dataQuery', local_var_params['data_query']))  # noqa: E501
        if 'projection_expression' in local_var_params and local_var_params['projection_expression'] is not None:  # noqa: E501
            query_params.append(('projectionExpression', local_var_params['projection_expression']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            200: "TelecommandsResultPage",
        }

        return self.api_client.call_api(
            '/satellite-telecommands', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_regular_telecommands(self, **kwargs):  # noqa: E501
        """Get Regular Telecommands  # noqa: E501

        This method returns a list of regular telecommands for a satellite that are not executed yet. Telecommands could be filtered by Satellite, FromTime, ToTime based on their requested pass AOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_regular_telecommands(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get telecommands
        :type satellite_id: str
        :param from_time: Filter to only return entries that were received after the specified time (inclusive)
        :type from_time: int
        :param to_time: Filter to only return entries that were received before the specified time (exclusive)
        :type to_time: int
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param data_query: Allows you to filter the data field using a query that supports the following comparison operations: '>' (greater than), '=='(equal to), '<'(less than), '>=' (greater than or equal to), '<=' (less than or equal to). Supported logical operators are 'and' and 'or'. Fields and values are case-sensitive. Example: fpHeader.SatId == 1 and (fpHeader.FuncId == 2 or fpHeader.FuncId == 3)
        :type data_query: str
        :param projection_expression: Allows you to specify a subset of attributes to be returned. By default, all attributes are returned. Projection expression supports all properties of the data field. Example: fpHeader.SatId, fpHeader.FuncId, data.types[0]
        :type projection_expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TelecommandsResultPage
        """
        kwargs['_return_http_data_only'] = True
        return self.get_regular_telecommands_with_http_info(**kwargs)  # noqa: E501

    def get_regular_telecommands_with_http_info(self, **kwargs):  # noqa: E501
        """Get Regular Telecommands  # noqa: E501

        This method returns a list of regular telecommands for a satellite that are not executed yet. Telecommands could be filtered by Satellite, FromTime, ToTime based on their requested pass AOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_regular_telecommands_with_http_info(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get telecommands
        :type satellite_id: str
        :param from_time: Filter to only return entries that were received after the specified time (inclusive)
        :type from_time: int
        :param to_time: Filter to only return entries that were received before the specified time (exclusive)
        :type to_time: int
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param data_query: Allows you to filter the data field using a query that supports the following comparison operations: '>' (greater than), '=='(equal to), '<'(less than), '>=' (greater than or equal to), '<=' (less than or equal to). Supported logical operators are 'and' and 'or'. Fields and values are case-sensitive. Example: fpHeader.SatId == 1 and (fpHeader.FuncId == 2 or fpHeader.FuncId == 3)
        :type data_query: str
        :param projection_expression: Allows you to specify a subset of attributes to be returned. By default, all attributes are returned. Projection expression supports all properties of the data field. Example: fpHeader.SatId, fpHeader.FuncId, data.types[0]
        :type projection_expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TelecommandsResultPage, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'satellite_id',
            'from_time',
            'to_time',
            'last_evaluated_item',
            'page_size_limit',
            'data_query',
            'projection_expression'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_regular_telecommands" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'satellite_id' in local_var_params and local_var_params['satellite_id'] is not None:  # noqa: E501
            query_params.append(('satelliteId', local_var_params['satellite_id']))  # noqa: E501
        if 'from_time' in local_var_params and local_var_params['from_time'] is not None:  # noqa: E501
            query_params.append(('fromTime', local_var_params['from_time']))  # noqa: E501
        if 'to_time' in local_var_params and local_var_params['to_time'] is not None:  # noqa: E501
            query_params.append(('toTime', local_var_params['to_time']))  # noqa: E501
        if 'last_evaluated_item' in local_var_params and local_var_params['last_evaluated_item'] is not None:  # noqa: E501
            query_params.append(('lastEvaluatedItem', local_var_params['last_evaluated_item']))  # noqa: E501
        if 'page_size_limit' in local_var_params and local_var_params['page_size_limit'] is not None:  # noqa: E501
            query_params.append(('pageSizeLimit', local_var_params['page_size_limit']))  # noqa: E501
        if 'data_query' in local_var_params and local_var_params['data_query'] is not None:  # noqa: E501
            query_params.append(('dataQuery', local_var_params['data_query']))  # noqa: E501
        if 'projection_expression' in local_var_params and local_var_params['projection_expression'] is not None:  # noqa: E501
            query_params.append(('projectionExpression', local_var_params['projection_expression']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            200: "TelecommandsResultPage",
        }

        return self.api_client.call_api(
            '/satellite-telecommands/pending-regular', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_telecommand_by_id(self, telecommand_id, **kwargs):  # noqa: E501
        """Get a Satellite Telecommand by ID  # noqa: E501

        This method returns a Satellite Telecommand by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_telecommand_by_id(telecommand_id, async_req=True)
        >>> result = thread.get()

        :param telecommand_id: ID of the Satellite Telecommand to get (required)
        :type telecommand_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Telecommand
        """
        kwargs['_return_http_data_only'] = True
        return self.get_telecommand_by_id_with_http_info(telecommand_id, **kwargs)  # noqa: E501

    def get_telecommand_by_id_with_http_info(self, telecommand_id, **kwargs):  # noqa: E501
        """Get a Satellite Telecommand by ID  # noqa: E501

        This method returns a Satellite Telecommand by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_telecommand_by_id_with_http_info(telecommand_id, async_req=True)
        >>> result = thread.get()

        :param telecommand_id: ID of the Satellite Telecommand to get (required)
        :type telecommand_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Telecommand, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'telecommand_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_telecommand_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'telecommand_id' is set
        if self.api_client.client_side_validation and ('telecommand_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['telecommand_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `telecommand_id` when calling `get_telecommand_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'telecommand_id' in local_var_params:
            path_params['telecommandId'] = local_var_params['telecommand_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            200: "Telecommand",
            403: "ErrorResponse",
            404: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/satellite-telecommands/{telecommandId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_time_tagged_telecommands(self, **kwargs):  # noqa: E501
        """Get TimeTagged Telecommands  # noqa: E501

        This method returns a list of time tagged telecommands for a satellite that are not executed yet. Telecommands could be filtered by Satellite, FromTime, ToTime based on their start of satellite command execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_time_tagged_telecommands(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get telecommands
        :type satellite_id: str
        :param from_time: Filter to only return entries that were received after the specified time (inclusive)
        :type from_time: int
        :param to_time: Filter to only return entries that were received before the specified time (exclusive)
        :type to_time: int
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param data_query: Allows you to filter the data field using a query that supports the following comparison operations: '>' (greater than), '=='(equal to), '<'(less than), '>=' (greater than or equal to), '<=' (less than or equal to). Supported logical operators are 'and' and 'or'. Fields and values are case-sensitive. Example: fpHeader.SatId == 1 and (fpHeader.FuncId == 2 or fpHeader.FuncId == 3)
        :type data_query: str
        :param projection_expression: Allows you to specify a subset of attributes to be returned. By default, all attributes are returned. Projection expression supports all properties of the data field. Example: fpHeader.SatId, fpHeader.FuncId, data.types[0]
        :type projection_expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TelecommandsResultPage
        """
        kwargs['_return_http_data_only'] = True
        return self.get_time_tagged_telecommands_with_http_info(**kwargs)  # noqa: E501

    def get_time_tagged_telecommands_with_http_info(self, **kwargs):  # noqa: E501
        """Get TimeTagged Telecommands  # noqa: E501

        This method returns a list of time tagged telecommands for a satellite that are not executed yet. Telecommands could be filtered by Satellite, FromTime, ToTime based on their start of satellite command execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_time_tagged_telecommands_with_http_info(async_req=True)
        >>> result = thread.get()

        :param satellite_id: Specifies the satellite for which to get telecommands
        :type satellite_id: str
        :param from_time: Filter to only return entries that were received after the specified time (inclusive)
        :type from_time: int
        :param to_time: Filter to only return entries that were received before the specified time (exclusive)
        :type to_time: int
        :param last_evaluated_item: Specified the ID of the last item that was returned from the last page
        :type last_evaluated_item: str
        :param page_size_limit: Specifies the maximum number of results per page. Defaults to 100
        :type page_size_limit: int
        :param data_query: Allows you to filter the data field using a query that supports the following comparison operations: '>' (greater than), '=='(equal to), '<'(less than), '>=' (greater than or equal to), '<=' (less than or equal to). Supported logical operators are 'and' and 'or'. Fields and values are case-sensitive. Example: fpHeader.SatId == 1 and (fpHeader.FuncId == 2 or fpHeader.FuncId == 3)
        :type data_query: str
        :param projection_expression: Allows you to specify a subset of attributes to be returned. By default, all attributes are returned. Projection expression supports all properties of the data field. Example: fpHeader.SatId, fpHeader.FuncId, data.types[0]
        :type projection_expression: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TelecommandsResultPage, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'satellite_id',
            'from_time',
            'to_time',
            'last_evaluated_item',
            'page_size_limit',
            'data_query',
            'projection_expression'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_time_tagged_telecommands" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'satellite_id' in local_var_params and local_var_params['satellite_id'] is not None:  # noqa: E501
            query_params.append(('satelliteId', local_var_params['satellite_id']))  # noqa: E501
        if 'from_time' in local_var_params and local_var_params['from_time'] is not None:  # noqa: E501
            query_params.append(('fromTime', local_var_params['from_time']))  # noqa: E501
        if 'to_time' in local_var_params and local_var_params['to_time'] is not None:  # noqa: E501
            query_params.append(('toTime', local_var_params['to_time']))  # noqa: E501
        if 'last_evaluated_item' in local_var_params and local_var_params['last_evaluated_item'] is not None:  # noqa: E501
            query_params.append(('lastEvaluatedItem', local_var_params['last_evaluated_item']))  # noqa: E501
        if 'page_size_limit' in local_var_params and local_var_params['page_size_limit'] is not None:  # noqa: E501
            query_params.append(('pageSizeLimit', local_var_params['page_size_limit']))  # noqa: E501
        if 'data_query' in local_var_params and local_var_params['data_query'] is not None:  # noqa: E501
            query_params.append(('dataQuery', local_var_params['data_query']))  # noqa: E501
        if 'projection_expression' in local_var_params and local_var_params['projection_expression'] is not None:  # noqa: E501
            query_params.append(('projectionExpression', local_var_params['projection_expression']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            200: "TelecommandsResultPage",
        }

        return self.api_client.call_api(
            '/satellite-telecommands/pending-time-tagged', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_telecommand_by_id(self, telecommand_id, telecommand, **kwargs):  # noqa: E501
        """Update a Satellite Telecommand  # noqa: E501

        This method updates a Satellite Telecommand by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_telecommand_by_id(telecommand_id, telecommand, async_req=True)
        >>> result = thread.get()

        :param telecommand_id: ID of the Satellite Telecommand to update (required)
        :type telecommand_id: str
        :param telecommand: (required)
        :type telecommand: Telecommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.update_telecommand_by_id_with_http_info(telecommand_id, telecommand, **kwargs)  # noqa: E501

    def update_telecommand_by_id_with_http_info(self, telecommand_id, telecommand, **kwargs):  # noqa: E501
        """Update a Satellite Telecommand  # noqa: E501

        This method updates a Satellite Telecommand by ID for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_telecommand_by_id_with_http_info(telecommand_id, telecommand, async_req=True)
        >>> result = thread.get()

        :param telecommand_id: ID of the Satellite Telecommand to update (required)
        :type telecommand_id: str
        :param telecommand: (required)
        :type telecommand: Telecommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'telecommand_id',
            'telecommand'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_telecommand_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'telecommand_id' is set
        if self.api_client.client_side_validation and ('telecommand_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['telecommand_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `telecommand_id` when calling `update_telecommand_by_id`")  # noqa: E501
        # verify the required parameter 'telecommand' is set
        if self.api_client.client_side_validation and ('telecommand' not in local_var_params or  # noqa: E501
                                                        local_var_params['telecommand'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `telecommand` when calling `update_telecommand_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'telecommand_id' in local_var_params:
            path_params['telecommandId'] = local_var_params['telecommand_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'telecommand' in local_var_params:
            body_params = local_var_params['telecommand']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['MyEnduroSat']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/satellite-telecommands/{telecommandId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
