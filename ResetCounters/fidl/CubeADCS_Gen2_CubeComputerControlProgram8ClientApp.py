# ********************************************************************************************
# * @file CubeADCS_Gen2_CubeComputerControlProgram8ClientApp.py
# * @brief MAC FP client Python implementation generator
# ********************************************************************************************
# * @version           interface CubeADCS_Gen2_CubeComputerControlProgram8 v6.0
# *
# * @copyright         (C) Copyright EnduroSat
# *
# *                    Contents and presentations are protected world-wide.
# *                    Any kind of using, copying etc. is prohibited without prior permission.
# *                    All rights - incl. industrial property rights - are reserved.
# *
# *-------------------------------------------------------------------------------------------
# * GENERATOR: org.endurosat.generators.macchiato.binders.Gen_Py v1.11
# *-------------------------------------------------------------------------------------------
# * !!! Please note that this code is fully GENERATED and shall not be manually modified as
# * all changes will be overwritten !!!
# ********************************************************************************************

from SerDesHelpers import SerDesHelpers

class FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8:
    def __init__(self, rawSerDesSupport : bool = False):
        self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID = 304
        self.rawSerDesSupport = rawSerDesSupport
        self.versionMajor=6
        self.versionMinor=0


        #
        # Response parsers map
        #
        self.responseParsersDict = {}
        self.responseParsersDict[0] = self.resp_setConfigDefaultModes
        self.responseParsersDict[1] = self.resp_setConfigMount
        self.responseParsersDict[2] = self.resp_setConfigMag0OrbitCal
        self.responseParsersDict[3] = self.resp_setConfigMag1OrbitCal
        self.responseParsersDict[4] = self.resp_setConfigAdcsController
        self.responseParsersDict[5] = self.resp_setConfigAdcsEstimator
        self.responseParsersDict[6] = self.resp_setConfigAdcsSatellite
        self.responseParsersDict[7] = self.resp_setConfigOrbitSatParams
        self.responseParsersDict[8] = self.resp_setConfigOrbitTargetParams
        self.responseParsersDict[9] = self.resp_setConfigNodeSelection
        self.responseParsersDict[10] = self.resp_setConfigActuatorRwl
        self.responseParsersDict[11] = self.resp_setConfigActuatorMtq
        self.responseParsersDict[12] = self.resp_setConfigMagSensingElement
        self.responseParsersDict[13] = self.resp_setConfigAsgp4
        self.responseParsersDict[14] = self.resp_setConMode
        self.responseParsersDict[15] = self.resp_setEstMode
        self.responseParsersDict[16] = self.resp_setOrbMode
        self.responseParsersDict[17] = self.resp_setAdcsRunMode
        self.responseParsersDict[18] = self.resp_setAdcsOpState
        self.responseParsersDict[19] = self.resp_setSimSensorRaw
        self.responseParsersDict[20] = self.resp_setOpenLoopCommandMtq
        self.responseParsersDict[21] = self.resp_setOpenLoopCommandRwl
        self.responseParsersDict[22] = self.resp_setOpenLoopCommandHxyzRW
        self.responseParsersDict[23] = self.resp_setReferenceRpy
        self.responseParsersDict[24] = self.resp_setReferenceTarget
        self.responseParsersDict[25] = self.resp_setReferenceIrcVector
        self.responseParsersDict[26] = self.resp_setReferenceFmcParam
        self.responseParsersDict[27] = self.resp_setDeployCommandMag
        self.responseParsersDict[28] = self.resp_setGnssSensorCmd
        self.responseParsersDict[29] = self.resp_setFileTransferSetup
        self.responseParsersDict[30] = self.resp_getConfigDefaultModes
        self.responseParsersDict[31] = self.resp_getConfigMount
        self.responseParsersDict[32] = self.resp_getConfigMag0OrbitCal
        self.responseParsersDict[33] = self.resp_getConfigMag1OrbitCal
        self.responseParsersDict[34] = self.resp_getConfigAdcsController
        self.responseParsersDict[35] = self.resp_getConfigAdcsEstimator
        self.responseParsersDict[36] = self.resp_getConfigAdcsSatellite
        self.responseParsersDict[37] = self.resp_getConfigOrbitSatParams
        self.responseParsersDict[38] = self.resp_getConfigOrbitTargetParams
        self.responseParsersDict[39] = self.resp_getConfigNodeSelection
        self.responseParsersDict[40] = self.resp_getConfigActuatorRwl
        self.responseParsersDict[41] = self.resp_getConfigActuatorMtq
        self.responseParsersDict[42] = self.resp_getConfigMagSensingElement
        self.responseParsersDict[43] = self.resp_getConfigAsgp4
        self.responseParsersDict[44] = self.resp_getConMode
        self.responseParsersDict[45] = self.resp_getEstMode
        self.responseParsersDict[46] = self.resp_getOrbMode
        self.responseParsersDict[47] = self.resp_getAdcsRunMode
        self.responseParsersDict[48] = self.resp_getAdcsOpState
        self.responseParsersDict[49] = self.resp_getSimSensorRaw
        self.responseParsersDict[50] = self.resp_getOpenLoopCommandMtq
        self.responseParsersDict[51] = self.resp_getOpenLoopCommandRwl
        self.responseParsersDict[52] = self.resp_getOpenLoopCommandHxyzRW
        self.responseParsersDict[53] = self.resp_getReferenceRpy
        self.responseParsersDict[54] = self.resp_getReferenceTarget
        self.responseParsersDict[55] = self.resp_getReferenceIrcVector
        self.responseParsersDict[56] = self.resp_getReferenceFmcParam
        self.responseParsersDict[57] = self.resp_getCubeNodePortMap
        self.responseParsersDict[58] = self.resp_getTlmHil
        self.responseParsersDict[59] = self.resp_getTlmExecutionPoint
        self.responseParsersDict[60] = self.resp_getTlmAsgp4
        self.responseParsersDict[61] = self.resp_getTlmNodeInitState
        self.responseParsersDict[62] = self.resp_getTlmLitefuforsHealth
        self.responseParsersDict[63] = self.resp_getFileTransferSetup
        self.responseParsersDict[64] = self.resp_getFileTransferStatus
        self.responseParsersDict[65] = self.resp_getFileInfo
        self.responseParsersDict[66] = self.resp_getTlmSensorRawCss
        self.responseParsersDict[67] = self.resp_getTlmSensorRawMag
        self.responseParsersDict[68] = self.resp_getTlmSensorRawGyro
        self.responseParsersDict[69] = self.resp_getTlmSensorRawRwl
        self.responseParsersDict[70] = self.resp_getTlmSensorCalFss
        self.responseParsersDict[71] = self.resp_getTlmSensorCalCss
        self.responseParsersDict[72] = self.resp_getTlmSensorCalMag
        self.responseParsersDict[73] = self.resp_getTlmSensorCalGyro
        self.responseParsersDict[74] = self.resp_getTlmSensorCalHss
        self.responseParsersDict[75] = self.resp_getTlmSensorCalStr
        self.responseParsersDict[76] = self.resp_getTlmSensorCalGnss
        self.responseParsersDict[77] = self.resp_getTlmSensorCalRwl
        self.responseParsersDict[78] = self.resp_getTlmModels
        self.responseParsersDict[79] = self.resp_getTlmEstimatorMain
        self.responseParsersDict[80] = self.resp_getTlmEstimatorBackup
        self.responseParsersDict[81] = self.resp_getTlmEstimatorMainHighRes
        self.responseParsersDict[82] = self.resp_getTlmController
        self.responseParsersDict[83] = self.resp_getTlmGnssRaw
        self.responseParsersDict[84] = self.resp_getTlmExtSensorRaw
        self.responseParsersDict[85] = self.resp_getTlmStrPst3sRaw
        self.responseParsersDict[86] = self.resp_getTlmFssCubeSenseSunRaw
        self.responseParsersDict[87] = self.resp_getTlmHssCubeSenseEarthRaw
        self.responseParsersDict[88] = self.resp_getTlmRwlNssRwlRaw
        self.responseParsersDict[89] = self.resp_getTlmStrCubeStarRaw
        self.responseParsersDict[90] = self.resp_getTlmGyrLitefuforsRaw
        self.responseParsersDict[91] = self.resp_getTlmStrCubeAurigaRaw
        self.responseParsersDict[92] = self.resp_getTlmAcpExecution
        self.responseParsersDict[93] = self.resp_getTlmTorquerCurrents
        self.responseParsersDict[94] = self.resp_getTlmCubeComputerHealth
        self.responseParsersDict[95] = self.resp_getTlmFssCubeSenseSunHealth
        self.responseParsersDict[96] = self.resp_getTlmHssCubeSenseEarthHealth
        self.responseParsersDict[97] = self.resp_getTlmCubeMagHealth
        self.responseParsersDict[98] = self.resp_getTlmRwlHealth
        self.responseParsersDict[99] = self.resp_getTlmStrPst3sHealth
        self.responseParsersDict[100] = self.resp_getTlmNssRwlHealth
        self.responseParsersDict[101] = self.resp_getTlmStrHealth
        self.responseParsersDict[102] = self.resp_getTlmGnssUartStatus
        self.responseParsersDict[103] = self.resp_getTlmStrAurigaHealth

    class enum_CmdTargetNode:
        CMDTARGETNODE_NODEINVALID = 0
        CMDTARGETNODE_NODECOMPUTER = 1
    
        ValuesDict = {
            CMDTARGETNODE_NODEINVALID : 'CMDTARGETNODE_NODEINVALID', 
            CMDTARGETNODE_NODECOMPUTER : 'CMDTARGETNODE_NODECOMPUTER'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_AdcsRunModeSelect:
        CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSOFF = 0
        CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSENABLED = 1
        CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSTRIGGERED = 2
        CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSSIMULATION = 3
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSOFF : 'CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSOFF', 
            CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSENABLED : 'CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSENABLED', 
            CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSTRIGGERED : 'CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSTRIGGERED', 
            CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSSIMULATION : 'CUBECOMPUTERCONTROLPROGRAM8_ADCSRUNMODESELECT_ADCSSIMULATION'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsRunModeSelect()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsRunModeSelect.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsRunModeSelect.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_AdcsOpStateSelect:
        CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATEMANUAL = 0
        CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATEAUTO = 1
        CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATESAFE = 2
        CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATEFAULT = 3
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATEMANUAL : 'CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATEMANUAL', 
            CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATEAUTO : 'CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATEAUTO', 
            CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATESAFE : 'CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATESAFE', 
            CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATEFAULT : 'CUBECOMPUTERCONTROLPROGRAM8_ADCSOPSTATESELECT_OPSTATEFAULT'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsOpStateSelect()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsOpStateSelect.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsOpStateSelect.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_EstModeSelect:
        CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTNONE = 0
        CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTGYRO = 1
        CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTMAGRKF = 2
        CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTPITCHRKF = 3
        CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTTRIAD = 4
        CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTFULLEKF = 5
        CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTGYROEKF = 6
        CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTUSER = 100
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTNONE : 'CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTNONE', 
            CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTGYRO : 'CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTGYRO', 
            CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTMAGRKF : 'CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTMAGRKF', 
            CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTPITCHRKF : 'CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTPITCHRKF', 
            CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTTRIAD : 'CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTTRIAD', 
            CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTFULLEKF : 'CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTFULLEKF', 
            CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTGYROEKF : 'CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTGYROEKF', 
            CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTUSER : 'CUBECOMPUTERCONTROLPROGRAM8_ESTMODESELECT_ESTUSER'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_ConModeSelect:
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONNONE = 0
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONBDOT = 1
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYSPIN = 2
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONBDOT3 = 3
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONDETUMBLE = 4
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNYSPIN = 5
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONZSPIN = 6
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNZSPIN = 7
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONGGBOOM = 8
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONGGSUN = 9
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYWHEELINIT = 10
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYWHEEL = 11
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONXYZWHEEL = 12
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNTRACK = 13
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONTGTTRACK = 14
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONTGTSTEER = 15
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONGNDTRACK = 16
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONIRCTRACK = 17
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONMOONTRACK = 18
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSATTRACK = 19
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWSUN = 20
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWTARGET = 21
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONROLLSUN = 22
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONROLLTARGET = 23
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWTARGETBEST = 24
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONFMCTARGET = 25
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWSUNSPIN = 26
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNDETUMBLE = 27
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONASTROSTEER = 28
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNPAYLOAD = 29
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSTOPRW = 50
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONHXYZRW = 51
        CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONUSER = 100
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONNONE : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONNONE', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONBDOT : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONBDOT', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYSPIN : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYSPIN', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONBDOT3 : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONBDOT3', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONDETUMBLE : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONDETUMBLE', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNYSPIN : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNYSPIN', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONZSPIN : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONZSPIN', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNZSPIN : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNZSPIN', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONGGBOOM : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONGGBOOM', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONGGSUN : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONGGSUN', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYWHEELINIT : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYWHEELINIT', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYWHEEL : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYWHEEL', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONXYZWHEEL : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONXYZWHEEL', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNTRACK : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNTRACK', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONTGTTRACK : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONTGTTRACK', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONTGTSTEER : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONTGTSTEER', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONGNDTRACK : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONGNDTRACK', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONIRCTRACK : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONIRCTRACK', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONMOONTRACK : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONMOONTRACK', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSATTRACK : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSATTRACK', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWSUN : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWSUN', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWTARGET : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWTARGET', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONROLLSUN : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONROLLSUN', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONROLLTARGET : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONROLLTARGET', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWTARGETBEST : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWTARGETBEST', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONFMCTARGET : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONFMCTARGET', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWSUNSPIN : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONYAWSUNSPIN', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNDETUMBLE : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNDETUMBLE', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONASTROSTEER : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONASTROSTEER', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNPAYLOAD : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSUNPAYLOAD', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSTOPRW : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONSTOPRW', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONHXYZRW : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONHXYZRW', 
            CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONUSER : 'CUBECOMPUTERCONTROLPROGRAM8_CONMODESELECT_CONUSER'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_OrbModeSelect:
        CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBTLE = 0
        CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBTLEGNSS = 1
        CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBASGP4 = 2
        CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBASGP4GNSS = 3
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBTLE : 'CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBTLE', 
            CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBTLEGNSS : 'CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBTLEGNSS', 
            CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBASGP4 : 'CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBASGP4', 
            CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBASGP4GNSS : 'CUBECOMPUTERCONTROLPROGRAM8_ORBMODESELECT_ORBASGP4GNSS'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OrbModeSelect()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OrbModeSelect.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OrbModeSelect.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_NavSource:
        CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVGNSSNOW = 0
        CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVGNSSPROPAGATED = 1
        CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVTLE = 2
        CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVASGP4TLE = 3
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVGNSSNOW : 'CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVGNSSNOW', 
            CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVGNSSPROPAGATED : 'CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVGNSSPROPAGATED', 
            CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVTLE : 'CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVTLE', 
            CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVASGP4TLE : 'CUBECOMPUTERCONTROLPROGRAM8_NAVSOURCE_NAVASGP4TLE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NavSource()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NavSource.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NavSource.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_FmcStage:
        CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCINACTIVE = 0
        CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCWAITING = 1
        CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCPREPARE = 2
        CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCINITIALPITCH = 3
        CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCRWRAMPUP = 4
        CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCSCAN = 5
        CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCRWRAMPDOWN = 6
        CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCSTOPPING = 7
        CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCENDED = 8
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCINACTIVE : 'CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCINACTIVE', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCWAITING : 'CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCWAITING', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCPREPARE : 'CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCPREPARE', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCINITIALPITCH : 'CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCINITIALPITCH', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCRWRAMPUP : 'CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCRWRAMPUP', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCSCAN : 'CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCSCAN', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCRWRAMPDOWN : 'CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCRWRAMPDOWN', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCSTOPPING : 'CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCSTOPPING', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCENDED : 'CUBECOMPUTERCONTROLPROGRAM8_FMCSTAGE_FMCENDED'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcStage()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcStage.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcStage.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_VecSelect:
        CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECMAG = 0
        CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECFSS = 1
        CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECCSS = 2
        CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECHSS = 3
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECMAG : 'CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECMAG', 
            CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECFSS : 'CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECFSS', 
            CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECCSS : 'CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECCSS', 
            CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECHSS : 'CUBECOMPUTERCONTROLPROGRAM8_VECSELECT_VECHSS'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_VecSelect()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_VecSelect.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_VecSelect.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_FmcFactor:
        CUBECOMPUTERCONTROLPROGRAM8_FMCFACTOR_FMC2 = 0
        CUBECOMPUTERCONTROLPROGRAM8_FMCFACTOR_FMC4 = 1
        CUBECOMPUTERCONTROLPROGRAM8_FMCFACTOR_FMC8 = 2
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_FMCFACTOR_FMC2 : 'CUBECOMPUTERCONTROLPROGRAM8_FMCFACTOR_FMC2', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCFACTOR_FMC4 : 'CUBECOMPUTERCONTROLPROGRAM8_FMCFACTOR_FMC4', 
            CUBECOMPUTERCONTROLPROGRAM8_FMCFACTOR_FMC8 : 'CUBECOMPUTERCONTROLPROGRAM8_FMCFACTOR_FMC8'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcFactor()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcFactor.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcFactor.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_AxisSelect:
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNOTUSED = 0
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPOSX = 1
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNEGX = 2
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPOSY = 3
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNEGY = 4
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPOSZ = 5
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNEGZ = 6
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDA = 7
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDB = 8
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDC = 9
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDD = 10
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDA = 11
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDB = 12
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDC = 13
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDD = 14
        CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISSKEW = 15
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNOTUSED : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNOTUSED', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPOSX : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPOSX', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNEGX : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNEGX', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPOSY : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPOSY', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNEGY : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNEGY', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPOSZ : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPOSZ', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNEGZ : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISNEGZ', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDA : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDA', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDB : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDB', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDC : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDC', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDD : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISTHDD', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDA : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDA', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDB : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDB', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDC : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDC', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDD : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISPMDD', 
            CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISSKEW : 'CUBECOMPUTERCONTROLPROGRAM8_AXISSELECT_AXISSKEW'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_RwlScheme:
        CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMENOWHEELS = 0
        CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMEYMOMENTUM = 1
        CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMEXYZ = 2
        CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMEPYRAMID = 3
        CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMETETRAHEDRAL = 4
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMENOWHEELS : 'CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMENOWHEELS', 
            CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMEYMOMENTUM : 'CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMEYMOMENTUM', 
            CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMEXYZ : 'CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMEXYZ', 
            CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMEPYRAMID : 'CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMEPYRAMID', 
            CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMETETRAHEDRAL : 'CUBECOMPUTERCONTROLPROGRAM8_RWLSCHEME_RWLSCHEMETETRAHEDRAL'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlScheme()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlScheme.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlScheme.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_RwlFailId:
        CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAILNONE = 0
        CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL0 = 1
        CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL1 = 2
        CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL2 = 3
        CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL3 = 4
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAILNONE : 'CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAILNONE', 
            CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL0 : 'CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL0', 
            CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL1 : 'CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL1', 
            CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL2 : 'CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL2', 
            CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL3 : 'CUBECOMPUTERCONTROLPROGRAM8_RWLFAILID_RWLFAIL3'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlFailId()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlFailId.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlFailId.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_AcpExecutionPoint:
        CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTINIT = 0
        CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTIDLE = 1
        CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTSENSORCOMMS = 2
        CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTADCSESTIMATION = 3
        CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTADCSCONTROLLER = 4
        CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTWHEELCOMMS = 5
        CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTADCSMODELS = 6
        CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTHOUSEKEEPING = 7
        CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTTLMLOG = 8
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTINIT : 'CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTINIT', 
            CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTIDLE : 'CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTIDLE', 
            CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTSENSORCOMMS : 'CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTSENSORCOMMS', 
            CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTADCSESTIMATION : 'CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTADCSESTIMATION', 
            CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTADCSCONTROLLER : 'CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTADCSCONTROLLER', 
            CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTWHEELCOMMS : 'CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTWHEELCOMMS', 
            CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTADCSMODELS : 'CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTADCSMODELS', 
            CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTHOUSEKEEPING : 'CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTHOUSEKEEPING', 
            CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTTLMLOG : 'CUBECOMPUTERCONTROLPROGRAM8_ACPEXECUTIONPOINT_EXECPOINTTLMLOG'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AcpExecutionPoint()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AcpExecutionPoint.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AcpExecutionPoint.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_MtqPolarity:
        CUBECOMPUTERCONTROLPROGRAM8_MTQPOLARITY_MTQOFF = 0
        CUBECOMPUTERCONTROLPROGRAM8_MTQPOLARITY_MTQPOSITIVE = 1
        CUBECOMPUTERCONTROLPROGRAM8_MTQPOLARITY_MTQNEGATIVE = 2
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_MTQPOLARITY_MTQOFF : 'CUBECOMPUTERCONTROLPROGRAM8_MTQPOLARITY_MTQOFF', 
            CUBECOMPUTERCONTROLPROGRAM8_MTQPOLARITY_MTQPOSITIVE : 'CUBECOMPUTERCONTROLPROGRAM8_MTQPOLARITY_MTQPOSITIVE', 
            CUBECOMPUTERCONTROLPROGRAM8_MTQPOLARITY_MTQNEGATIVE : 'CUBECOMPUTERCONTROLPROGRAM8_MTQPOLARITY_MTQNEGATIVE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MtqPolarity()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MtqPolarity.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MtqPolarity.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_InitState:
        CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITOFF = 0
        CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITJUMP = 1
        CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITSETUP = 2
        CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITDONE = 3
        CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITPASS = 4
        CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITUPGRADE = 5
        CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITMAX = 6
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITOFF : 'CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITOFF', 
            CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITJUMP : 'CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITJUMP', 
            CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITSETUP : 'CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITSETUP', 
            CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITDONE : 'CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITDONE', 
            CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITPASS : 'CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITPASS', 
            CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITUPGRADE : 'CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITUPGRADE', 
            CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITMAX : 'CUBECOMPUTERCONTROLPROGRAM8_INITSTATE_INITMAX'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_CqAssign:
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNNONE = 0
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNSTR0 = 1
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNSTR1 = 2
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL0 = 3
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL1 = 4
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL2 = 5
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL3 = 6
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNGYRX = 7
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNGYRY = 8
        CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNGYRZ = 9
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNNONE : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNNONE', 
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNSTR0 : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNSTR0', 
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNSTR1 : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNSTR1', 
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL0 : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL0', 
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL1 : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL1', 
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL2 : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL2', 
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL3 : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNRWL3', 
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNGYRX : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNGYRX', 
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNGYRY : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNGYRY', 
            CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNGYRZ : 'CUBECOMPUTERCONTROLPROGRAM8_CQASSIGN_ASSIGNGYRZ'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_Pst3sVersion:
        CUBECOMPUTERCONTROLPROGRAM8_PST3SVERSION_PST3SVERSIONG2 = 0
        CUBECOMPUTERCONTROLPROGRAM8_PST3SVERSION_PST3SVERSIONH3 = 1
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_PST3SVERSION_PST3SVERSIONG2 : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SVERSION_PST3SVERSIONG2', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SVERSION_PST3SVERSIONH3 : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SVERSION_PST3SVERSIONH3'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sVersion()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sVersion.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sVersion.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_Pst3sDynamicMode:
        CUBECOMPUTERCONTROLPROGRAM8_PST3SDYNAMICMODE_DYNAMICMODEINVALID = 0
        CUBECOMPUTERCONTROLPROGRAM8_PST3SDYNAMICMODE_DYNAMICMODEHIGH = 1
        CUBECOMPUTERCONTROLPROGRAM8_PST3SDYNAMICMODE_DYNAMICMODELOW = 2
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_PST3SDYNAMICMODE_DYNAMICMODEINVALID : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SDYNAMICMODE_DYNAMICMODEINVALID', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SDYNAMICMODE_DYNAMICMODEHIGH : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SDYNAMICMODE_DYNAMICMODEHIGH', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SDYNAMICMODE_DYNAMICMODELOW : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SDYNAMICMODE_DYNAMICMODELOW'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDynamicMode()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDynamicMode.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDynamicMode.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_Pst3sSaaWorkingMode:
        CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAAINVALID = 0
        CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAAOFF = 1
        CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAATRACKING = 2
        CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAACAPTURE = 3
        CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAAALL = 4
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAAINVALID : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAAINVALID', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAAOFF : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAAOFF', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAATRACKING : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAATRACKING', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAACAPTURE : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAACAPTURE', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAAALL : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SSAAWORKINGMODE_SAAALL'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSaaWorkingMode()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSaaWorkingMode.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSaaWorkingMode.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_Pst3sOperatingModes:
        CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_MODEINVALID = 0
        CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_NORMALMODE = 1
        CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_FIXEDTHRESHOLD = 2
        CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_SELFTEST = 3
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_MODEINVALID : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_MODEINVALID', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_NORMALMODE : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_NORMALMODE', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_FIXEDTHRESHOLD : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_FIXEDTHRESHOLD', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_SELFTEST : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SOPERATINGMODES_SELFTEST'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sOperatingModes()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sOperatingModes.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sOperatingModes.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState:
        CUBECOMPUTERCONTROLPROGRAM8_PST3SQUATERNIONFILTERINGGETSTATE_QFILTERINGGETINVALID = 0
        CUBECOMPUTERCONTROLPROGRAM8_PST3SQUATERNIONFILTERINGGETSTATE_QFILTERINGGETOFF = 1
        CUBECOMPUTERCONTROLPROGRAM8_PST3SQUATERNIONFILTERINGGETSTATE_QFILTERINGGETON = 2
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_PST3SQUATERNIONFILTERINGGETSTATE_QFILTERINGGETINVALID : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SQUATERNIONFILTERINGGETSTATE_QFILTERINGGETINVALID', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SQUATERNIONFILTERINGGETSTATE_QFILTERINGGETOFF : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SQUATERNIONFILTERINGGETSTATE_QFILTERINGGETOFF', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SQUATERNIONFILTERINGGETSTATE_QFILTERINGGETON : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SQUATERNIONFILTERINGGETSTATE_QFILTERINGGETON'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_Pst3sSelfTestResult:
        CUBECOMPUTERCONTROLPROGRAM8_PST3SSELFTESTRESULT_CORRECT = 0
        CUBECOMPUTERCONTROLPROGRAM8_PST3SSELFTESTRESULT_ERROR = 1
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_PST3SSELFTESTRESULT_CORRECT : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SSELFTESTRESULT_CORRECT', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SSELFTESTRESULT_ERROR : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SSELFTESTRESULT_ERROR'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_Pst3sDataValid:
        CUBECOMPUTERCONTROLPROGRAM8_PST3SDATAVALID_GESTUREVALID = 0
        CUBECOMPUTERCONTROLPROGRAM8_PST3SDATAVALID_ATTITUDEVALID = 1
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_PST3SDATAVALID_GESTUREVALID : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SDATAVALID_GESTUREVALID', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SDATAVALID_ATTITUDEVALID : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SDATAVALID_ATTITUDEVALID'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDataValid()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDataValid.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDataValid.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_Pst3sExtImageState:
        CUBECOMPUTERCONTROLPROGRAM8_PST3SEXTIMAGESTATE_IMAGEINVALID = 0
        CUBECOMPUTERCONTROLPROGRAM8_PST3SEXTIMAGESTATE_IMAGEOFF = 1
        CUBECOMPUTERCONTROLPROGRAM8_PST3SEXTIMAGESTATE_IMAGEON = 2
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_PST3SEXTIMAGESTATE_IMAGEINVALID : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SEXTIMAGESTATE_IMAGEINVALID', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SEXTIMAGESTATE_IMAGEOFF : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SEXTIMAGESTATE_IMAGEOFF', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SEXTIMAGESTATE_IMAGEON : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SEXTIMAGESTATE_IMAGEON'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sExtImageState()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sExtImageState.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sExtImageState.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_Pst3sRateQuality:
        CUBECOMPUTERCONTROLPROGRAM8_PST3SRATEQUALITY_RATEINVALID = 0
        CUBECOMPUTERCONTROLPROGRAM8_PST3SRATEQUALITY_ESTIMATED = 1
        CUBECOMPUTERCONTROLPROGRAM8_PST3SRATEQUALITY_PRECISE = 2
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_PST3SRATEQUALITY_RATEINVALID : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SRATEQUALITY_RATEINVALID', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SRATEQUALITY_ESTIMATED : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SRATEQUALITY_ESTIMATED', 
            CUBECOMPUTERCONTROLPROGRAM8_PST3SRATEQUALITY_PRECISE : 'CUBECOMPUTERCONTROLPROGRAM8_PST3SRATEQUALITY_PRECISE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sRateQuality()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sRateQuality.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sRateQuality.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_SunDetectResult:
        CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNDETSTARTUP = 0
        CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNNODETECT = 1
        CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNDETPENDING = 2
        CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNNOTFOUND = 6
        CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNSUCCESS = 7
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNDETSTARTUP : 'CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNDETSTARTUP', 
            CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNNODETECT : 'CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNNODETECT', 
            CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNDETPENDING : 'CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNDETPENDING', 
            CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNNOTFOUND : 'CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNNOTFOUND', 
            CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNSUCCESS : 'CUBECOMPUTERCONTROLPROGRAM8_SUNDETECTRESULT_SUNSUCCESS'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_SunCaptureResult:
        CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPSTARTUP = 0
        CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPPENDING = 1
        CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPTURESUCCESSNORMAL = 2
        CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNTIMEOUT = 3
        CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNSRAMERR = 4
        CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPTURESUCCESSFLIPPED = 5
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPSTARTUP : 'CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPSTARTUP', 
            CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPPENDING : 'CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPPENDING', 
            CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPTURESUCCESSNORMAL : 'CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPTURESUCCESSNORMAL', 
            CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNTIMEOUT : 'CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNTIMEOUT', 
            CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNSRAMERR : 'CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNSRAMERR', 
            CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPTURESUCCESSFLIPPED : 'CUBECOMPUTERCONTROLPROGRAM8_SUNCAPTURERESULT_SUNCAPTURESUCCESSFLIPPED'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_EarthDetectResult:
        CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHDETSTARTUP = 0
        CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHDETPENDING = 1
        CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHNOHORIZON = 2
        CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHTOOFEWEDGES = 3
        CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHBADFIT = 4
        CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHSUCCESS = 5
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHDETSTARTUP : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHDETSTARTUP', 
            CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHDETPENDING : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHDETPENDING', 
            CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHNOHORIZON : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHNOHORIZON', 
            CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHTOOFEWEDGES : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHTOOFEWEDGES', 
            CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHBADFIT : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHBADFIT', 
            CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHSUCCESS : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHDETECTRESULT_EARTHSUCCESS'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthDetectResult()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthDetectResult.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthDetectResult.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_EarthCaptureResult:
        CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPSTARTUP = 0
        CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPPENDING = 1
        CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPSUCCESS = 2
        CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPTIMEOUT = 3
        CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPERROR = 4
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPSTARTUP : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPSTARTUP', 
            CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPPENDING : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPPENDING', 
            CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPSUCCESS : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPSUCCESS', 
            CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPTIMEOUT : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPTIMEOUT', 
            CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPERROR : 'CUBECOMPUTERCONTROLPROGRAM8_EARTHCAPTURERESULT_EARTHCAPERROR'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthCaptureResult()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthCaptureResult.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthCaptureResult.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_StarCaptureStatus:
        CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTURESTARTUP = 0
        CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREPENDING = 1
        CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREBUSY = 2
        CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREDONE = 3
        CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREERROR = 4
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTURESTARTUP : 'CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTURESTARTUP', 
            CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREPENDING : 'CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREPENDING', 
            CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREBUSY : 'CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREBUSY', 
            CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREDONE : 'CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREDONE', 
            CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREERROR : 'CUBECOMPUTERCONTROLPROGRAM8_STARCAPTURESTATUS_STARCAPTUREERROR'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarCaptureStatus()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarCaptureStatus.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarCaptureStatus.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_StarDetectStatus:
        CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTSTARTUP = 0
        CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTPENDING = 1
        CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTBUSY = 2
        CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTABORT = 3
        CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTDONE = 4
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTSTARTUP : 'CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTSTARTUP', 
            CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTPENDING : 'CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTPENDING', 
            CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTBUSY : 'CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTBUSY', 
            CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTABORT : 'CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTABORT', 
            CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTDONE : 'CUBECOMPUTERCONTROLPROGRAM8_STARDETECTSTATUS_STARDETECTDONE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarDetectStatus()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarDetectStatus.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarDetectStatus.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_StarIdStatus:
        CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDSTARTUP = 0
        CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDPENDING = 1
        CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDBUSY = 2
        CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDABORT = 3
        CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDOUTOFMEM = 4
        CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDTOOFEW = 5
        CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDTRACKERR = 6
        CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDDONE = 7
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDSTARTUP : 'CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDSTARTUP', 
            CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDPENDING : 'CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDPENDING', 
            CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDBUSY : 'CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDBUSY', 
            CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDABORT : 'CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDABORT', 
            CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDOUTOFMEM : 'CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDOUTOFMEM', 
            CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDTOOFEW : 'CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDTOOFEW', 
            CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDTRACKERR : 'CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDTRACKERR', 
            CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDDONE : 'CUBECOMPUTERCONTROLPROGRAM8_STARIDSTATUS_STARIDDONE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarIdStatus()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarIdStatus.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarIdStatus.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_AurigaLibStateVal:
        CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_INITIALIZATION = 0
        CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_STANDBY = 1
        CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_SELFTEST = 2
        CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_PHOTOMODE = 3
        CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_TRACKING = 4
        CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_ARMMODE = 5
        CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_AAMMODE = 6
        CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_ATMMODE = 7
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_INITIALIZATION : 'CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_INITIALIZATION', 
            CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_STANDBY : 'CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_STANDBY', 
            CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_SELFTEST : 'CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_SELFTEST', 
            CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_PHOTOMODE : 'CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_PHOTOMODE', 
            CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_TRACKING : 'CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_TRACKING', 
            CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_ARMMODE : 'CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_ARMMODE', 
            CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_AAMMODE : 'CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_AAMMODE', 
            CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_ATMMODE : 'CUBECOMPUTERCONTROLPROGRAM8_AURIGALIBSTATEVAL_ATMMODE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AurigaLibStateVal()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AurigaLibStateVal.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AurigaLibStateVal.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_OhStateVal:
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEOFF = 0
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEWAITON = 1
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEINITTEMPO = 2
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATECHECK = 3
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATECONFIG = 4
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATESTANDBY = 5
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEACQFF = 6
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEACQHW = 7
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEFIRSTTRACK = 8
        CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATETRACKING = 9
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEOFF : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEOFF', 
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEWAITON : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEWAITON', 
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEINITTEMPO : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEINITTEMPO', 
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATECHECK : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATECHECK', 
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATECONFIG : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATECONFIG', 
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATESTANDBY : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATESTANDBY', 
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEACQFF : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEACQFF', 
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEACQHW : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEACQHW', 
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEFIRSTTRACK : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATEFIRSTTRACK', 
            CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATETRACKING : 'CUBECOMPUTERCONTROLPROGRAM8_OHSTATEVAL_OHSTATETRACKING'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_MagSensingElementSelect:
        CUBECOMPUTERCONTROLPROGRAM8_MAGSENSINGELEMENTSELECT_MAGPRIMARY = 0
        CUBECOMPUTERCONTROLPROGRAM8_MAGSENSINGELEMENTSELECT_MAGREDUNDANT = 1
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_MAGSENSINGELEMENTSELECT_MAGPRIMARY : 'CUBECOMPUTERCONTROLPROGRAM8_MAGSENSINGELEMENTSELECT_MAGPRIMARY', 
            CUBECOMPUTERCONTROLPROGRAM8_MAGSENSINGELEMENTSELECT_MAGREDUNDANT : 'CUBECOMPUTERCONTROLPROGRAM8_MAGSENSINGELEMENTSELECT_MAGREDUNDANT'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MagSensingElementSelect()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MagSensingElementSelect.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MagSensingElementSelect.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_FtpOpCode:
        CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPNONE = 0
        CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPCANCEL = 1
        CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPUPLOAD = 2
        CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPUPGRADE = 3
        CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPERASE = 4
        CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPINFO = 5
        CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPFORMAT = 6
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPNONE : 'CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPNONE', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPCANCEL : 'CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPCANCEL', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPUPLOAD : 'CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPUPLOAD', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPUPGRADE : 'CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPUPGRADE', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPERASE : 'CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPERASE', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPINFO : 'CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPINFO', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPFORMAT : 'CUBECOMPUTERCONTROLPROGRAM8_FTPOPCODE_FTPFORMAT'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpOpCode()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpOpCode.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpOpCode.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_FtpFiles:
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_FILEINVALID = 0
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_BASEBLCCBIN = 1
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_BASEBLR5SBBIN = 2
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_BASEBL52BIN = 3
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELBIN = 4
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARBIN = 5
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSEBIN = 6
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGDEPLOYBIN = 7
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGCOMPACTBIN = 8
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEAURIGABIN = 9
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEIRBIN = 10
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODESLTBIN = 11
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEPST3SBIN = 12
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLBIN = 13
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG0 = 14
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG1 = 15
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG2 = 16
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG3 = 17
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG4 = 18
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG0 = 19
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG1 = 20
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG2 = 21
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG3 = 22
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG0 = 23
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG1 = 24
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG2 = 25
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG3 = 26
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGDEPLOYCFG0 = 27
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGDEPLOYCFG1 = 28
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGCOMPACTCFG0 = 29
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGCOMPACTCFG1 = 30
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEAURIGACFG0 = 31
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEAURIGACFG1 = 32
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEIRCFG0 = 33
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEIRCFG1 = 34
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODESLTCFG0 = 35
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEPST3SCFG0 = 36
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEPST3SCFG1 = 37
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG0 = 38
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG1 = 39
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG2 = 40
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG3 = 41
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADPST3SBIN = 42
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADPST3SCFG0 = 43
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADNSSRWLBIN = 44
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADNSSRWLCFG0 = 45
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADLITEFUFORSBIN = 46
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADLITEFUFORSCFG0 = 47
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADLITEFUFORSCFG1 = 48
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_FILEINVALID : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_FILEINVALID', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_BASEBLCCBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_BASEBLCCBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_BASEBLR5SBBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_BASEBLR5SBBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_BASEBL52BIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_BASEBL52BIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSEBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSEBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGDEPLOYBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGDEPLOYBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGCOMPACTBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGCOMPACTBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEAURIGABIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEAURIGABIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEIRBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEIRBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODESLTBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODESLTBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEPST3SBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEPST3SBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG1', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG2 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG2', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG3 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG3', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG4 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEWHEELCFG4', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG1', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG2 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG2', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG3 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESTARCFG3', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG1', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG2 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG2', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG3 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBESENSECFG3', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGDEPLOYCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGDEPLOYCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGDEPLOYCFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGDEPLOYCFG1', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGCOMPACTCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGCOMPACTCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGCOMPACTCFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEMAGCOMPACTCFG1', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEAURIGACFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEAURIGACFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEAURIGACFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEAURIGACFG1', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEIRCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEIRCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEIRCFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBEIRCFG1', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODESLTCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODESLTCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEPST3SCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEPST3SCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEPST3SCFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEPST3SCFG1', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG1', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG2 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG2', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG3 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODENSSRWLCFG3', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADPST3SBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADPST3SBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADPST3SCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADPST3SCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADNSSRWLBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADNSSRWLBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADNSSRWLCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADNSSRWLCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADLITEFUFORSBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADLITEFUFORSBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADLITEFUFORSCFG0 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADLITEFUFORSCFG0', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADLITEFUFORSCFG1 : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILES_CUBENODEQUADLITEFUFORSCFG1'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFiles()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFiles.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFiles.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_FtpState:
        CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_IDLE = 0
        CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_INIT = 1
        CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_BUSY = 2
        CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_LOCKED = 3
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_IDLE : 'CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_IDLE', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_INIT : 'CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_INIT', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_BUSY : 'CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_BUSY', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_LOCKED : 'CUBECOMPUTERCONTROLPROGRAM8_FTPSTATE_LOCKED'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpState()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpState.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpState.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_FtpUpgradeState:
        CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEIDLE = 0
        CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEINIT = 1
        CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADETRANS = 2
        CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEINITBIN = 3
        CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEINITCFG = 4
        CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEBUSYBIN = 5
        CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEBUSYCFG = 6
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEIDLE : 'CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEIDLE', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEINIT : 'CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEINIT', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADETRANS : 'CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADETRANS', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEINITBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEINITBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEINITCFG : 'CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEINITCFG', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEBUSYBIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEBUSYBIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEBUSYCFG : 'CUBECOMPUTERCONTROLPROGRAM8_FTPUPGRADESTATE_UPGRADEBUSYCFG'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpUpgradeState()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpUpgradeState.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpUpgradeState.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_FtpBackend:
        CUBECOMPUTERCONTROLPROGRAM8_FTPBACKEND_BACKENDFRAM = 0
        CUBECOMPUTERCONTROLPROGRAM8_FTPBACKEND_BACKENDNODE = 1
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_FTPBACKEND_BACKENDFRAM : 'CUBECOMPUTERCONTROLPROGRAM8_FTPBACKEND_BACKENDFRAM', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPBACKEND_BACKENDNODE : 'CUBECOMPUTERCONTROLPROGRAM8_FTPBACKEND_BACKENDNODE'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpBackend()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpBackend.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpBackend.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_FtpFileType:
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_BIN = 0
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_CFG = 1
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_LOG = 2
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_PHOTO = 3
        CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_GENERAL = 4
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_BIN : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_BIN', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_CFG : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_CFG', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_LOG : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_LOG', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_PHOTO : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_PHOTO', 
            CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_GENERAL : 'CUBECOMPUTERCONTROLPROGRAM8_FTPFILETYPE_GENERAL'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFileType()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFileType.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFileType.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CubeComputerControlProgram8_NodePort:
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTNONE = 0
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL1 = 1
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL2 = 2
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL3 = 3
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL4 = 4
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR1 = 5
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR2 = 6
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR3 = 7
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR4 = 8
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR5 = 9
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR6 = 10
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR7 = 11
        CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR8 = 12
    
        ValuesDict = {
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTNONE : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTNONE', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL1 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL1', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL2 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL2', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL3 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL3', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL4 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTWHEEL4', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR1 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR1', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR2 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR2', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR3 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR3', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR4 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR4', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR5 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR5', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR6 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR6', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR7 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR7', 
            CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR8 : 'CUBECOMPUTERCONTROLPROGRAM8_NODEPORT_PORTSENSOR8'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NodePort()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NodePort.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NodePort.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CommonFrameworkTypes1_NodeType:
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPEINVALID = 0
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBECOMPUTER = 1
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBESENSE = 2
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEWHEEL = 3
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEIR = 4
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEMAGDEPLOY = 5
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEMAGCOMPACT = 6
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBESTAR = 7
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEAURIGA = 8
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODE = 9
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODESLT = 10
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEPST3S = 11
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODENSSRWL = 12
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUAD = 16
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUADPST3S = 17
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUADNSSRWL = 18
        COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUADLITEFUFORS = 19
    
        ValuesDict = {
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPEINVALID : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPEINVALID', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBECOMPUTER : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBECOMPUTER', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBESENSE : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBESENSE', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEWHEEL : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEWHEEL', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEIR : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEIR', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEMAGDEPLOY : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEMAGDEPLOY', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEMAGCOMPACT : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEMAGCOMPACT', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBESTAR : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBESTAR', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEAURIGA : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBEAURIGA', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODE : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODE', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODESLT : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODESLT', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEPST3S : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEPST3S', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODENSSRWL : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODENSSRWL', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUAD : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUAD', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUADPST3S : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUADPST3S', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUADNSSRWL : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUADNSSRWL', 
            COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUADLITEFUFORS : 'COMMONFRAMEWORKTYPES1_NODETYPE_NODETYPECUBENODEQUADLITEFUFORS'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class enum_CommonFrameworkTypes1_ProgramType:
        COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPEINVALID = 0
        COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPECONTROL = 1
        COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPEBOOTLOADER = 4
        COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPEHEALTHCHECK = 7
    
        ValuesDict = {
            COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPEINVALID : 'COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPEINVALID', 
            COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPECONTROL : 'COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPECONTROL', 
            COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPEBOOTLOADER : 'COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPEBOOTLOADER', 
            COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPEHEALTHCHECK : 'COMMONFRAMEWORKTYPES1_PROGRAMTYPE_PROGRAMTYPEHEALTHCHECK'
        }
    
        def __init__(self, value = 0):
            self.value = value
    
        def serialize(self):
            result = bytearray()
    
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.value)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_ProgramType()
    
            (resultInstance.value, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, pos)
    
            return (resultInstance, bytesProcessed)
    
        def getSymbolicName(self):
            return FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_ProgramType.ValuesDict[self.value]
    
        @staticmethod
        def getValueBySymbolicName(literalName):
            for key, value in FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_ProgramType.ValuesDict.items():
                if literalName == value:
                    return key
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_ConfigDefaultModes:
        def __init__(self, e__CubeComputerControlProgram8_AdcsRunModeSelect__RunModeDefault = 0, e__CubeComputerControlProgram8_AdcsOpStateSelect__OpStateDefault = 0, e__CubeComputerControlProgram8_ConModeSelect__ConModeSafe = 0, e__CubeComputerControlProgram8_ConModeSelect__ConModeAuto = 0):
            self.e__CubeComputerControlProgram8_AdcsRunModeSelect__RunModeDefault = e__CubeComputerControlProgram8_AdcsRunModeSelect__RunModeDefault
            self.e__CubeComputerControlProgram8_AdcsOpStateSelect__OpStateDefault = e__CubeComputerControlProgram8_AdcsOpStateSelect__OpStateDefault
            self.e__CubeComputerControlProgram8_ConModeSelect__ConModeSafe = e__CubeComputerControlProgram8_ConModeSelect__ConModeSafe
            self.e__CubeComputerControlProgram8_ConModeSelect__ConModeAuto = e__CubeComputerControlProgram8_ConModeSelect__ConModeAuto
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsRunModeSelect(self.e__CubeComputerControlProgram8_AdcsRunModeSelect__RunModeDefault).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsOpStateSelect(self.e__CubeComputerControlProgram8_AdcsOpStateSelect__OpStateDefault).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect(self.e__CubeComputerControlProgram8_ConModeSelect__ConModeSafe).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect(self.e__CubeComputerControlProgram8_ConModeSelect__ConModeAuto).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigDefaultModes()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_AdcsRunModeSelect__RunModeDefault, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsRunModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AdcsOpStateSelect__OpStateDefault, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsOpStateSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_ConModeSelect__ConModeSafe, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_ConModeSelect__ConModeAuto, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 4
    
    class struct_ConfigMount:
        def __init__(self, e__CubeComputerControlProgram8_AxisSelect__MountStackX = 0, e__CubeComputerControlProgram8_AxisSelect__MountStackY = 0, e__CubeComputerControlProgram8_AxisSelect__MountStackZ = 0, e__CubeComputerControlProgram8_AxisSelect__MountMtq0 = 0, e__CubeComputerControlProgram8_AxisSelect__MountMtq1 = 0, e__CubeComputerControlProgram8_AxisSelect__MountMtq2 = 0, e__CubeComputerControlProgram8_AxisSelect__MountRwl0 = 0, e__CubeComputerControlProgram8_AxisSelect__MountRwl1 = 0, e__CubeComputerControlProgram8_AxisSelect__MountRwl2 = 0, e__CubeComputerControlProgram8_AxisSelect__MountRwl3 = 0, double__MountRwlPyrAlpha = 0.0, double__MountRwlPyrBeta = 0.0, double__MountRwlPyrGamma = 0.0, e__CubeComputerControlProgram8_AxisSelect__MountCss0 = 0, e__CubeComputerControlProgram8_AxisSelect__MountCss1 = 0, e__CubeComputerControlProgram8_AxisSelect__MountCss2 = 0, e__CubeComputerControlProgram8_AxisSelect__MountCss3 = 0, e__CubeComputerControlProgram8_AxisSelect__MountCss4 = 0, e__CubeComputerControlProgram8_AxisSelect__MountCss5 = 0, e__CubeComputerControlProgram8_AxisSelect__MountCss6 = 0, e__CubeComputerControlProgram8_AxisSelect__MountCss7 = 0, e__CubeComputerControlProgram8_AxisSelect__MountCss8 = 0, e__CubeComputerControlProgram8_AxisSelect__MountCss9 = 0, double__MountFss0Alpha = 0.0, double__MountFss0Beta = 0.0, double__MountFss0Gamma = 0.0, double__MountFss1Alpha = 0.0, double__MountFss1Beta = 0.0, double__MountFss1Gamma = 0.0, double__MountFss2Alpha = 0.0, double__MountFss2Beta = 0.0, double__MountFss2Gamma = 0.0, double__MountFss3Alpha = 0.0, double__MountFss3Beta = 0.0, double__MountFss3Gamma = 0.0, double__MountHss0Alpha = 0.0, double__MountHss0Beta = 0.0, double__MountHss0Gamma = 0.0, double__MountHss1Alpha = 0.0, double__MountHss1Beta = 0.0, double__MountHss1Gamma = 0.0, double__MountMag0Alpha = 0.0, double__MountMag0Beta = 0.0, double__MountMag0Gamma = 0.0, double__MountMag1Alpha = 0.0, double__MountMag1Beta = 0.0, double__MountMag1Gamma = 0.0, double__MountStr0Alpha = 0.0, double__MountStr0Beta = 0.0, double__MountStr0Gamma = 0.0, double__MountStr1Alpha = 0.0, double__MountStr1Beta = 0.0, double__MountStr1Gamma = 0.0, double__MountExtSensor0Alpha = 0.0, double__MountExtSensor0Beta = 0.0, double__MountExtSensor0Gamma = 0.0, double__MountExtSensor1Alpha = 0.0, double__MountExtSensor1Beta = 0.0, double__MountExtSensor1Gamma = 0.0, e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis1 = 0, e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis2 = 0, e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis3 = 0, e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis1 = 0, e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis2 = 0, e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis3 = 0):
            self.e__CubeComputerControlProgram8_AxisSelect__MountStackX = e__CubeComputerControlProgram8_AxisSelect__MountStackX
            self.e__CubeComputerControlProgram8_AxisSelect__MountStackY = e__CubeComputerControlProgram8_AxisSelect__MountStackY
            self.e__CubeComputerControlProgram8_AxisSelect__MountStackZ = e__CubeComputerControlProgram8_AxisSelect__MountStackZ
            self.e__CubeComputerControlProgram8_AxisSelect__MountMtq0 = e__CubeComputerControlProgram8_AxisSelect__MountMtq0
            self.e__CubeComputerControlProgram8_AxisSelect__MountMtq1 = e__CubeComputerControlProgram8_AxisSelect__MountMtq1
            self.e__CubeComputerControlProgram8_AxisSelect__MountMtq2 = e__CubeComputerControlProgram8_AxisSelect__MountMtq2
            self.e__CubeComputerControlProgram8_AxisSelect__MountRwl0 = e__CubeComputerControlProgram8_AxisSelect__MountRwl0
            self.e__CubeComputerControlProgram8_AxisSelect__MountRwl1 = e__CubeComputerControlProgram8_AxisSelect__MountRwl1
            self.e__CubeComputerControlProgram8_AxisSelect__MountRwl2 = e__CubeComputerControlProgram8_AxisSelect__MountRwl2
            self.e__CubeComputerControlProgram8_AxisSelect__MountRwl3 = e__CubeComputerControlProgram8_AxisSelect__MountRwl3
            self.double__MountRwlPyrAlpha = double__MountRwlPyrAlpha
            self.double__MountRwlPyrBeta = double__MountRwlPyrBeta
            self.double__MountRwlPyrGamma = double__MountRwlPyrGamma
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss0 = e__CubeComputerControlProgram8_AxisSelect__MountCss0
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss1 = e__CubeComputerControlProgram8_AxisSelect__MountCss1
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss2 = e__CubeComputerControlProgram8_AxisSelect__MountCss2
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss3 = e__CubeComputerControlProgram8_AxisSelect__MountCss3
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss4 = e__CubeComputerControlProgram8_AxisSelect__MountCss4
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss5 = e__CubeComputerControlProgram8_AxisSelect__MountCss5
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss6 = e__CubeComputerControlProgram8_AxisSelect__MountCss6
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss7 = e__CubeComputerControlProgram8_AxisSelect__MountCss7
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss8 = e__CubeComputerControlProgram8_AxisSelect__MountCss8
            self.e__CubeComputerControlProgram8_AxisSelect__MountCss9 = e__CubeComputerControlProgram8_AxisSelect__MountCss9
            self.double__MountFss0Alpha = double__MountFss0Alpha
            self.double__MountFss0Beta = double__MountFss0Beta
            self.double__MountFss0Gamma = double__MountFss0Gamma
            self.double__MountFss1Alpha = double__MountFss1Alpha
            self.double__MountFss1Beta = double__MountFss1Beta
            self.double__MountFss1Gamma = double__MountFss1Gamma
            self.double__MountFss2Alpha = double__MountFss2Alpha
            self.double__MountFss2Beta = double__MountFss2Beta
            self.double__MountFss2Gamma = double__MountFss2Gamma
            self.double__MountFss3Alpha = double__MountFss3Alpha
            self.double__MountFss3Beta = double__MountFss3Beta
            self.double__MountFss3Gamma = double__MountFss3Gamma
            self.double__MountHss0Alpha = double__MountHss0Alpha
            self.double__MountHss0Beta = double__MountHss0Beta
            self.double__MountHss0Gamma = double__MountHss0Gamma
            self.double__MountHss1Alpha = double__MountHss1Alpha
            self.double__MountHss1Beta = double__MountHss1Beta
            self.double__MountHss1Gamma = double__MountHss1Gamma
            self.double__MountMag0Alpha = double__MountMag0Alpha
            self.double__MountMag0Beta = double__MountMag0Beta
            self.double__MountMag0Gamma = double__MountMag0Gamma
            self.double__MountMag1Alpha = double__MountMag1Alpha
            self.double__MountMag1Beta = double__MountMag1Beta
            self.double__MountMag1Gamma = double__MountMag1Gamma
            self.double__MountStr0Alpha = double__MountStr0Alpha
            self.double__MountStr0Beta = double__MountStr0Beta
            self.double__MountStr0Gamma = double__MountStr0Gamma
            self.double__MountStr1Alpha = double__MountStr1Alpha
            self.double__MountStr1Beta = double__MountStr1Beta
            self.double__MountStr1Gamma = double__MountStr1Gamma
            self.double__MountExtSensor0Alpha = double__MountExtSensor0Alpha
            self.double__MountExtSensor0Beta = double__MountExtSensor0Beta
            self.double__MountExtSensor0Gamma = double__MountExtSensor0Gamma
            self.double__MountExtSensor1Alpha = double__MountExtSensor1Alpha
            self.double__MountExtSensor1Beta = double__MountExtSensor1Beta
            self.double__MountExtSensor1Gamma = double__MountExtSensor1Gamma
            self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis1 = e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis1
            self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis2 = e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis2
            self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis3 = e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis3
            self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis1 = e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis1
            self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis2 = e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis2
            self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis3 = e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis3
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountStackX).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountStackY).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountStackZ).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountMtq0).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountMtq1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountMtq2).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountRwl0).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountRwl1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountRwl2).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountRwl3).serialize()
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountRwlPyrAlpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountRwlPyrBeta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountRwlPyrGamma)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss0).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss2).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss3).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss4).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss5).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss6).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss7).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss8).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountCss9).serialize()
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss0Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss0Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss0Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss1Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss1Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss1Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss2Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss2Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss2Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss3Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss3Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountFss3Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountHss0Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountHss0Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountHss0Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountHss1Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountHss1Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountHss1Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountMag0Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountMag0Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountMag0Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountMag1Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountMag1Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountMag1Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountStr0Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountStr0Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountStr0Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountStr1Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountStr1Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountStr1Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountExtSensor0Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountExtSensor0Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountExtSensor0Gamma)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountExtSensor1Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountExtSensor1Beta)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__MountExtSensor1Gamma)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis2).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis3).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis2).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect(self.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis3).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigMount()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountStackX, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountStackY, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountStackZ, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountMtq0, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountMtq1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountMtq2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountRwl0, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountRwl1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountRwl2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountRwl3, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountRwlPyrAlpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountRwlPyrBeta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountRwlPyrGamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss0, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss3, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss4, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss5, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss6, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss7, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss8, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountCss9, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss0Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss0Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss0Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss1Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss1Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss1Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss2Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss2Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss2Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss3Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss3Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountFss3Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountHss0Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountHss0Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountHss0Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountHss1Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountHss1Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountHss1Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountMag0Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountMag0Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountMag0Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountMag1Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountMag1Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountMag1Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountStr0Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountStr0Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountStr0Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountStr1Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountStr1Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountStr1Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountExtSensor0Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountExtSensor0Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountExtSensor0Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountExtSensor1Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountExtSensor1Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__MountExtSensor1Gamma, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr0Axis3, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AxisSelect__MountExtGyr1Axis3, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AxisSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 338
    
    class struct_ConfigMag0OrbitCal:
        def __init__(self, double__Offset1 = 0.0, double__Offset2 = 0.0, double__Offset3 = 0.0, double__SensMatrix11 = 0.0, double__SensMatrix22 = 0.0, double__SensMatrix33 = 0.0, double__SensMatrix12 = 0.0, double__SensMatrix13 = 0.0, double__SensMatrix21 = 0.0, double__SensMatrix23 = 0.0, double__SensMatrix31 = 0.0, double__SensMatrix32 = 0.0):
            self.double__Offset1 = double__Offset1
            self.double__Offset2 = double__Offset2
            self.double__Offset3 = double__Offset3
            self.double__SensMatrix11 = double__SensMatrix11
            self.double__SensMatrix22 = double__SensMatrix22
            self.double__SensMatrix33 = double__SensMatrix33
            self.double__SensMatrix12 = double__SensMatrix12
            self.double__SensMatrix13 = double__SensMatrix13
            self.double__SensMatrix21 = double__SensMatrix21
            self.double__SensMatrix23 = double__SensMatrix23
            self.double__SensMatrix31 = double__SensMatrix31
            self.double__SensMatrix32 = double__SensMatrix32
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Offset1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Offset2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Offset3)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix11)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix22)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix33)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix12)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix13)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix21)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix23)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix31)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix32)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigMag0OrbitCal()
    
            currentPos = pos
            
            (resultInstance.double__Offset1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Offset2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Offset3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix11, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix22, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix33, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix12, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix13, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix21, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix23, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix31, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix32, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 96
    
    class struct_ConfigMag1OrbitCal:
        def __init__(self, double__Offset1 = 0.0, double__Offset2 = 0.0, double__Offset3 = 0.0, double__SensMatrix11 = 0.0, double__SensMatrix22 = 0.0, double__SensMatrix33 = 0.0, double__SensMatrix12 = 0.0, double__SensMatrix13 = 0.0, double__SensMatrix21 = 0.0, double__SensMatrix23 = 0.0, double__SensMatrix31 = 0.0, double__SensMatrix32 = 0.0):
            self.double__Offset1 = double__Offset1
            self.double__Offset2 = double__Offset2
            self.double__Offset3 = double__Offset3
            self.double__SensMatrix11 = double__SensMatrix11
            self.double__SensMatrix22 = double__SensMatrix22
            self.double__SensMatrix33 = double__SensMatrix33
            self.double__SensMatrix12 = double__SensMatrix12
            self.double__SensMatrix13 = double__SensMatrix13
            self.double__SensMatrix21 = double__SensMatrix21
            self.double__SensMatrix23 = double__SensMatrix23
            self.double__SensMatrix31 = double__SensMatrix31
            self.double__SensMatrix32 = double__SensMatrix32
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Offset1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Offset2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Offset3)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix11)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix22)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix33)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix12)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix13)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix21)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix23)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix31)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SensMatrix32)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigMag1OrbitCal()
    
            currentPos = pos
            
            (resultInstance.double__Offset1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Offset2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Offset3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix11, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix22, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix33, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix12, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix13, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix21, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix23, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix31, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SensMatrix32, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 96
    
    class struct_ConfigAdcsController:
        def __init__(self, e__CubeComputerControlProgram8_ConModeSelect__ConModeDefault = 0, float__Kd = 0.0, float__Kdsun = 0.0, float__Kdecl = 0.0, float__Ks = 0.0, float__Kdf = 0.0, float__Kn = 0.0, float__Kq = 0.0, float__Kqx = 0.0, float__Kqy = 0.0, float__Kqz = 0.0, float__Kh = 0.0, float__Kp1 = 0.0, float__Kd1 = 0.0, float__Kp2 = 0.0, float__Kd2 = 0.0, float__Kp3 = 0.0, float__Kd3 = 0.0, float__Ki3 = 0.0, float__wy_ref = 0.0, float__H_ref = 0.0, float__Hy_bias = 0.0, float__wSunYawRef = 0.0, float__SunKeepoutAng = 0.0, float__RollLimit = 0.0, bool__YawCompensate = False, bool__SunTrackEclEn = False, bool__SunAvoidEn = False):
            self.e__CubeComputerControlProgram8_ConModeSelect__ConModeDefault = e__CubeComputerControlProgram8_ConModeSelect__ConModeDefault
            self.float__Kd = float__Kd
            self.float__Kdsun = float__Kdsun
            self.float__Kdecl = float__Kdecl
            self.float__Ks = float__Ks
            self.float__Kdf = float__Kdf
            self.float__Kn = float__Kn
            self.float__Kq = float__Kq
            self.float__Kqx = float__Kqx
            self.float__Kqy = float__Kqy
            self.float__Kqz = float__Kqz
            self.float__Kh = float__Kh
            self.float__Kp1 = float__Kp1
            self.float__Kd1 = float__Kd1
            self.float__Kp2 = float__Kp2
            self.float__Kd2 = float__Kd2
            self.float__Kp3 = float__Kp3
            self.float__Kd3 = float__Kd3
            self.float__Ki3 = float__Ki3
            self.float__wy_ref = float__wy_ref
            self.float__H_ref = float__H_ref
            self.float__Hy_bias = float__Hy_bias
            self.float__wSunYawRef = float__wSunYawRef
            self.float__SunKeepoutAng = float__SunKeepoutAng
            self.float__RollLimit = float__RollLimit
            self.bool__YawCompensate = bool__YawCompensate
            self.bool__SunTrackEclEn = bool__SunTrackEclEn
            self.bool__SunAvoidEn = bool__SunAvoidEn
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect(self.e__CubeComputerControlProgram8_ConModeSelect__ConModeDefault).serialize()
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kd)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kdsun)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kdecl)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Ks)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kdf)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kn)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kq)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kqx)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kqy)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kqz)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kh)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kp1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kd1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kp2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kd2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kp3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Kd3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Ki3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__wy_ref)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__H_ref)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Hy_bias)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__wSunYawRef)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__SunKeepoutAng)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RollLimit)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__YawCompensate)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__SunTrackEclEn)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__SunAvoidEn)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigAdcsController()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_ConModeSelect__ConModeDefault, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kd, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kdsun, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kdecl, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Ks, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kdf, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kn, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kq, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kqx, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kqy, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kqz, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kh, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kp1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kd1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kp2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kd2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kp3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Kd3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Ki3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__wy_ref, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__H_ref, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Hy_bias, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__wSunYawRef, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__SunKeepoutAng, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RollLimit, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__YawCompensate, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__SunTrackEclEn, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__SunAvoidEn, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 100
    
    class struct_ConfigAdcsEstimator:
        def __init__(self, e__CubeComputerControlProgram8_EstModeSelect__EstModeMainDefault = 0, e__CubeComputerControlProgram8_EstModeSelect__EstModeBackupDefault = 0, float__MagR = 0.0, float__CssR = 0.0, float__FssR = 0.0, float__HssR = 0.0, float__StrR = 0.0, float__RkfQ = 0.0, float__EkfQ = 0.0, float__NutDeps = 0.0, float__NutDpsi = 0.0, bool__EkfUseFss = False, bool__EkfUseCss = False, bool__EkfUseHss = False, bool__EkfUseStr = False, e__CubeComputerControlProgram8_VecSelect__TVec1 = 0, e__CubeComputerControlProgram8_VecSelect__TVec2 = 0):
            self.e__CubeComputerControlProgram8_EstModeSelect__EstModeMainDefault = e__CubeComputerControlProgram8_EstModeSelect__EstModeMainDefault
            self.e__CubeComputerControlProgram8_EstModeSelect__EstModeBackupDefault = e__CubeComputerControlProgram8_EstModeSelect__EstModeBackupDefault
            self.float__MagR = float__MagR
            self.float__CssR = float__CssR
            self.float__FssR = float__FssR
            self.float__HssR = float__HssR
            self.float__StrR = float__StrR
            self.float__RkfQ = float__RkfQ
            self.float__EkfQ = float__EkfQ
            self.float__NutDeps = float__NutDeps
            self.float__NutDpsi = float__NutDpsi
            self.bool__EkfUseFss = bool__EkfUseFss
            self.bool__EkfUseCss = bool__EkfUseCss
            self.bool__EkfUseHss = bool__EkfUseHss
            self.bool__EkfUseStr = bool__EkfUseStr
            self.e__CubeComputerControlProgram8_VecSelect__TVec1 = e__CubeComputerControlProgram8_VecSelect__TVec1
            self.e__CubeComputerControlProgram8_VecSelect__TVec2 = e__CubeComputerControlProgram8_VecSelect__TVec2
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect(self.e__CubeComputerControlProgram8_EstModeSelect__EstModeMainDefault).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect(self.e__CubeComputerControlProgram8_EstModeSelect__EstModeBackupDefault).serialize()
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__MagR)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CssR)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__FssR)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__HssR)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__StrR)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RkfQ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EkfQ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__NutDeps)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__NutDpsi)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__EkfUseFss)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__EkfUseCss)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__EkfUseHss)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__EkfUseStr)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_VecSelect(self.e__CubeComputerControlProgram8_VecSelect__TVec1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_VecSelect(self.e__CubeComputerControlProgram8_VecSelect__TVec2).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigAdcsEstimator()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_EstModeSelect__EstModeMainDefault, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_EstModeSelect__EstModeBackupDefault, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__MagR, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__CssR, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__FssR, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__HssR, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__StrR, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RkfQ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EkfQ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__NutDeps, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__NutDpsi, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__EkfUseFss, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__EkfUseCss, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__EkfUseHss, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__EkfUseStr, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_VecSelect__TVec1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_VecSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_VecSelect__TVec2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_VecSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 44
    
    class struct_ConfigAdcsSatellite:
        def __init__(self, float__Ixx = 0.0, float__Iyy = 0.0, float__Izz = 0.0, float__Ixy = 0.0, float__Ixz = 0.0, float__Iyz = 0.0, double__SunPointBodyVecX = 0.0, double__SunPointBodyVecY = 0.0, double__SunPointBodyVecZ = 0.0, double__TgtTrackBodyVecX = 0.0, double__TgtTrackBodyVecY = 0.0, double__TgtTrackBodyVecZ = 0.0, double__SatTrackBodyVecX = 0.0, double__SatTrackBodyVecY = 0.0, double__SatTrackBodyVecZ = 0.0):
            self.float__Ixx = float__Ixx
            self.float__Iyy = float__Iyy
            self.float__Izz = float__Izz
            self.float__Ixy = float__Ixy
            self.float__Ixz = float__Ixz
            self.float__Iyz = float__Iyz
            self.double__SunPointBodyVecX = double__SunPointBodyVecX
            self.double__SunPointBodyVecY = double__SunPointBodyVecY
            self.double__SunPointBodyVecZ = double__SunPointBodyVecZ
            self.double__TgtTrackBodyVecX = double__TgtTrackBodyVecX
            self.double__TgtTrackBodyVecY = double__TgtTrackBodyVecY
            self.double__TgtTrackBodyVecZ = double__TgtTrackBodyVecZ
            self.double__SatTrackBodyVecX = double__SatTrackBodyVecX
            self.double__SatTrackBodyVecY = double__SatTrackBodyVecY
            self.double__SatTrackBodyVecZ = double__SatTrackBodyVecZ
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Ixx)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Iyy)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Izz)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Ixy)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Ixz)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Iyz)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SunPointBodyVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SunPointBodyVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SunPointBodyVecZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__TgtTrackBodyVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__TgtTrackBodyVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__TgtTrackBodyVecZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SatTrackBodyVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SatTrackBodyVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SatTrackBodyVecZ)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigAdcsSatellite()
    
            currentPos = pos
            
            (resultInstance.float__Ixx, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Iyy, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Izz, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Ixy, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Ixz, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Iyz, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SunPointBodyVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SunPointBodyVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SunPointBodyVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__TgtTrackBodyVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__TgtTrackBodyVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__TgtTrackBodyVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SatTrackBodyVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SatTrackBodyVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SatTrackBodyVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 96
    
    class struct_ConfigOrbitSatParams:
        def __init__(self, double__OrbitEpoch = 0.0, double__OrbitIncl = 0.0, double__OrbitRaan = 0.0, double__OrbitEccen = 0.0, double__OrbitAP = 0.0, double__OrbitMA = 0.0, double__OrbitMM = 0.0, double__OrbitBstar = 0.0):
            self.double__OrbitEpoch = double__OrbitEpoch
            self.double__OrbitIncl = double__OrbitIncl
            self.double__OrbitRaan = double__OrbitRaan
            self.double__OrbitEccen = double__OrbitEccen
            self.double__OrbitAP = double__OrbitAP
            self.double__OrbitMA = double__OrbitMA
            self.double__OrbitMM = double__OrbitMM
            self.double__OrbitBstar = double__OrbitBstar
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitEpoch)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitIncl)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitRaan)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitEccen)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitAP)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitMA)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitMM)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitBstar)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigOrbitSatParams()
    
            currentPos = pos
            
            (resultInstance.double__OrbitEpoch, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitIncl, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitRaan, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitEccen, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitAP, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitMA, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitMM, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitBstar, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 64
    
    class struct_ConfigOrbitTargetParams:
        def __init__(self, double__OrbitEpoch = 0.0, double__OrbitIncl = 0.0, double__OrbitRaan = 0.0, double__OrbitEccen = 0.0, double__OrbitAP = 0.0, double__OrbitMA = 0.0, double__OrbitMM = 0.0, double__OrbitBstar = 0.0):
            self.double__OrbitEpoch = double__OrbitEpoch
            self.double__OrbitIncl = double__OrbitIncl
            self.double__OrbitRaan = double__OrbitRaan
            self.double__OrbitEccen = double__OrbitEccen
            self.double__OrbitAP = double__OrbitAP
            self.double__OrbitMA = double__OrbitMA
            self.double__OrbitMM = double__OrbitMM
            self.double__OrbitBstar = double__OrbitBstar
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitEpoch)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitIncl)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitRaan)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitEccen)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitAP)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitMA)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitMM)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__OrbitBstar)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigOrbitTargetParams()
    
            currentPos = pos
            
            (resultInstance.double__OrbitEpoch, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitIncl, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitRaan, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitEccen, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitAP, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitMA, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitMM, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__OrbitBstar, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 64
    
    class struct_ConfigNodeSelection:
        def __init__(self, uint8__SelectRwl = 0, uint8__SelectMag = 0, uint8__SelectFss = 0, uint8__SelectHss = 0, uint8__SelectGyro = 0, uint8__SelectStr = 0, uint8__SelectGnss = 0, uint8__SelectExt = 0):
            self.uint8__SelectRwl = uint8__SelectRwl
            self.uint8__SelectMag = uint8__SelectMag
            self.uint8__SelectFss = uint8__SelectFss
            self.uint8__SelectHss = uint8__SelectHss
            self.uint8__SelectGyro = uint8__SelectGyro
            self.uint8__SelectStr = uint8__SelectStr
            self.uint8__SelectGnss = uint8__SelectGnss
            self.uint8__SelectExt = uint8__SelectExt
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SelectRwl)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SelectMag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SelectFss)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SelectHss)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SelectGyro)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SelectStr)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SelectGnss)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SelectExt)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigNodeSelection()
    
            currentPos = pos
            
            (resultInstance.uint8__SelectRwl, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__SelectMag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__SelectFss, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__SelectHss, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__SelectGyro, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__SelectStr, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__SelectGnss, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__SelectExt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 8
    
    class struct_ConfigActuatorRwl:
        def __init__(self, float__Rwl0Iw = 0.0, float__Rwl0Hmax = 0.0, float__Rwl0Nmax = 0.0, float__Rwl1Iw = 0.0, float__Rwl1Hmax = 0.0, float__Rwl1Nmax = 0.0, float__Rwl2Iw = 0.0, float__Rwl2Hmax = 0.0, float__Rwl2Nmax = 0.0, float__Rwl3Iw = 0.0, float__Rwl3Hmax = 0.0, float__Rwl3Nmax = 0.0, float__NDel = 0.0, e__CubeComputerControlProgram8_RwlScheme__RwlScheme = 0, e__CubeComputerControlProgram8_RwlFailId__RwlFailId = 0, float__PyrHnom = 0.0, float__PyrTiltAngle = 0.0):
            self.float__Rwl0Iw = float__Rwl0Iw
            self.float__Rwl0Hmax = float__Rwl0Hmax
            self.float__Rwl0Nmax = float__Rwl0Nmax
            self.float__Rwl1Iw = float__Rwl1Iw
            self.float__Rwl1Hmax = float__Rwl1Hmax
            self.float__Rwl1Nmax = float__Rwl1Nmax
            self.float__Rwl2Iw = float__Rwl2Iw
            self.float__Rwl2Hmax = float__Rwl2Hmax
            self.float__Rwl2Nmax = float__Rwl2Nmax
            self.float__Rwl3Iw = float__Rwl3Iw
            self.float__Rwl3Hmax = float__Rwl3Hmax
            self.float__Rwl3Nmax = float__Rwl3Nmax
            self.float__NDel = float__NDel
            self.e__CubeComputerControlProgram8_RwlScheme__RwlScheme = e__CubeComputerControlProgram8_RwlScheme__RwlScheme
            self.e__CubeComputerControlProgram8_RwlFailId__RwlFailId = e__CubeComputerControlProgram8_RwlFailId__RwlFailId
            self.float__PyrHnom = float__PyrHnom
            self.float__PyrTiltAngle = float__PyrTiltAngle
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0Iw)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0Hmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0Nmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1Iw)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1Hmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1Nmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2Iw)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2Hmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2Nmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3Iw)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3Hmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3Nmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__NDel)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlScheme(self.e__CubeComputerControlProgram8_RwlScheme__RwlScheme).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlFailId(self.e__CubeComputerControlProgram8_RwlFailId__RwlFailId).serialize()
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__PyrHnom)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__PyrTiltAngle)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigActuatorRwl()
    
            currentPos = pos
            
            (resultInstance.float__Rwl0Iw, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0Hmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0Nmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1Iw, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1Hmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1Nmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2Iw, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2Hmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2Nmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3Iw, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3Hmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3Nmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__NDel, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_RwlScheme__RwlScheme, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlScheme.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_RwlFailId__RwlFailId, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_RwlFailId.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__PyrHnom, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__PyrTiltAngle, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 62
    
    class struct_ConfigActuatorMtq:
        def __init__(self, float__Mtq0Mmax = 0.0, float__Mtq1Mmax = 0.0, float__Mtq2Mmax = 0.0, uint16__OnTimeMax = 0, uint16__OnTimeMin = 0, float__MtqFfac = 0.0):
            self.float__Mtq0Mmax = float__Mtq0Mmax
            self.float__Mtq1Mmax = float__Mtq1Mmax
            self.float__Mtq2Mmax = float__Mtq2Mmax
            self.uint16__OnTimeMax = uint16__OnTimeMax
            self.uint16__OnTimeMin = uint16__OnTimeMin
            self.float__MtqFfac = float__MtqFfac
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq0Mmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq1Mmax)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq2Mmax)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__OnTimeMax)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__OnTimeMin)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__MtqFfac)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigActuatorMtq()
    
            currentPos = pos
            
            (resultInstance.float__Mtq0Mmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq1Mmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq2Mmax, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__OnTimeMax, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__OnTimeMin, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__MtqFfac, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 20
    
    class struct_ConfigMagSensingElement:
        def __init__(self, e__CubeComputerControlProgram8_MagSensingElementSelect__Mag0SensingElement = 0, e__CubeComputerControlProgram8_MagSensingElementSelect__Mag1SensingElement = 0):
            self.e__CubeComputerControlProgram8_MagSensingElementSelect__Mag0SensingElement = e__CubeComputerControlProgram8_MagSensingElementSelect__Mag0SensingElement
            self.e__CubeComputerControlProgram8_MagSensingElementSelect__Mag1SensingElement = e__CubeComputerControlProgram8_MagSensingElementSelect__Mag1SensingElement
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MagSensingElementSelect(self.e__CubeComputerControlProgram8_MagSensingElementSelect__Mag0SensingElement).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MagSensingElementSelect(self.e__CubeComputerControlProgram8_MagSensingElementSelect__Mag1SensingElement).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigMagSensingElement()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_MagSensingElementSelect__Mag0SensingElement, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MagSensingElementSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_MagSensingElementSelect__Mag1SensingElement, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MagSensingElementSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 2
    
    class struct_ConfigAsgp4:
        def __init__(self, uint16__BatchSize = 0, uint32__MaxTimeBetween = 0, uint16__MaxPosErr = 0, float__TimeGain = 0.0, bool__UpdateRaanIncl = False, bool__UpdateEccen = False, bool__UpdateApMa = False, bool__UpdateTime = False):
            self.uint16__BatchSize = uint16__BatchSize
            self.uint32__MaxTimeBetween = uint32__MaxTimeBetween
            self.uint16__MaxPosErr = uint16__MaxPosErr
            self.float__TimeGain = float__TimeGain
            self.bool__UpdateRaanIncl = bool__UpdateRaanIncl
            self.bool__UpdateEccen = bool__UpdateEccen
            self.bool__UpdateApMa = bool__UpdateApMa
            self.bool__UpdateTime = bool__UpdateTime
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__BatchSize)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__MaxTimeBetween)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__MaxPosErr)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__TimeGain)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__UpdateRaanIncl)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__UpdateEccen)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__UpdateApMa)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__UpdateTime)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigAsgp4()
    
            currentPos = pos
            
            (resultInstance.uint16__BatchSize, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__MaxTimeBetween, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__MaxPosErr, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__TimeGain, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__UpdateRaanIncl, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__UpdateEccen, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__UpdateApMa, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__UpdateTime, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 16
    
    class struct_ConMode:
        def __init__(self, e__CubeComputerControlProgram8_ConModeSelect__ControlMode = 0, uint16__MagConTimeout = 0):
            self.e__CubeComputerControlProgram8_ConModeSelect__ControlMode = e__CubeComputerControlProgram8_ConModeSelect__ControlMode
            self.uint16__MagConTimeout = uint16__MagConTimeout
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect(self.e__CubeComputerControlProgram8_ConModeSelect__ControlMode).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__MagConTimeout)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConMode()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_ConModeSelect__ControlMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__MagConTimeout, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 3
    
    class struct_EstMode:
        def __init__(self, e__CubeComputerControlProgram8_EstModeSelect__EstModeMain = 0, e__CubeComputerControlProgram8_EstModeSelect__EstModeBackup = 0):
            self.e__CubeComputerControlProgram8_EstModeSelect__EstModeMain = e__CubeComputerControlProgram8_EstModeSelect__EstModeMain
            self.e__CubeComputerControlProgram8_EstModeSelect__EstModeBackup = e__CubeComputerControlProgram8_EstModeSelect__EstModeBackup
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect(self.e__CubeComputerControlProgram8_EstModeSelect__EstModeMain).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect(self.e__CubeComputerControlProgram8_EstModeSelect__EstModeBackup).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_EstMode()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_EstModeSelect__EstModeMain, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_EstModeSelect__EstModeBackup, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 2
    
    class struct_OrbMode:
        def __init__(self, e__CubeComputerControlProgram8_OrbModeSelect__OrbitMode = 0):
            self.e__CubeComputerControlProgram8_OrbModeSelect__OrbitMode = e__CubeComputerControlProgram8_OrbModeSelect__OrbitMode
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OrbModeSelect(self.e__CubeComputerControlProgram8_OrbModeSelect__OrbitMode).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_OrbMode()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_OrbModeSelect__OrbitMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OrbModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_AdcsRunMode:
        def __init__(self, e__CubeComputerControlProgram8_AdcsRunModeSelect__RunMode = 0):
            self.e__CubeComputerControlProgram8_AdcsRunModeSelect__RunMode = e__CubeComputerControlProgram8_AdcsRunModeSelect__RunMode
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsRunModeSelect(self.e__CubeComputerControlProgram8_AdcsRunModeSelect__RunMode).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_AdcsRunMode()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_AdcsRunModeSelect__RunMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsRunModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_AdcsOpState:
        def __init__(self, e__CubeComputerControlProgram8_AdcsOpStateSelect__OpState = 0):
            self.e__CubeComputerControlProgram8_AdcsOpStateSelect__OpState = e__CubeComputerControlProgram8_AdcsOpStateSelect__OpState
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsOpStateSelect(self.e__CubeComputerControlProgram8_AdcsOpStateSelect__OpState).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_AdcsOpState()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_AdcsOpStateSelect__OpState, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AdcsOpStateSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_SimSensorRaw:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__Fss0RawCenX = 0.0, double__Fss0RawCenY = 0.0, double__Fss1RawCenX = 0.0, double__Fss1RawCenY = 0.0, double__Fss2RawCenX = 0.0, double__Fss2RawCenY = 0.0, double__Fss3RawCenX = 0.0, double__Fss3RawCenY = 0.0, uint16__Css0Raw = 0, uint16__Css1Raw = 0, uint16__Css2Raw = 0, uint16__Css3Raw = 0, uint16__Css4Raw = 0, uint16__Css5Raw = 0, uint16__Css6Raw = 0, uint16__Css7Raw = 0, uint16__Css8Raw = 0, uint16__Css9Raw = 0, double__Mag0RawVecX = 0.0, double__Mag0RawVecY = 0.0, double__Mag0RawVecZ = 0.0, double__Mag1RawVecX = 0.0, double__Mag1RawVecY = 0.0, double__Mag1RawVecZ = 0.0, float__Gyro0RawRateX = 0.0, float__Gyro0RawRateY = 0.0, float__Gyro0RawRateZ = 0.0, float__Gyro1RawRateX = 0.0, float__Gyro1RawRateY = 0.0, float__Gyro1RawRateZ = 0.0, double__Hss0RawElev = 0.0, double__Hss0RawRot = 0.0, double__Hss1RawElev = 0.0, double__Hss1RawRot = 0.0, double__Str0MeasVec0X = 0.0, double__Str0MeasVec0Y = 0.0, double__Str0MeasVec0Z = 0.0, double__Str0MeasVec1X = 0.0, double__Str0MeasVec1Y = 0.0, double__Str0MeasVec1Z = 0.0, double__Str0MeasVec2X = 0.0, double__Str0MeasVec2Y = 0.0, double__Str0MeasVec2Z = 0.0, double__Str0ModelVec0X = 0.0, double__Str0ModelVec0Y = 0.0, double__Str0ModelVec0Z = 0.0, double__Str0ModelVec1X = 0.0, double__Str0ModelVec1Y = 0.0, double__Str0ModelVec1Z = 0.0, double__Str0ModelVec2X = 0.0, double__Str0ModelVec2Y = 0.0, double__Str0ModelVec2Z = 0.0, double__Str0MeasQ0 = 0.0, double__Str0MeasQ1 = 0.0, double__Str0MeasQ2 = 0.0, double__Str0MeasQ3 = 0.0, uint8__Str0StarIdCount = 0, double__Str1MeasVec0X = 0.0, double__Str1MeasVec0Y = 0.0, double__Str1MeasVec0Z = 0.0, double__Str1MeasVec1X = 0.0, double__Str1MeasVec1Y = 0.0, double__Str1MeasVec1Z = 0.0, double__Str1MeasVec2X = 0.0, double__Str1MeasVec2Y = 0.0, double__Str1MeasVec2Z = 0.0, double__Str1ModelVec0X = 0.0, double__Str1ModelVec0Y = 0.0, double__Str1ModelVec0Z = 0.0, double__Str1ModelVec1X = 0.0, double__Str1ModelVec1Y = 0.0, double__Str1ModelVec1Z = 0.0, double__Str1ModelVec2X = 0.0, double__Str1ModelVec2Y = 0.0, double__Str1ModelVec2Z = 0.0, double__Str1MeasQ0 = 0.0, double__Str1MeasQ1 = 0.0, double__Str1MeasQ2 = 0.0, double__Str1MeasQ3 = 0.0, uint8__Str1StarIdCount = 0, uint32__GnssTimeSeconds = 0, uint32__GnssTimeNs = 0, int32__GnssSatPosX = 0, int32__GnssSatPosY = 0, int32__GnssSatPosZ = 0, int32__GnssSatVelX = 0, int32__GnssSatVelY = 0, int32__GnssSatVelZ = 0, float__ExtSensor0Float0 = 0.0, float__ExtSensor0Float1 = 0.0, float__ExtSensor0Float2 = 0.0, float__ExtSensor0Float3 = 0.0, float__ExtSensor0Float4 = 0.0, float__ExtSensor0Float5 = 0.0, float__ExtSensor1Float0 = 0.0, float__ExtSensor1Float1 = 0.0, float__ExtSensor1Float2 = 0.0, float__ExtSensor1Float3 = 0.0, float__ExtSensor1Float4 = 0.0, float__ExtSensor1Float5 = 0.0, float__Rwl0SpeedMeas = 0.0, float__Rwl1SpeedMeas = 0.0, float__Rwl2SpeedMeas = 0.0, float__Rwl3SpeedMeas = 0.0, bool__Fss0IsValid = False, bool__Fss1IsValid = False, bool__Fss2IsValid = False, bool__Fss3IsValid = False, bool__CssIsValid = False, bool__Mag0IsValid = False, bool__Mag1IsValid = False, bool__Gyro0IsValid = False, bool__Gyro1IsValid = False, bool__Hss0IsValid = False, bool__Hss1IsValid = False, bool__Str0IsValid = False, bool__Str1IsValid = False, bool__GnssIsValid = False, bool__GnssIsNew = False, bool__ExtSensor0IsValid = False, bool__ExtSensor1IsValid = False, bool__Rwl0IsValid = False, bool__Rwl1IsValid = False, bool__Rwl2IsValid = False, bool__Rwl3IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__Fss0RawCenX = double__Fss0RawCenX
            self.double__Fss0RawCenY = double__Fss0RawCenY
            self.double__Fss1RawCenX = double__Fss1RawCenX
            self.double__Fss1RawCenY = double__Fss1RawCenY
            self.double__Fss2RawCenX = double__Fss2RawCenX
            self.double__Fss2RawCenY = double__Fss2RawCenY
            self.double__Fss3RawCenX = double__Fss3RawCenX
            self.double__Fss3RawCenY = double__Fss3RawCenY
            self.uint16__Css0Raw = uint16__Css0Raw
            self.uint16__Css1Raw = uint16__Css1Raw
            self.uint16__Css2Raw = uint16__Css2Raw
            self.uint16__Css3Raw = uint16__Css3Raw
            self.uint16__Css4Raw = uint16__Css4Raw
            self.uint16__Css5Raw = uint16__Css5Raw
            self.uint16__Css6Raw = uint16__Css6Raw
            self.uint16__Css7Raw = uint16__Css7Raw
            self.uint16__Css8Raw = uint16__Css8Raw
            self.uint16__Css9Raw = uint16__Css9Raw
            self.double__Mag0RawVecX = double__Mag0RawVecX
            self.double__Mag0RawVecY = double__Mag0RawVecY
            self.double__Mag0RawVecZ = double__Mag0RawVecZ
            self.double__Mag1RawVecX = double__Mag1RawVecX
            self.double__Mag1RawVecY = double__Mag1RawVecY
            self.double__Mag1RawVecZ = double__Mag1RawVecZ
            self.float__Gyro0RawRateX = float__Gyro0RawRateX
            self.float__Gyro0RawRateY = float__Gyro0RawRateY
            self.float__Gyro0RawRateZ = float__Gyro0RawRateZ
            self.float__Gyro1RawRateX = float__Gyro1RawRateX
            self.float__Gyro1RawRateY = float__Gyro1RawRateY
            self.float__Gyro1RawRateZ = float__Gyro1RawRateZ
            self.double__Hss0RawElev = double__Hss0RawElev
            self.double__Hss0RawRot = double__Hss0RawRot
            self.double__Hss1RawElev = double__Hss1RawElev
            self.double__Hss1RawRot = double__Hss1RawRot
            self.double__Str0MeasVec0X = double__Str0MeasVec0X
            self.double__Str0MeasVec0Y = double__Str0MeasVec0Y
            self.double__Str0MeasVec0Z = double__Str0MeasVec0Z
            self.double__Str0MeasVec1X = double__Str0MeasVec1X
            self.double__Str0MeasVec1Y = double__Str0MeasVec1Y
            self.double__Str0MeasVec1Z = double__Str0MeasVec1Z
            self.double__Str0MeasVec2X = double__Str0MeasVec2X
            self.double__Str0MeasVec2Y = double__Str0MeasVec2Y
            self.double__Str0MeasVec2Z = double__Str0MeasVec2Z
            self.double__Str0ModelVec0X = double__Str0ModelVec0X
            self.double__Str0ModelVec0Y = double__Str0ModelVec0Y
            self.double__Str0ModelVec0Z = double__Str0ModelVec0Z
            self.double__Str0ModelVec1X = double__Str0ModelVec1X
            self.double__Str0ModelVec1Y = double__Str0ModelVec1Y
            self.double__Str0ModelVec1Z = double__Str0ModelVec1Z
            self.double__Str0ModelVec2X = double__Str0ModelVec2X
            self.double__Str0ModelVec2Y = double__Str0ModelVec2Y
            self.double__Str0ModelVec2Z = double__Str0ModelVec2Z
            self.double__Str0MeasQ0 = double__Str0MeasQ0
            self.double__Str0MeasQ1 = double__Str0MeasQ1
            self.double__Str0MeasQ2 = double__Str0MeasQ2
            self.double__Str0MeasQ3 = double__Str0MeasQ3
            self.uint8__Str0StarIdCount = uint8__Str0StarIdCount
            self.double__Str1MeasVec0X = double__Str1MeasVec0X
            self.double__Str1MeasVec0Y = double__Str1MeasVec0Y
            self.double__Str1MeasVec0Z = double__Str1MeasVec0Z
            self.double__Str1MeasVec1X = double__Str1MeasVec1X
            self.double__Str1MeasVec1Y = double__Str1MeasVec1Y
            self.double__Str1MeasVec1Z = double__Str1MeasVec1Z
            self.double__Str1MeasVec2X = double__Str1MeasVec2X
            self.double__Str1MeasVec2Y = double__Str1MeasVec2Y
            self.double__Str1MeasVec2Z = double__Str1MeasVec2Z
            self.double__Str1ModelVec0X = double__Str1ModelVec0X
            self.double__Str1ModelVec0Y = double__Str1ModelVec0Y
            self.double__Str1ModelVec0Z = double__Str1ModelVec0Z
            self.double__Str1ModelVec1X = double__Str1ModelVec1X
            self.double__Str1ModelVec1Y = double__Str1ModelVec1Y
            self.double__Str1ModelVec1Z = double__Str1ModelVec1Z
            self.double__Str1ModelVec2X = double__Str1ModelVec2X
            self.double__Str1ModelVec2Y = double__Str1ModelVec2Y
            self.double__Str1ModelVec2Z = double__Str1ModelVec2Z
            self.double__Str1MeasQ0 = double__Str1MeasQ0
            self.double__Str1MeasQ1 = double__Str1MeasQ1
            self.double__Str1MeasQ2 = double__Str1MeasQ2
            self.double__Str1MeasQ3 = double__Str1MeasQ3
            self.uint8__Str1StarIdCount = uint8__Str1StarIdCount
            self.uint32__GnssTimeSeconds = uint32__GnssTimeSeconds
            self.uint32__GnssTimeNs = uint32__GnssTimeNs
            self.int32__GnssSatPosX = int32__GnssSatPosX
            self.int32__GnssSatPosY = int32__GnssSatPosY
            self.int32__GnssSatPosZ = int32__GnssSatPosZ
            self.int32__GnssSatVelX = int32__GnssSatVelX
            self.int32__GnssSatVelY = int32__GnssSatVelY
            self.int32__GnssSatVelZ = int32__GnssSatVelZ
            self.float__ExtSensor0Float0 = float__ExtSensor0Float0
            self.float__ExtSensor0Float1 = float__ExtSensor0Float1
            self.float__ExtSensor0Float2 = float__ExtSensor0Float2
            self.float__ExtSensor0Float3 = float__ExtSensor0Float3
            self.float__ExtSensor0Float4 = float__ExtSensor0Float4
            self.float__ExtSensor0Float5 = float__ExtSensor0Float5
            self.float__ExtSensor1Float0 = float__ExtSensor1Float0
            self.float__ExtSensor1Float1 = float__ExtSensor1Float1
            self.float__ExtSensor1Float2 = float__ExtSensor1Float2
            self.float__ExtSensor1Float3 = float__ExtSensor1Float3
            self.float__ExtSensor1Float4 = float__ExtSensor1Float4
            self.float__ExtSensor1Float5 = float__ExtSensor1Float5
            self.float__Rwl0SpeedMeas = float__Rwl0SpeedMeas
            self.float__Rwl1SpeedMeas = float__Rwl1SpeedMeas
            self.float__Rwl2SpeedMeas = float__Rwl2SpeedMeas
            self.float__Rwl3SpeedMeas = float__Rwl3SpeedMeas
            self.bool__Fss0IsValid = bool__Fss0IsValid
            self.bool__Fss1IsValid = bool__Fss1IsValid
            self.bool__Fss2IsValid = bool__Fss2IsValid
            self.bool__Fss3IsValid = bool__Fss3IsValid
            self.bool__CssIsValid = bool__CssIsValid
            self.bool__Mag0IsValid = bool__Mag0IsValid
            self.bool__Mag1IsValid = bool__Mag1IsValid
            self.bool__Gyro0IsValid = bool__Gyro0IsValid
            self.bool__Gyro1IsValid = bool__Gyro1IsValid
            self.bool__Hss0IsValid = bool__Hss0IsValid
            self.bool__Hss1IsValid = bool__Hss1IsValid
            self.bool__Str0IsValid = bool__Str0IsValid
            self.bool__Str1IsValid = bool__Str1IsValid
            self.bool__GnssIsValid = bool__GnssIsValid
            self.bool__GnssIsNew = bool__GnssIsNew
            self.bool__ExtSensor0IsValid = bool__ExtSensor0IsValid
            self.bool__ExtSensor1IsValid = bool__ExtSensor1IsValid
            self.bool__Rwl0IsValid = bool__Rwl0IsValid
            self.bool__Rwl1IsValid = bool__Rwl1IsValid
            self.bool__Rwl2IsValid = bool__Rwl2IsValid
            self.bool__Rwl3IsValid = bool__Rwl3IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0RawCenX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0RawCenY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1RawCenX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1RawCenY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2RawCenX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2RawCenY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3RawCenX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3RawCenY)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css0Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css1Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css2Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css3Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css4Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css5Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css6Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css7Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css8Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Css9Raw)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0RawVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0RawVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0RawVecZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1RawVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1RawVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1RawVecZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro0RawRateX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro0RawRateY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro0RawRateZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro1RawRateX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro1RawRateY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro1RawRateZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0RawElev)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0RawRot)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1RawElev)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1RawRot)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasVec0X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasVec0Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasVec0Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasVec1X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasVec1Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasVec1Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasVec2X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasVec2Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasVec2Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelVec0X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelVec0Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelVec0Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelVec1X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelVec1Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelVec1Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelVec2X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelVec2Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelVec2Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasQ0)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasQ1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasQ2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasQ3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0StarIdCount)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasVec0X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasVec0Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasVec0Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasVec1X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasVec1Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasVec1Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasVec2X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasVec2Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasVec2Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelVec0X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelVec0Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelVec0Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelVec1X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelVec1Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelVec1Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelVec2X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelVec2Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelVec2Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasQ0)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasQ1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasQ2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasQ3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1StarIdCount)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__GnssTimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__GnssTimeNs)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatPosX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatPosY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatPosZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatVelX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatVelY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatVelZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float0)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float4)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float5)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float0)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float4)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float5)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0SpeedMeas)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1SpeedMeas)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2SpeedMeas)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3SpeedMeas)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss2IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss3IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__CssIsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyro0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyro1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Hss0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Hss1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__GnssIsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__GnssIsNew)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__ExtSensor0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__ExtSensor1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_SimSensorRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0RawCenX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0RawCenY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1RawCenX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1RawCenY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2RawCenX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2RawCenY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3RawCenX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3RawCenY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css0Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css1Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css2Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css3Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css4Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css5Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css6Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css7Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css8Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Css9Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0RawVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0RawVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0RawVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1RawVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1RawVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1RawVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro0RawRateX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro0RawRateY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro0RawRateZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro1RawRateX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro1RawRateY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro1RawRateZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0RawElev, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0RawRot, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1RawElev, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1RawRot, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasVec0X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasVec0Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasVec0Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasVec1X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasVec1Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasVec1Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasVec2X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasVec2Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasVec2Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelVec0X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelVec0Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelVec0Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelVec1X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelVec1Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelVec1Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelVec2X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelVec2Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelVec2Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasQ0, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasQ1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasQ2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasQ3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0StarIdCount, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasVec0X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasVec0Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasVec0Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasVec1X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasVec1Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasVec1Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasVec2X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasVec2Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasVec2Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelVec0X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelVec0Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelVec0Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelVec1X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelVec1Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelVec1Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelVec2X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelVec2Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelVec2Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasQ0, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasQ1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasQ2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasQ3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1StarIdCount, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__GnssTimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__GnssTimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatPosX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatPosY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatPosZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatVelX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatVelY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatVelZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float0, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float4, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float5, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float0, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float4, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float5, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0SpeedMeas, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1SpeedMeas, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2SpeedMeas, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3SpeedMeas, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss2IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss3IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__CssIsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyro0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyro1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Hss0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Hss1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__GnssIsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__GnssIsNew, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__ExtSensor0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__ExtSensor1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 667
    
    class struct_OpenLoopCommandMtq:
        def __init__(self, int16__Mtq0OnTimeCmd = 0, int16__Mtq1OnTimeCmd = 0, int16__Mtq2OnTimeCmd = 0):
            self.int16__Mtq0OnTimeCmd = int16__Mtq0OnTimeCmd
            self.int16__Mtq1OnTimeCmd = int16__Mtq1OnTimeCmd
            self.int16__Mtq2OnTimeCmd = int16__Mtq2OnTimeCmd
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Mtq0OnTimeCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Mtq1OnTimeCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Mtq2OnTimeCmd)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_OpenLoopCommandMtq()
    
            currentPos = pos
            
            (resultInstance.int16__Mtq0OnTimeCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Mtq1OnTimeCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Mtq2OnTimeCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 6
    
    class struct_OpenLoopCommandRwl:
        def __init__(self, float__Rwl0SpeedCmd = 0.0, float__Rwl1SpeedCmd = 0.0, float__Rwl2SpeedCmd = 0.0, float__Rwl3SpeedCmd = 0.0):
            self.float__Rwl0SpeedCmd = float__Rwl0SpeedCmd
            self.float__Rwl1SpeedCmd = float__Rwl1SpeedCmd
            self.float__Rwl2SpeedCmd = float__Rwl2SpeedCmd
            self.float__Rwl3SpeedCmd = float__Rwl3SpeedCmd
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0SpeedCmd)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1SpeedCmd)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2SpeedCmd)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3SpeedCmd)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_OpenLoopCommandRwl()
    
            currentPos = pos
            
            (resultInstance.float__Rwl0SpeedCmd, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1SpeedCmd, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2SpeedCmd, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3SpeedCmd, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 16
    
    class struct_OpenLoopCommandHxyzRW:
        def __init__(self, float__Hx = 0.0, float__Hy = 0.0, float__Hz = 0.0):
            self.float__Hx = float__Hx
            self.float__Hy = float__Hy
            self.float__Hz = float__Hz
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Hx)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Hy)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Hz)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_OpenLoopCommandHxyzRW()
    
            currentPos = pos
            
            (resultInstance.float__Hx, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Hy, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Hz, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 12
    
    class struct_ReferenceRpy:
        def __init__(self, float__CmdRpyRoll = 0.0, float__CmdRpyPitch = 0.0, float__CmdRpyYaw = 0.0):
            self.float__CmdRpyRoll = float__CmdRpyRoll
            self.float__CmdRpyPitch = float__CmdRpyPitch
            self.float__CmdRpyYaw = float__CmdRpyYaw
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdRpyRoll)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdRpyPitch)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdRpyYaw)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ReferenceRpy()
    
            currentPos = pos
            
            (resultInstance.float__CmdRpyRoll, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__CmdRpyPitch, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__CmdRpyYaw, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 12
    
    class struct_ReferenceTarget:
        def __init__(self, float__CmdTargetLatitude = 0.0, float__CmdTargetLongitude = 0.0, float__CmdTargetAltitude = 0.0):
            self.float__CmdTargetLatitude = float__CmdTargetLatitude
            self.float__CmdTargetLongitude = float__CmdTargetLongitude
            self.float__CmdTargetAltitude = float__CmdTargetAltitude
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdTargetLatitude)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdTargetLongitude)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdTargetAltitude)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ReferenceTarget()
    
            currentPos = pos
            
            (resultInstance.float__CmdTargetLatitude, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__CmdTargetLongitude, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__CmdTargetAltitude, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 12
    
    class struct_ReferenceIrcVector:
        def __init__(self, float__CmdEciVecX = 0.0, float__CmdEciVecY = 0.0, float__CmdEciVecZ = 0.0):
            self.float__CmdEciVecX = float__CmdEciVecX
            self.float__CmdEciVecY = float__CmdEciVecY
            self.float__CmdEciVecZ = float__CmdEciVecZ
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdEciVecX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdEciVecY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdEciVecZ)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ReferenceIrcVector()
    
            currentPos = pos
            
            (resultInstance.float__CmdEciVecX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__CmdEciVecY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__CmdEciVecZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 12
    
    class struct_ReferenceFmcParam:
        def __init__(self, e__CubeComputerControlProgram8_FmcFactor__CmdFmcFactor = 0, float__CmdFmcRoll = 0.0, uint32__CmdFmcUnixSeconds = 0, uint32__CmdFmcUnixNs = 0):
            self.e__CubeComputerControlProgram8_FmcFactor__CmdFmcFactor = e__CubeComputerControlProgram8_FmcFactor__CmdFmcFactor
            self.float__CmdFmcRoll = float__CmdFmcRoll
            self.uint32__CmdFmcUnixSeconds = uint32__CmdFmcUnixSeconds
            self.uint32__CmdFmcUnixNs = uint32__CmdFmcUnixNs
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcFactor(self.e__CubeComputerControlProgram8_FmcFactor__CmdFmcFactor).serialize()
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__CmdFmcRoll)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__CmdFmcUnixSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__CmdFmcUnixNs)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ReferenceFmcParam()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_FmcFactor__CmdFmcFactor, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcFactor.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__CmdFmcRoll, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__CmdFmcUnixSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__CmdFmcUnixNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 13
    
    class struct_DeployCommandMag:
        def __init__(self, bool__DeployMag0 = False, bool__DeployMag1 = False):
            self.bool__DeployMag0 = bool__DeployMag0
            self.bool__DeployMag1 = bool__DeployMag1
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__DeployMag0)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__DeployMag1)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_DeployCommandMag()
    
            currentPos = pos
            
            (resultInstance.bool__DeployMag0, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__DeployMag1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 2
    
    class struct_GnssSensorCmd:
        def __init__(self, uint32__GnssTimeSeconds = 0, uint32__GnssTimeNs = 0, int32__GnssSatPosX = 0, int32__GnssSatPosY = 0, int32__GnssSatPosZ = 0, int32__GnssSatVelX = 0, int32__GnssSatVelY = 0, int32__GnssSatVelZ = 0, bool__SyncTime = False):
            self.uint32__GnssTimeSeconds = uint32__GnssTimeSeconds
            self.uint32__GnssTimeNs = uint32__GnssTimeNs
            self.int32__GnssSatPosX = int32__GnssSatPosX
            self.int32__GnssSatPosY = int32__GnssSatPosY
            self.int32__GnssSatPosZ = int32__GnssSatPosZ
            self.int32__GnssSatVelX = int32__GnssSatVelX
            self.int32__GnssSatVelY = int32__GnssSatVelY
            self.int32__GnssSatVelZ = int32__GnssSatVelZ
            self.bool__SyncTime = bool__SyncTime
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__GnssTimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__GnssTimeNs)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatPosX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatPosY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatPosZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatVelX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatVelY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__GnssSatVelZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__SyncTime)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_GnssSensorCmd()
    
            currentPos = pos
            
            (resultInstance.uint32__GnssTimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__GnssTimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatPosX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatPosY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatPosZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatVelX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatVelY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__GnssSatVelZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__SyncTime, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 33
    
    class struct_FileTransferSetup:
        def __init__(self, e__CubeComputerControlProgram8_FtpOpCode__OpCode = 0, e__CubeComputerControlProgram8_FtpFiles__File = 0, e__CommonFrameworkTypes1_NodeType__Node = 0, uint32__SerialInt = 0, e__CommonFrameworkTypes1_ProgramType__Program = 0, uint32__FileSize = 0, e__CubeComputerControlProgram8_NodePort__ForcePort = 0, a__uint8__128__MetaData = []):
            self.e__CubeComputerControlProgram8_FtpOpCode__OpCode = e__CubeComputerControlProgram8_FtpOpCode__OpCode
            self.e__CubeComputerControlProgram8_FtpFiles__File = e__CubeComputerControlProgram8_FtpFiles__File
            self.e__CommonFrameworkTypes1_NodeType__Node = e__CommonFrameworkTypes1_NodeType__Node
            self.uint32__SerialInt = uint32__SerialInt
            self.e__CommonFrameworkTypes1_ProgramType__Program = e__CommonFrameworkTypes1_ProgramType__Program
            self.uint32__FileSize = uint32__FileSize
            self.e__CubeComputerControlProgram8_NodePort__ForcePort = e__CubeComputerControlProgram8_NodePort__ForcePort
            self.a__uint8__128__MetaData = a__uint8__128__MetaData
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpOpCode(self.e__CubeComputerControlProgram8_FtpOpCode__OpCode).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFiles(self.e__CubeComputerControlProgram8_FtpFiles__File).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType(self.e__CommonFrameworkTypes1_NodeType__Node).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__SerialInt)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_ProgramType(self.e__CommonFrameworkTypes1_ProgramType__Program).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__FileSize)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NodePort(self.e__CubeComputerControlProgram8_NodePort__ForcePort).serialize()
            actualLen = len(self.a__uint8__128__MetaData)
            
            result += SerDesHelpers.serdesType_basicArray.serialize("uint8", self.a__uint8__128__MetaData, 128)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_FileTransferSetup()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_FtpOpCode__OpCode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpOpCode.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_FtpFiles__File, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFiles.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CommonFrameworkTypes1_NodeType__Node, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__SerialInt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CommonFrameworkTypes1_ProgramType__Program, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_ProgramType.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__FileSize, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_NodePort__ForcePort, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NodePort.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.a__uint8__128__MetaData, bytesProcessed) = SerDesHelpers.serdesType_basicArray.deserialize("uint8", data, currentPos, 128)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 141
    
    class struct_CubeNodePortMap:
        def __init__(self, e__CommonFrameworkTypes1_NodeType__NodeTypeSlot0 = 0, uint32__SerialIntSlot0 = 0, e__CubeComputerControlProgram8_CqAssign__Port1Slot0 = 0, e__CubeComputerControlProgram8_CqAssign__Port2Slot0 = 0, e__CubeComputerControlProgram8_CqAssign__Port3Slot0 = 0, e__CubeComputerControlProgram8_CqAssign__Port4Slot0 = 0, e__CommonFrameworkTypes1_NodeType__NodeTypeSlot1 = 0, uint32__SerialIntSlot1 = 0, e__CubeComputerControlProgram8_CqAssign__Port1Slot1 = 0, e__CubeComputerControlProgram8_CqAssign__Port2Slot1 = 0, e__CubeComputerControlProgram8_CqAssign__Port3Slot1 = 0, e__CubeComputerControlProgram8_CqAssign__Port4Slot1 = 0, e__CommonFrameworkTypes1_NodeType__NodeTypeSlot2 = 0, uint32__SerialIntSlot2 = 0, e__CubeComputerControlProgram8_CqAssign__Port1Slot2 = 0, e__CubeComputerControlProgram8_CqAssign__Port2Slot2 = 0, e__CubeComputerControlProgram8_CqAssign__Port3Slot2 = 0, e__CubeComputerControlProgram8_CqAssign__Port4Slot2 = 0, e__CommonFrameworkTypes1_NodeType__NodeTypeSlot3 = 0, uint32__SerialIntSlot3 = 0, e__CubeComputerControlProgram8_CqAssign__Port1Slot3 = 0, e__CubeComputerControlProgram8_CqAssign__Port2Slot3 = 0, e__CubeComputerControlProgram8_CqAssign__Port3Slot3 = 0, e__CubeComputerControlProgram8_CqAssign__Port4Slot3 = 0):
            self.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot0 = e__CommonFrameworkTypes1_NodeType__NodeTypeSlot0
            self.uint32__SerialIntSlot0 = uint32__SerialIntSlot0
            self.e__CubeComputerControlProgram8_CqAssign__Port1Slot0 = e__CubeComputerControlProgram8_CqAssign__Port1Slot0
            self.e__CubeComputerControlProgram8_CqAssign__Port2Slot0 = e__CubeComputerControlProgram8_CqAssign__Port2Slot0
            self.e__CubeComputerControlProgram8_CqAssign__Port3Slot0 = e__CubeComputerControlProgram8_CqAssign__Port3Slot0
            self.e__CubeComputerControlProgram8_CqAssign__Port4Slot0 = e__CubeComputerControlProgram8_CqAssign__Port4Slot0
            self.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot1 = e__CommonFrameworkTypes1_NodeType__NodeTypeSlot1
            self.uint32__SerialIntSlot1 = uint32__SerialIntSlot1
            self.e__CubeComputerControlProgram8_CqAssign__Port1Slot1 = e__CubeComputerControlProgram8_CqAssign__Port1Slot1
            self.e__CubeComputerControlProgram8_CqAssign__Port2Slot1 = e__CubeComputerControlProgram8_CqAssign__Port2Slot1
            self.e__CubeComputerControlProgram8_CqAssign__Port3Slot1 = e__CubeComputerControlProgram8_CqAssign__Port3Slot1
            self.e__CubeComputerControlProgram8_CqAssign__Port4Slot1 = e__CubeComputerControlProgram8_CqAssign__Port4Slot1
            self.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot2 = e__CommonFrameworkTypes1_NodeType__NodeTypeSlot2
            self.uint32__SerialIntSlot2 = uint32__SerialIntSlot2
            self.e__CubeComputerControlProgram8_CqAssign__Port1Slot2 = e__CubeComputerControlProgram8_CqAssign__Port1Slot2
            self.e__CubeComputerControlProgram8_CqAssign__Port2Slot2 = e__CubeComputerControlProgram8_CqAssign__Port2Slot2
            self.e__CubeComputerControlProgram8_CqAssign__Port3Slot2 = e__CubeComputerControlProgram8_CqAssign__Port3Slot2
            self.e__CubeComputerControlProgram8_CqAssign__Port4Slot2 = e__CubeComputerControlProgram8_CqAssign__Port4Slot2
            self.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot3 = e__CommonFrameworkTypes1_NodeType__NodeTypeSlot3
            self.uint32__SerialIntSlot3 = uint32__SerialIntSlot3
            self.e__CubeComputerControlProgram8_CqAssign__Port1Slot3 = e__CubeComputerControlProgram8_CqAssign__Port1Slot3
            self.e__CubeComputerControlProgram8_CqAssign__Port2Slot3 = e__CubeComputerControlProgram8_CqAssign__Port2Slot3
            self.e__CubeComputerControlProgram8_CqAssign__Port3Slot3 = e__CubeComputerControlProgram8_CqAssign__Port3Slot3
            self.e__CubeComputerControlProgram8_CqAssign__Port4Slot3 = e__CubeComputerControlProgram8_CqAssign__Port4Slot3
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType(self.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot0).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__SerialIntSlot0)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port1Slot0).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port2Slot0).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port3Slot0).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port4Slot0).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType(self.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot1).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__SerialIntSlot1)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port1Slot1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port2Slot1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port3Slot1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port4Slot1).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType(self.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot2).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__SerialIntSlot2)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port1Slot2).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port2Slot2).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port3Slot2).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port4Slot2).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType(self.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot3).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__SerialIntSlot3)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port1Slot3).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port2Slot3).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port3Slot3).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign(self.e__CubeComputerControlProgram8_CqAssign__Port4Slot3).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_CubeNodePortMap()
    
            currentPos = pos
            
            (resultInstance.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot0, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__SerialIntSlot0, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port1Slot0, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port2Slot0, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port3Slot0, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port4Slot0, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__SerialIntSlot1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port1Slot1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port2Slot1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port3Slot1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port4Slot1, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__SerialIntSlot2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port1Slot2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port2Slot2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port3Slot2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port4Slot2, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CommonFrameworkTypes1_NodeType__NodeTypeSlot3, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__SerialIntSlot3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port1Slot3, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port2Slot3, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port3Slot3, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_CqAssign__Port4Slot3, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_CqAssign.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 36
    
    class struct_TlmHil:
        def __init__(self, e__CubeComputerControlProgram8_ConModeSelect__ConModeActive = 0, e__CubeComputerControlProgram8_EstModeSelect__EstModeActive = 0, e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive = 0, e__CubeComputerControlProgram8_NavSource__NavSource = 0, bool__Asgp4Error = False, bool__HilSyncOk = False, float__Rwl0CmdSpeed = 0.0, float__Rwl1CmdSpeed = 0.0, float__Rwl2CmdSpeed = 0.0, float__Rwl3CmdSpeed = 0.0, int16__Mtq0CmdOnTime = 0, int16__Mtq1CmdOnTime = 0, int16__Mtq2CmdOnTime = 0, uint16__MagConTimeout = 0, bool__Rwl0ErrorFlag = False, bool__Rwl1ErrorFlag = False, bool__Rwl2ErrorFlag = False, bool__Rwl3ErrorFlag = False, bool__Rwl0ActiveFlag = False, bool__Rwl1ActiveFlag = False, bool__Rwl2ActiveFlag = False, bool__Rwl3ActiveFlag = False, float__EstQuatQ0 = 0.0, float__EstQuatQ1 = 0.0, float__EstQuatQ2 = 0.0, float__EstQuatQ3 = 0.0, float__EstRateOrcX = 0.0, float__EstRateOrcY = 0.0, float__EstRateOrcZ = 0.0, int32__SatPosEciX = 0, int32__SatPosEciY = 0, int32__SatPosEciZ = 0, int16__SatVelEciX = 0, int16__SatVelEciY = 0, int16__SatVelEciZ = 0, float__RpyCmdRoll = 0.0, float__RpyCmdPitch = 0.0, float__RpyCmdYaw = 0.0, uint16__Asgp4BatchCtr = 0, uint16__Asgp4PosDelta = 0, float__Rwl0MeasSpeed = 0.0, float__Rwl1MeasSpeed = 0.0, float__Rwl2MeasSpeed = 0.0, float__Rwl3MeasSpeed = 0.0, bool__Rwl0MeasValid = False, bool__Rwl1MeasValid = False, bool__Rwl2MeasValid = False, bool__Rwl3MeasValid = False, e__CubeComputerControlProgram8_FmcStage__FmcStage = 0):
            self.e__CubeComputerControlProgram8_ConModeSelect__ConModeActive = e__CubeComputerControlProgram8_ConModeSelect__ConModeActive
            self.e__CubeComputerControlProgram8_EstModeSelect__EstModeActive = e__CubeComputerControlProgram8_EstModeSelect__EstModeActive
            self.e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive = e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive
            self.e__CubeComputerControlProgram8_NavSource__NavSource = e__CubeComputerControlProgram8_NavSource__NavSource
            self.bool__Asgp4Error = bool__Asgp4Error
            self.bool__HilSyncOk = bool__HilSyncOk
            self.float__Rwl0CmdSpeed = float__Rwl0CmdSpeed
            self.float__Rwl1CmdSpeed = float__Rwl1CmdSpeed
            self.float__Rwl2CmdSpeed = float__Rwl2CmdSpeed
            self.float__Rwl3CmdSpeed = float__Rwl3CmdSpeed
            self.int16__Mtq0CmdOnTime = int16__Mtq0CmdOnTime
            self.int16__Mtq1CmdOnTime = int16__Mtq1CmdOnTime
            self.int16__Mtq2CmdOnTime = int16__Mtq2CmdOnTime
            self.uint16__MagConTimeout = uint16__MagConTimeout
            self.bool__Rwl0ErrorFlag = bool__Rwl0ErrorFlag
            self.bool__Rwl1ErrorFlag = bool__Rwl1ErrorFlag
            self.bool__Rwl2ErrorFlag = bool__Rwl2ErrorFlag
            self.bool__Rwl3ErrorFlag = bool__Rwl3ErrorFlag
            self.bool__Rwl0ActiveFlag = bool__Rwl0ActiveFlag
            self.bool__Rwl1ActiveFlag = bool__Rwl1ActiveFlag
            self.bool__Rwl2ActiveFlag = bool__Rwl2ActiveFlag
            self.bool__Rwl3ActiveFlag = bool__Rwl3ActiveFlag
            self.float__EstQuatQ0 = float__EstQuatQ0
            self.float__EstQuatQ1 = float__EstQuatQ1
            self.float__EstQuatQ2 = float__EstQuatQ2
            self.float__EstQuatQ3 = float__EstQuatQ3
            self.float__EstRateOrcX = float__EstRateOrcX
            self.float__EstRateOrcY = float__EstRateOrcY
            self.float__EstRateOrcZ = float__EstRateOrcZ
            self.int32__SatPosEciX = int32__SatPosEciX
            self.int32__SatPosEciY = int32__SatPosEciY
            self.int32__SatPosEciZ = int32__SatPosEciZ
            self.int16__SatVelEciX = int16__SatVelEciX
            self.int16__SatVelEciY = int16__SatVelEciY
            self.int16__SatVelEciZ = int16__SatVelEciZ
            self.float__RpyCmdRoll = float__RpyCmdRoll
            self.float__RpyCmdPitch = float__RpyCmdPitch
            self.float__RpyCmdYaw = float__RpyCmdYaw
            self.uint16__Asgp4BatchCtr = uint16__Asgp4BatchCtr
            self.uint16__Asgp4PosDelta = uint16__Asgp4PosDelta
            self.float__Rwl0MeasSpeed = float__Rwl0MeasSpeed
            self.float__Rwl1MeasSpeed = float__Rwl1MeasSpeed
            self.float__Rwl2MeasSpeed = float__Rwl2MeasSpeed
            self.float__Rwl3MeasSpeed = float__Rwl3MeasSpeed
            self.bool__Rwl0MeasValid = bool__Rwl0MeasValid
            self.bool__Rwl1MeasValid = bool__Rwl1MeasValid
            self.bool__Rwl2MeasValid = bool__Rwl2MeasValid
            self.bool__Rwl3MeasValid = bool__Rwl3MeasValid
            self.e__CubeComputerControlProgram8_FmcStage__FmcStage = e__CubeComputerControlProgram8_FmcStage__FmcStage
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect(self.e__CubeComputerControlProgram8_ConModeSelect__ConModeActive).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect(self.e__CubeComputerControlProgram8_EstModeSelect__EstModeActive).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OrbModeSelect(self.e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NavSource(self.e__CubeComputerControlProgram8_NavSource__NavSource).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Asgp4Error)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__HilSyncOk)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0CmdSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1CmdSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2CmdSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3CmdSpeed)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Mtq0CmdOnTime)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Mtq1CmdOnTime)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Mtq2CmdOnTime)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__MagConTimeout)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0ErrorFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1ErrorFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2ErrorFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3ErrorFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0ActiveFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1ActiveFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2ActiveFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3ActiveFlag)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstQuatQ0)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstQuatQ1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstQuatQ2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstQuatQ3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstRateOrcX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstRateOrcY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstRateOrcZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__SatPosEciX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__SatPosEciY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__SatPosEciZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__SatVelEciX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__SatVelEciY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__SatVelEciZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RpyCmdRoll)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RpyCmdPitch)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RpyCmdYaw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Asgp4BatchCtr)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Asgp4PosDelta)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0MeasSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1MeasSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2MeasSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3MeasSpeed)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0MeasValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1MeasValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2MeasValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3MeasValid)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcStage(self.e__CubeComputerControlProgram8_FmcStage__FmcStage).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmHil()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_ConModeSelect__ConModeActive, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_EstModeSelect__EstModeActive, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OrbModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_NavSource__NavSource, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NavSource.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Asgp4Error, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__HilSyncOk, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0CmdSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1CmdSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2CmdSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3CmdSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Mtq0CmdOnTime, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Mtq1CmdOnTime, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Mtq2CmdOnTime, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__MagConTimeout, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0ErrorFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1ErrorFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2ErrorFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3ErrorFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0ActiveFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1ActiveFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2ActiveFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3ActiveFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstQuatQ0, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstQuatQ1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstQuatQ2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstQuatQ3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstRateOrcX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstRateOrcY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstRateOrcZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__SatPosEciX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__SatPosEciY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__SatPosEciZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__SatVelEciX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__SatVelEciY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__SatVelEciZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RpyCmdRoll, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RpyCmdPitch, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RpyCmdYaw, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Asgp4BatchCtr, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Asgp4PosDelta, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0MeasValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1MeasValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2MeasValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3MeasValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_FmcStage__FmcStage, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcStage.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 121
    
    class struct_TlmExecutionPoint:
        def __init__(self, e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint = 0):
            self.e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint = e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AcpExecutionPoint(self.e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmExecutionPoint()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AcpExecutionPoint.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 1
    
    class struct_TlmAsgp4:
        def __init__(self, double__Asgp4Epoch = 0.0, double__Asgp4Incl = 0.0, double__Asgp4Raan = 0.0, double__Asgp4Eccen = 0.0, double__Asgp4AP = 0.0, double__Asgp4MA = 0.0, double__Asgp4MM = 0.0, double__Asgp4Bstar = 0.0):
            self.double__Asgp4Epoch = double__Asgp4Epoch
            self.double__Asgp4Incl = double__Asgp4Incl
            self.double__Asgp4Raan = double__Asgp4Raan
            self.double__Asgp4Eccen = double__Asgp4Eccen
            self.double__Asgp4AP = double__Asgp4AP
            self.double__Asgp4MA = double__Asgp4MA
            self.double__Asgp4MM = double__Asgp4MM
            self.double__Asgp4Bstar = double__Asgp4Bstar
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Asgp4Epoch)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Asgp4Incl)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Asgp4Raan)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Asgp4Eccen)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Asgp4AP)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Asgp4MA)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Asgp4MM)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Asgp4Bstar)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmAsgp4()
    
            currentPos = pos
            
            (resultInstance.double__Asgp4Epoch, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Asgp4Incl, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Asgp4Raan, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Asgp4Eccen, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Asgp4AP, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Asgp4MA, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Asgp4MM, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Asgp4Bstar, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 64
    
    class struct_TlmNodeInitState:
        def __init__(self, e__CubeComputerControlProgram8_InitState__Rwl0State = 0, e__CubeComputerControlProgram8_InitState__Rwl1State = 0, e__CubeComputerControlProgram8_InitState__Rwl2State = 0, e__CubeComputerControlProgram8_InitState__Rwl3State = 0, e__CubeComputerControlProgram8_InitState__Mag0State = 0, e__CubeComputerControlProgram8_InitState__Mag1State = 0, e__CubeComputerControlProgram8_InitState__Gyro0State = 0, e__CubeComputerControlProgram8_InitState__Gyro1State = 0, e__CubeComputerControlProgram8_InitState__Fss0State = 0, e__CubeComputerControlProgram8_InitState__Fss1State = 0, e__CubeComputerControlProgram8_InitState__Fss2State = 0, e__CubeComputerControlProgram8_InitState__Fss3State = 0, e__CubeComputerControlProgram8_InitState__Hss0State = 0, e__CubeComputerControlProgram8_InitState__Hss1State = 0, e__CubeComputerControlProgram8_InitState__Str0State = 0, e__CubeComputerControlProgram8_InitState__Str1State = 0, e__CubeComputerControlProgram8_InitState__ExtSensor0State = 0, e__CubeComputerControlProgram8_InitState__ExtSensor1State = 0, e__CubeComputerControlProgram8_InitState__ExtGyro0State = 0, e__CubeComputerControlProgram8_InitState__ExtGyro1State = 0):
            self.e__CubeComputerControlProgram8_InitState__Rwl0State = e__CubeComputerControlProgram8_InitState__Rwl0State
            self.e__CubeComputerControlProgram8_InitState__Rwl1State = e__CubeComputerControlProgram8_InitState__Rwl1State
            self.e__CubeComputerControlProgram8_InitState__Rwl2State = e__CubeComputerControlProgram8_InitState__Rwl2State
            self.e__CubeComputerControlProgram8_InitState__Rwl3State = e__CubeComputerControlProgram8_InitState__Rwl3State
            self.e__CubeComputerControlProgram8_InitState__Mag0State = e__CubeComputerControlProgram8_InitState__Mag0State
            self.e__CubeComputerControlProgram8_InitState__Mag1State = e__CubeComputerControlProgram8_InitState__Mag1State
            self.e__CubeComputerControlProgram8_InitState__Gyro0State = e__CubeComputerControlProgram8_InitState__Gyro0State
            self.e__CubeComputerControlProgram8_InitState__Gyro1State = e__CubeComputerControlProgram8_InitState__Gyro1State
            self.e__CubeComputerControlProgram8_InitState__Fss0State = e__CubeComputerControlProgram8_InitState__Fss0State
            self.e__CubeComputerControlProgram8_InitState__Fss1State = e__CubeComputerControlProgram8_InitState__Fss1State
            self.e__CubeComputerControlProgram8_InitState__Fss2State = e__CubeComputerControlProgram8_InitState__Fss2State
            self.e__CubeComputerControlProgram8_InitState__Fss3State = e__CubeComputerControlProgram8_InitState__Fss3State
            self.e__CubeComputerControlProgram8_InitState__Hss0State = e__CubeComputerControlProgram8_InitState__Hss0State
            self.e__CubeComputerControlProgram8_InitState__Hss1State = e__CubeComputerControlProgram8_InitState__Hss1State
            self.e__CubeComputerControlProgram8_InitState__Str0State = e__CubeComputerControlProgram8_InitState__Str0State
            self.e__CubeComputerControlProgram8_InitState__Str1State = e__CubeComputerControlProgram8_InitState__Str1State
            self.e__CubeComputerControlProgram8_InitState__ExtSensor0State = e__CubeComputerControlProgram8_InitState__ExtSensor0State
            self.e__CubeComputerControlProgram8_InitState__ExtSensor1State = e__CubeComputerControlProgram8_InitState__ExtSensor1State
            self.e__CubeComputerControlProgram8_InitState__ExtGyro0State = e__CubeComputerControlProgram8_InitState__ExtGyro0State
            self.e__CubeComputerControlProgram8_InitState__ExtGyro1State = e__CubeComputerControlProgram8_InitState__ExtGyro1State
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Rwl0State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Rwl1State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Rwl2State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Rwl3State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Mag0State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Mag1State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Gyro0State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Gyro1State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Fss0State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Fss1State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Fss2State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Fss3State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Hss0State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Hss1State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Str0State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__Str1State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__ExtSensor0State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__ExtSensor1State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__ExtGyro0State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState(self.e__CubeComputerControlProgram8_InitState__ExtGyro1State).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmNodeInitState()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Rwl0State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Rwl1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Rwl2State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Rwl3State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Mag0State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Mag1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Gyro0State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Gyro1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Fss0State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Fss1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Fss2State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Fss3State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Hss0State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Hss1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Str0State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__Str1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__ExtSensor0State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__ExtSensor1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__ExtGyro0State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_InitState__ExtGyro1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_InitState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 20
    
    class struct_TlmLitefuforsHealth:
        def __init__(self, double__Gyr0McuTemp = 0.0, double__Gyr0McuCurrent = 0.0, uint16__Gyr0McuVoltage = 0, double__Gyr0Current1 = 0.0, double__Gyr0Current2 = 0.0, double__Gyr0Current3 = 0.0, bool__Gyr0Overcurrent1 = False, bool__Gyr0Overcurrent2 = False, bool__Gyr0Overcurrent3 = False, double__Gyr1McuTemp = 0.0, double__Gyr1McuCurrent = 0.0, uint16__Gyr1McuVoltage = 0, double__Gyr1Current1 = 0.0, double__Gyr1Current2 = 0.0, double__Gyr1Current3 = 0.0, bool__Gyr1Overcurrent1 = False, bool__Gyr1Overcurrent2 = False, bool__Gyr1Overcurrent3 = False):
            self.double__Gyr0McuTemp = double__Gyr0McuTemp
            self.double__Gyr0McuCurrent = double__Gyr0McuCurrent
            self.uint16__Gyr0McuVoltage = uint16__Gyr0McuVoltage
            self.double__Gyr0Current1 = double__Gyr0Current1
            self.double__Gyr0Current2 = double__Gyr0Current2
            self.double__Gyr0Current3 = double__Gyr0Current3
            self.bool__Gyr0Overcurrent1 = bool__Gyr0Overcurrent1
            self.bool__Gyr0Overcurrent2 = bool__Gyr0Overcurrent2
            self.bool__Gyr0Overcurrent3 = bool__Gyr0Overcurrent3
            self.double__Gyr1McuTemp = double__Gyr1McuTemp
            self.double__Gyr1McuCurrent = double__Gyr1McuCurrent
            self.uint16__Gyr1McuVoltage = uint16__Gyr1McuVoltage
            self.double__Gyr1Current1 = double__Gyr1Current1
            self.double__Gyr1Current2 = double__Gyr1Current2
            self.double__Gyr1Current3 = double__Gyr1Current3
            self.bool__Gyr1Overcurrent1 = bool__Gyr1Overcurrent1
            self.bool__Gyr1Overcurrent2 = bool__Gyr1Overcurrent2
            self.bool__Gyr1Overcurrent3 = bool__Gyr1Overcurrent3
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr0McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr0McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Gyr0McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr0Current1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr0Current2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr0Current3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0Overcurrent1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0Overcurrent2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0Overcurrent3)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr1McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr1McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Gyr1McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr1Current1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr1Current2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Gyr1Current3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1Overcurrent1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1Overcurrent2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1Overcurrent3)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmLitefuforsHealth()
    
            currentPos = pos
            
            (resultInstance.double__Gyr0McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Gyr0McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Gyr0McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Gyr0Current1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Gyr0Current2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Gyr0Current3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0Overcurrent1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0Overcurrent2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0Overcurrent3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Gyr1McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Gyr1McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Gyr1McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Gyr1Current1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Gyr1Current2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Gyr1Current3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1Overcurrent1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1Overcurrent2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1Overcurrent3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 90
    
    class struct_FileTransferStatus:
        def __init__(self, e__CubeComputerControlProgram8_FtpState__State = 0, e__CubeComputerControlProgram8_FtpUpgradeState__UpgradeState = 0, uint32__DataRemain = 0, uint32__ErrorCode = 0, bool__BusyError = False, bool__FileMetaError = False, bool__VersionError = False, bool__NodeExistError = False, bool__NodeExpectError = False, bool__FileCrcError = False, bool__FileSizeError = False, bool__FileError = False, bool__FileInvalidError = False, bool__FileFullError = False, bool__FileEmptyError = False, bool__ReadError = False, bool__WriteError = False, bool__EraseError = False, bool__FrameSizeError = False, bool__TimeoutError = False, bool__NodeCommsError = False, bool__NodeUsedError = False):
            self.e__CubeComputerControlProgram8_FtpState__State = e__CubeComputerControlProgram8_FtpState__State
            self.e__CubeComputerControlProgram8_FtpUpgradeState__UpgradeState = e__CubeComputerControlProgram8_FtpUpgradeState__UpgradeState
            self.uint32__DataRemain = uint32__DataRemain
            self.uint32__ErrorCode = uint32__ErrorCode
            self.bool__BusyError = bool__BusyError
            self.bool__FileMetaError = bool__FileMetaError
            self.bool__VersionError = bool__VersionError
            self.bool__NodeExistError = bool__NodeExistError
            self.bool__NodeExpectError = bool__NodeExpectError
            self.bool__FileCrcError = bool__FileCrcError
            self.bool__FileSizeError = bool__FileSizeError
            self.bool__FileError = bool__FileError
            self.bool__FileInvalidError = bool__FileInvalidError
            self.bool__FileFullError = bool__FileFullError
            self.bool__FileEmptyError = bool__FileEmptyError
            self.bool__ReadError = bool__ReadError
            self.bool__WriteError = bool__WriteError
            self.bool__EraseError = bool__EraseError
            self.bool__FrameSizeError = bool__FrameSizeError
            self.bool__TimeoutError = bool__TimeoutError
            self.bool__NodeCommsError = bool__NodeCommsError
            self.bool__NodeUsedError = bool__NodeUsedError
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpState(self.e__CubeComputerControlProgram8_FtpState__State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpUpgradeState(self.e__CubeComputerControlProgram8_FtpUpgradeState__UpgradeState).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__DataRemain)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__ErrorCode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__BusyError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__FileMetaError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__VersionError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__NodeExistError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__NodeExpectError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__FileCrcError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__FileSizeError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__FileError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__FileInvalidError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__FileFullError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__FileEmptyError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__ReadError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__WriteError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__EraseError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__FrameSizeError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__TimeoutError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__NodeCommsError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__NodeUsedError)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_FileTransferStatus()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_FtpState__State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_FtpUpgradeState__UpgradeState, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpUpgradeState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__DataRemain, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__ErrorCode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__BusyError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__FileMetaError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__VersionError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__NodeExistError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__NodeExpectError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__FileCrcError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__FileSizeError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__FileError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__FileInvalidError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__FileFullError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__FileEmptyError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__ReadError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__WriteError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__EraseError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__FrameSizeError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__TimeoutError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__NodeCommsError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__NodeUsedError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 28
    
    class struct_FileInfo:
        def __init__(self, e__CubeComputerControlProgram8_FtpFiles__File = 0, e__CubeComputerControlProgram8_FtpBackend__Backend = 0, e__CubeComputerControlProgram8_FtpFileType__Type = 0, uint32__Size = 0, uint32__AllocSize = 0, uint32__VectTblOffset = 0, uint32__UnixTimeSeconds = 0, uint32__UnixTimeNanoSeconds = 0, uint32__Crc = 0, a__uint8__32__Component = [], a__uint8__32__Program = [], uint8__FirmwareMajorVersion = 0, uint8__FirmwareMinorVersion = 0, uint16__FirmwarePatchVersion = 0, uint8__SystemMajorVersion = 0, uint8__SystemMinorVersion = 0, uint16__SystemPatchVersion = 0, e__CommonFrameworkTypes1_NodeType__OwnerNodeType = 0, uint32__OwnerSerialInt = 0, e__CommonFrameworkTypes1_ProgramType__OwnerProgram = 0):
            self.e__CubeComputerControlProgram8_FtpFiles__File = e__CubeComputerControlProgram8_FtpFiles__File
            self.e__CubeComputerControlProgram8_FtpBackend__Backend = e__CubeComputerControlProgram8_FtpBackend__Backend
            self.e__CubeComputerControlProgram8_FtpFileType__Type = e__CubeComputerControlProgram8_FtpFileType__Type
            self.uint32__Size = uint32__Size
            self.uint32__AllocSize = uint32__AllocSize
            self.uint32__VectTblOffset = uint32__VectTblOffset
            self.uint32__UnixTimeSeconds = uint32__UnixTimeSeconds
            self.uint32__UnixTimeNanoSeconds = uint32__UnixTimeNanoSeconds
            self.uint32__Crc = uint32__Crc
            self.a__uint8__32__Component = a__uint8__32__Component
            self.a__uint8__32__Program = a__uint8__32__Program
            self.uint8__FirmwareMajorVersion = uint8__FirmwareMajorVersion
            self.uint8__FirmwareMinorVersion = uint8__FirmwareMinorVersion
            self.uint16__FirmwarePatchVersion = uint16__FirmwarePatchVersion
            self.uint8__SystemMajorVersion = uint8__SystemMajorVersion
            self.uint8__SystemMinorVersion = uint8__SystemMinorVersion
            self.uint16__SystemPatchVersion = uint16__SystemPatchVersion
            self.e__CommonFrameworkTypes1_NodeType__OwnerNodeType = e__CommonFrameworkTypes1_NodeType__OwnerNodeType
            self.uint32__OwnerSerialInt = uint32__OwnerSerialInt
            self.e__CommonFrameworkTypes1_ProgramType__OwnerProgram = e__CommonFrameworkTypes1_ProgramType__OwnerProgram
    
        def serialize(self):
            result = bytearray()
    
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFiles(self.e__CubeComputerControlProgram8_FtpFiles__File).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpBackend(self.e__CubeComputerControlProgram8_FtpBackend__Backend).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFileType(self.e__CubeComputerControlProgram8_FtpFileType__Type).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Size)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__AllocSize)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__VectTblOffset)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__UnixTimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__UnixTimeNanoSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Crc)
            actualLen = len(self.a__uint8__32__Component)
            
            result += SerDesHelpers.serdesType_basicArray.serialize("uint8", self.a__uint8__32__Component, 32)
            actualLen = len(self.a__uint8__32__Program)
            
            result += SerDesHelpers.serdesType_basicArray.serialize("uint8", self.a__uint8__32__Program, 32)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__FirmwareMajorVersion)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__FirmwareMinorVersion)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__FirmwarePatchVersion)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SystemMajorVersion)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__SystemMinorVersion)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__SystemPatchVersion)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType(self.e__CommonFrameworkTypes1_NodeType__OwnerNodeType).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__OwnerSerialInt)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_ProgramType(self.e__CommonFrameworkTypes1_ProgramType__OwnerProgram).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_FileInfo()
    
            currentPos = pos
            
            (resultInstance.e__CubeComputerControlProgram8_FtpFiles__File, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFiles.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_FtpBackend__Backend, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpBackend.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_FtpFileType__Type, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FtpFileType.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Size, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__AllocSize, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__VectTblOffset, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__UnixTimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__UnixTimeNanoSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Crc, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.a__uint8__32__Component, bytesProcessed) = SerDesHelpers.serdesType_basicArray.deserialize("uint8", data, currentPos, 32)
            currentPos += bytesProcessed
            
            
            (resultInstance.a__uint8__32__Program, bytesProcessed) = SerDesHelpers.serdesType_basicArray.deserialize("uint8", data, currentPos, 32)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__FirmwareMajorVersion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__FirmwareMinorVersion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__FirmwarePatchVersion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__SystemMajorVersion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__SystemMinorVersion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__SystemPatchVersion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CommonFrameworkTypes1_NodeType__OwnerNodeType, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_NodeType.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__OwnerSerialInt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CommonFrameworkTypes1_ProgramType__OwnerProgram, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CommonFrameworkTypes1_ProgramType.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 105
    
    class struct_TlmSensorRawCss:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, uint8__Css0Raw = 0, uint8__Css1Raw = 0, uint8__Css2Raw = 0, uint8__Css3Raw = 0, uint8__Css4Raw = 0, uint8__Css5Raw = 0, uint8__Css6Raw = 0, uint8__Css7Raw = 0, uint8__Css8Raw = 0, uint8__Css9Raw = 0, bool__CssIsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.uint8__Css0Raw = uint8__Css0Raw
            self.uint8__Css1Raw = uint8__Css1Raw
            self.uint8__Css2Raw = uint8__Css2Raw
            self.uint8__Css3Raw = uint8__Css3Raw
            self.uint8__Css4Raw = uint8__Css4Raw
            self.uint8__Css5Raw = uint8__Css5Raw
            self.uint8__Css6Raw = uint8__Css6Raw
            self.uint8__Css7Raw = uint8__Css7Raw
            self.uint8__Css8Raw = uint8__Css8Raw
            self.uint8__Css9Raw = uint8__Css9Raw
            self.bool__CssIsValid = bool__CssIsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css0Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css1Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css2Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css3Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css4Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css5Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css6Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css7Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css8Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Css9Raw)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__CssIsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorRawCss()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css0Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css1Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css2Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css3Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css4Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css5Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css6Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css7Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css8Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Css9Raw, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__CssIsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 19
    
    class struct_TlmSensorRawMag:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__Mag0RawVecX = 0.0, double__Mag0RawVecY = 0.0, double__Mag0RawVecZ = 0.0, double__Mag1RawVecX = 0.0, double__Mag1RawVecY = 0.0, double__Mag1RawVecZ = 0.0, bool__Mag0IsValid = False, bool__Mag1IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__Mag0RawVecX = double__Mag0RawVecX
            self.double__Mag0RawVecY = double__Mag0RawVecY
            self.double__Mag0RawVecZ = double__Mag0RawVecZ
            self.double__Mag1RawVecX = double__Mag1RawVecX
            self.double__Mag1RawVecY = double__Mag1RawVecY
            self.double__Mag1RawVecZ = double__Mag1RawVecZ
            self.bool__Mag0IsValid = bool__Mag0IsValid
            self.bool__Mag1IsValid = bool__Mag1IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0RawVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0RawVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0RawVecZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1RawVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1RawVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1RawVecZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag1IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorRawMag()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0RawVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0RawVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0RawVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1RawVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1RawVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1RawVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 58
    
    class struct_TlmSensorRawGyro:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, float__Gyro0RawRateX = 0.0, float__Gyro0RawRateY = 0.0, float__Gyro0RawRateZ = 0.0, float__Gyro1RawRateX = 0.0, float__Gyro1RawRateY = 0.0, float__Gyro1RawRateZ = 0.0, bool__Gyro0IsValid = False, bool__Gyro1IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.float__Gyro0RawRateX = float__Gyro0RawRateX
            self.float__Gyro0RawRateY = float__Gyro0RawRateY
            self.float__Gyro0RawRateZ = float__Gyro0RawRateZ
            self.float__Gyro1RawRateX = float__Gyro1RawRateX
            self.float__Gyro1RawRateY = float__Gyro1RawRateY
            self.float__Gyro1RawRateZ = float__Gyro1RawRateZ
            self.bool__Gyro0IsValid = bool__Gyro0IsValid
            self.bool__Gyro1IsValid = bool__Gyro1IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro0RawRateX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro0RawRateY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro0RawRateZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro1RawRateX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro1RawRateY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro1RawRateZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyro0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyro1IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorRawGyro()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro0RawRateX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro0RawRateY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro0RawRateZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro1RawRateX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro1RawRateY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro1RawRateZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyro0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyro1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 34
    
    class struct_TlmSensorRawRwl:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, float__Rwl0MeasSpeed = 0.0, float__Rwl1MeasSpeed = 0.0, float__Rwl2MeasSpeed = 0.0, float__Rwl3MeasSpeed = 0.0, bool__Rwl0IsValid = False, bool__Rwl1IsValid = False, bool__Rwl2IsValid = False, bool__Rwl3IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.float__Rwl0MeasSpeed = float__Rwl0MeasSpeed
            self.float__Rwl1MeasSpeed = float__Rwl1MeasSpeed
            self.float__Rwl2MeasSpeed = float__Rwl2MeasSpeed
            self.float__Rwl3MeasSpeed = float__Rwl3MeasSpeed
            self.bool__Rwl0IsValid = bool__Rwl0IsValid
            self.bool__Rwl1IsValid = bool__Rwl1IsValid
            self.bool__Rwl2IsValid = bool__Rwl2IsValid
            self.bool__Rwl3IsValid = bool__Rwl3IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0MeasSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1MeasSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2MeasSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3MeasSpeed)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorRawRwl()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 28
    
    class struct_TlmSensorCalFss:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__Fss0CalVecX = 0.0, double__Fss0CalVecY = 0.0, double__Fss0CalVecZ = 0.0, double__Fss1CalVecX = 0.0, double__Fss1CalVecY = 0.0, double__Fss1CalVecZ = 0.0, double__Fss2CalVecX = 0.0, double__Fss2CalVecY = 0.0, double__Fss2CalVecZ = 0.0, double__Fss3CalVecX = 0.0, double__Fss3CalVecY = 0.0, double__Fss3CalVecZ = 0.0, bool__Fss0IsValid = False, bool__Fss1IsValid = False, bool__Fss2IsValid = False, bool__Fss3IsValid = False, bool__Fss0IsBest = False, bool__Fss1IsBest = False, bool__Fss2IsBest = False, bool__Fss3IsBest = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__Fss0CalVecX = double__Fss0CalVecX
            self.double__Fss0CalVecY = double__Fss0CalVecY
            self.double__Fss0CalVecZ = double__Fss0CalVecZ
            self.double__Fss1CalVecX = double__Fss1CalVecX
            self.double__Fss1CalVecY = double__Fss1CalVecY
            self.double__Fss1CalVecZ = double__Fss1CalVecZ
            self.double__Fss2CalVecX = double__Fss2CalVecX
            self.double__Fss2CalVecY = double__Fss2CalVecY
            self.double__Fss2CalVecZ = double__Fss2CalVecZ
            self.double__Fss3CalVecX = double__Fss3CalVecX
            self.double__Fss3CalVecY = double__Fss3CalVecY
            self.double__Fss3CalVecZ = double__Fss3CalVecZ
            self.bool__Fss0IsValid = bool__Fss0IsValid
            self.bool__Fss1IsValid = bool__Fss1IsValid
            self.bool__Fss2IsValid = bool__Fss2IsValid
            self.bool__Fss3IsValid = bool__Fss3IsValid
            self.bool__Fss0IsBest = bool__Fss0IsBest
            self.bool__Fss1IsBest = bool__Fss1IsBest
            self.bool__Fss2IsBest = bool__Fss2IsBest
            self.bool__Fss3IsBest = bool__Fss3IsBest
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0CalVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0CalVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0CalVecZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1CalVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1CalVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1CalVecZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2CalVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2CalVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2CalVecZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3CalVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3CalVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3CalVecZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss2IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss3IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss0IsBest)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss1IsBest)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss2IsBest)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss3IsBest)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalFss()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0CalVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0CalVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0CalVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1CalVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1CalVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1CalVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2CalVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2CalVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2CalVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3CalVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3CalVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3CalVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss2IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss3IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss0IsBest, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss1IsBest, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss2IsBest, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss3IsBest, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 112
    
    class struct_TlmSensorCalCss:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__CssCalVecX = 0.0, double__CssCalVecY = 0.0, double__CssCalVecZ = 0.0, bool__CssIsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__CssCalVecX = double__CssCalVecX
            self.double__CssCalVecY = double__CssCalVecY
            self.double__CssCalVecZ = double__CssCalVecZ
            self.bool__CssIsValid = bool__CssIsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__CssCalVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__CssCalVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__CssCalVecZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__CssIsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalCss()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__CssCalVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__CssCalVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__CssCalVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__CssIsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 33
    
    class struct_TlmSensorCalMag:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__Mag0CalVecX = 0.0, double__Mag0CalVecY = 0.0, double__Mag0CalVecZ = 0.0, double__Mag1CalVecX = 0.0, double__Mag1CalVecY = 0.0, double__Mag1CalVecZ = 0.0, bool__Mag0IsValid = False, bool__Mag1IsValid = False, bool__Mag0IsBest = False, bool__Mag1IsBest = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__Mag0CalVecX = double__Mag0CalVecX
            self.double__Mag0CalVecY = double__Mag0CalVecY
            self.double__Mag0CalVecZ = double__Mag0CalVecZ
            self.double__Mag1CalVecX = double__Mag1CalVecX
            self.double__Mag1CalVecY = double__Mag1CalVecY
            self.double__Mag1CalVecZ = double__Mag1CalVecZ
            self.bool__Mag0IsValid = bool__Mag0IsValid
            self.bool__Mag1IsValid = bool__Mag1IsValid
            self.bool__Mag0IsBest = bool__Mag0IsBest
            self.bool__Mag1IsBest = bool__Mag1IsBest
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0CalVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0CalVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0CalVecZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1CalVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1CalVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1CalVecZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag0IsBest)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag1IsBest)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalMag()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0CalVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0CalVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0CalVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1CalVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1CalVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1CalVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag0IsBest, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag1IsBest, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 60
    
    class struct_TlmSensorCalGyro:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, float__Gyro0CalRateX = 0.0, float__Gyro0CalRateY = 0.0, float__Gyro0CalRateZ = 0.0, float__Gyro1CalRateX = 0.0, float__Gyro1CalRateY = 0.0, float__Gyro1CalRateZ = 0.0, float__ExtGyro0CalRateX = 0.0, float__ExtGyro0CalRateY = 0.0, float__ExtGyro0CalRateZ = 0.0, float__ExtGyro1CalRateX = 0.0, float__ExtGyro1CalRateY = 0.0, float__ExtGyro1CalRateZ = 0.0, bool__Gyro0IsValid = False, bool__Gyro1IsValid = False, bool__ExtGyro0IsValid = False, bool__ExtGyro1IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.float__Gyro0CalRateX = float__Gyro0CalRateX
            self.float__Gyro0CalRateY = float__Gyro0CalRateY
            self.float__Gyro0CalRateZ = float__Gyro0CalRateZ
            self.float__Gyro1CalRateX = float__Gyro1CalRateX
            self.float__Gyro1CalRateY = float__Gyro1CalRateY
            self.float__Gyro1CalRateZ = float__Gyro1CalRateZ
            self.float__ExtGyro0CalRateX = float__ExtGyro0CalRateX
            self.float__ExtGyro0CalRateY = float__ExtGyro0CalRateY
            self.float__ExtGyro0CalRateZ = float__ExtGyro0CalRateZ
            self.float__ExtGyro1CalRateX = float__ExtGyro1CalRateX
            self.float__ExtGyro1CalRateY = float__ExtGyro1CalRateY
            self.float__ExtGyro1CalRateZ = float__ExtGyro1CalRateZ
            self.bool__Gyro0IsValid = bool__Gyro0IsValid
            self.bool__Gyro1IsValid = bool__Gyro1IsValid
            self.bool__ExtGyro0IsValid = bool__ExtGyro0IsValid
            self.bool__ExtGyro1IsValid = bool__ExtGyro1IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro0CalRateX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro0CalRateY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro0CalRateZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro1CalRateX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro1CalRateY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyro1CalRateZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtGyro0CalRateX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtGyro0CalRateY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtGyro0CalRateZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtGyro1CalRateX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtGyro1CalRateY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtGyro1CalRateZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyro0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyro1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__ExtGyro0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__ExtGyro1IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalGyro()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro0CalRateX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro0CalRateY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro0CalRateZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro1CalRateX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro1CalRateY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyro1CalRateZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtGyro0CalRateX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtGyro0CalRateY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtGyro0CalRateZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtGyro1CalRateX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtGyro1CalRateY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtGyro1CalRateZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyro0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyro1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__ExtGyro0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__ExtGyro1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 60
    
    class struct_TlmSensorCalHss:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__Hss0CalVecX = 0.0, double__Hss0CalVecY = 0.0, double__Hss0CalVecZ = 0.0, double__Hss1CalVecX = 0.0, double__Hss1CalVecY = 0.0, double__Hss1CalVecZ = 0.0, bool__Hss0IsValid = False, bool__Hss1IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__Hss0CalVecX = double__Hss0CalVecX
            self.double__Hss0CalVecY = double__Hss0CalVecY
            self.double__Hss0CalVecZ = double__Hss0CalVecZ
            self.double__Hss1CalVecX = double__Hss1CalVecX
            self.double__Hss1CalVecY = double__Hss1CalVecY
            self.double__Hss1CalVecZ = double__Hss1CalVecZ
            self.bool__Hss0IsValid = bool__Hss0IsValid
            self.bool__Hss1IsValid = bool__Hss1IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0CalVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0CalVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0CalVecZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1CalVecX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1CalVecY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1CalVecZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Hss0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Hss1IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalHss()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0CalVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0CalVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0CalVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1CalVecX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1CalVecY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1CalVecZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Hss0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Hss1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 58
    
    class struct_TlmSensorCalStr:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__Str0MeasBodyVec0X = 0.0, double__Str0MeasBodyVec0Y = 0.0, double__Str0MeasBodyVec0Z = 0.0, double__Str0MeasBodyVec1X = 0.0, double__Str0MeasBodyVec1Y = 0.0, double__Str0MeasBodyVec1Z = 0.0, double__Str0MeasBodyVec2X = 0.0, double__Str0MeasBodyVec2Y = 0.0, double__Str0MeasBodyVec2Z = 0.0, double__Str0ModelOrbitVec0X = 0.0, double__Str0ModelOrbitVec0Y = 0.0, double__Str0ModelOrbitVec0Z = 0.0, double__Str0ModelOrbitVec1X = 0.0, double__Str0ModelOrbitVec1Y = 0.0, double__Str0ModelOrbitVec1Z = 0.0, double__Str0ModelOrbitVec2X = 0.0, double__Str0ModelOrbitVec2Y = 0.0, double__Str0ModelOrbitVec2Z = 0.0, double__Str1MeasBodyVec0X = 0.0, double__Str1MeasBodyVec0Y = 0.0, double__Str1MeasBodyVec0Z = 0.0, double__Str1MeasBodyVec1X = 0.0, double__Str1MeasBodyVec1Y = 0.0, double__Str1MeasBodyVec1Z = 0.0, double__Str1MeasBodyVec2X = 0.0, double__Str1MeasBodyVec2Y = 0.0, double__Str1MeasBodyVec2Z = 0.0, double__Str1ModelOrbitVec0X = 0.0, double__Str1ModelOrbitVec0Y = 0.0, double__Str1ModelOrbitVec0Z = 0.0, double__Str1ModelOrbitVec1X = 0.0, double__Str1ModelOrbitVec1Y = 0.0, double__Str1ModelOrbitVec1Z = 0.0, double__Str1ModelOrbitVec2X = 0.0, double__Str1ModelOrbitVec2Y = 0.0, double__Str1ModelOrbitVec2Z = 0.0, bool__Str0IsValid = False, bool__Str1IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__Str0MeasBodyVec0X = double__Str0MeasBodyVec0X
            self.double__Str0MeasBodyVec0Y = double__Str0MeasBodyVec0Y
            self.double__Str0MeasBodyVec0Z = double__Str0MeasBodyVec0Z
            self.double__Str0MeasBodyVec1X = double__Str0MeasBodyVec1X
            self.double__Str0MeasBodyVec1Y = double__Str0MeasBodyVec1Y
            self.double__Str0MeasBodyVec1Z = double__Str0MeasBodyVec1Z
            self.double__Str0MeasBodyVec2X = double__Str0MeasBodyVec2X
            self.double__Str0MeasBodyVec2Y = double__Str0MeasBodyVec2Y
            self.double__Str0MeasBodyVec2Z = double__Str0MeasBodyVec2Z
            self.double__Str0ModelOrbitVec0X = double__Str0ModelOrbitVec0X
            self.double__Str0ModelOrbitVec0Y = double__Str0ModelOrbitVec0Y
            self.double__Str0ModelOrbitVec0Z = double__Str0ModelOrbitVec0Z
            self.double__Str0ModelOrbitVec1X = double__Str0ModelOrbitVec1X
            self.double__Str0ModelOrbitVec1Y = double__Str0ModelOrbitVec1Y
            self.double__Str0ModelOrbitVec1Z = double__Str0ModelOrbitVec1Z
            self.double__Str0ModelOrbitVec2X = double__Str0ModelOrbitVec2X
            self.double__Str0ModelOrbitVec2Y = double__Str0ModelOrbitVec2Y
            self.double__Str0ModelOrbitVec2Z = double__Str0ModelOrbitVec2Z
            self.double__Str1MeasBodyVec0X = double__Str1MeasBodyVec0X
            self.double__Str1MeasBodyVec0Y = double__Str1MeasBodyVec0Y
            self.double__Str1MeasBodyVec0Z = double__Str1MeasBodyVec0Z
            self.double__Str1MeasBodyVec1X = double__Str1MeasBodyVec1X
            self.double__Str1MeasBodyVec1Y = double__Str1MeasBodyVec1Y
            self.double__Str1MeasBodyVec1Z = double__Str1MeasBodyVec1Z
            self.double__Str1MeasBodyVec2X = double__Str1MeasBodyVec2X
            self.double__Str1MeasBodyVec2Y = double__Str1MeasBodyVec2Y
            self.double__Str1MeasBodyVec2Z = double__Str1MeasBodyVec2Z
            self.double__Str1ModelOrbitVec0X = double__Str1ModelOrbitVec0X
            self.double__Str1ModelOrbitVec0Y = double__Str1ModelOrbitVec0Y
            self.double__Str1ModelOrbitVec0Z = double__Str1ModelOrbitVec0Z
            self.double__Str1ModelOrbitVec1X = double__Str1ModelOrbitVec1X
            self.double__Str1ModelOrbitVec1Y = double__Str1ModelOrbitVec1Y
            self.double__Str1ModelOrbitVec1Z = double__Str1ModelOrbitVec1Z
            self.double__Str1ModelOrbitVec2X = double__Str1ModelOrbitVec2X
            self.double__Str1ModelOrbitVec2Y = double__Str1ModelOrbitVec2Y
            self.double__Str1ModelOrbitVec2Z = double__Str1ModelOrbitVec2Z
            self.bool__Str0IsValid = bool__Str0IsValid
            self.bool__Str1IsValid = bool__Str1IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasBodyVec0X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasBodyVec0Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasBodyVec0Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasBodyVec1X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasBodyVec1Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasBodyVec1Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasBodyVec2X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasBodyVec2Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0MeasBodyVec2Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelOrbitVec0X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelOrbitVec0Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelOrbitVec0Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelOrbitVec1X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelOrbitVec1Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelOrbitVec1Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelOrbitVec2X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelOrbitVec2Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0ModelOrbitVec2Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasBodyVec0X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasBodyVec0Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasBodyVec0Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasBodyVec1X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasBodyVec1Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasBodyVec1Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasBodyVec2X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasBodyVec2Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1MeasBodyVec2Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelOrbitVec0X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelOrbitVec0Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelOrbitVec0Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelOrbitVec1X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelOrbitVec1Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelOrbitVec1Z)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelOrbitVec2X)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelOrbitVec2Y)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1ModelOrbitVec2Z)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalStr()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasBodyVec0X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasBodyVec0Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasBodyVec0Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasBodyVec1X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasBodyVec1Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasBodyVec1Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasBodyVec2X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasBodyVec2Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0MeasBodyVec2Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelOrbitVec0X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelOrbitVec0Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelOrbitVec0Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelOrbitVec1X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelOrbitVec1Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelOrbitVec1Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelOrbitVec2X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelOrbitVec2Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0ModelOrbitVec2Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasBodyVec0X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasBodyVec0Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasBodyVec0Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasBodyVec1X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasBodyVec1Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasBodyVec1Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasBodyVec2X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasBodyVec2Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1MeasBodyVec2Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelOrbitVec0X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelOrbitVec0Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelOrbitVec0Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelOrbitVec1X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelOrbitVec1Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelOrbitVec1Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelOrbitVec2X, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelOrbitVec2Y, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1ModelOrbitVec2Z, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 298
    
    class struct_TlmSensorCalGnss:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, float__GnssSatPosEcefX = 0.0, float__GnssSatPosEcefY = 0.0, float__GnssSatPosEcefZ = 0.0, float__GnssSatVelEcefX = 0.0, float__GnssSatVelEcefY = 0.0, float__GnssSatVelEcefZ = 0.0, uint32__GnssTimeSeconds = 0, uint32__GnssTimeNs = 0, bool__GnssIsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.float__GnssSatPosEcefX = float__GnssSatPosEcefX
            self.float__GnssSatPosEcefY = float__GnssSatPosEcefY
            self.float__GnssSatPosEcefZ = float__GnssSatPosEcefZ
            self.float__GnssSatVelEcefX = float__GnssSatVelEcefX
            self.float__GnssSatVelEcefY = float__GnssSatVelEcefY
            self.float__GnssSatVelEcefZ = float__GnssSatVelEcefZ
            self.uint32__GnssTimeSeconds = uint32__GnssTimeSeconds
            self.uint32__GnssTimeNs = uint32__GnssTimeNs
            self.bool__GnssIsValid = bool__GnssIsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatPosEcefX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatPosEcefY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatPosEcefZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatVelEcefX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatVelEcefY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatVelEcefZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__GnssTimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__GnssTimeNs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__GnssIsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalGnss()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatPosEcefX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatPosEcefY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatPosEcefZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatVelEcefX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatVelEcefY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatVelEcefZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__GnssTimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__GnssTimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__GnssIsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 41
    
    class struct_TlmSensorCalRwl:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, float__RwlTorqueVecX = 0.0, float__RwlTorqueVecY = 0.0, float__RwlTorqueVecZ = 0.0, float__RwlMomVecX = 0.0, float__RwlMomVecY = 0.0, float__RwlMomVecZ = 0.0, bool__RwlIsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.float__RwlTorqueVecX = float__RwlTorqueVecX
            self.float__RwlTorqueVecY = float__RwlTorqueVecY
            self.float__RwlTorqueVecZ = float__RwlTorqueVecZ
            self.float__RwlMomVecX = float__RwlMomVecX
            self.float__RwlMomVecY = float__RwlMomVecY
            self.float__RwlMomVecZ = float__RwlMomVecZ
            self.bool__RwlIsValid = bool__RwlIsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RwlTorqueVecX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RwlTorqueVecY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RwlTorqueVecZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RwlMomVecX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RwlMomVecY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__RwlMomVecZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__RwlIsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalRwl()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RwlTorqueVecX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RwlTorqueVecY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RwlTorqueVecZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RwlMomVecX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RwlMomVecY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__RwlMomVecZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__RwlIsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 33
    
    class struct_TlmModels:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, int32__SatPosEciX = 0, int32__SatPosEciY = 0, int32__SatPosEciZ = 0, int16__SatVelEciX = 0, int16__SatVelEciY = 0, int16__SatVelEciZ = 0, double__SatLatGeod = 0.0, double__SatLatGeoc = 0.0, double__SatLon = 0.0, double__SatAlt = 0.0, int32__TgtPosEciX = 0, int32__TgtPosEciY = 0, int32__TgtPosEciZ = 0, double__ModelMagOrcX = 0.0, double__ModelMagOrcY = 0.0, double__ModelMagOrcZ = 0.0, double__ModelSunOrcX = 0.0, double__ModelSunOrcY = 0.0, double__ModelSunOrcZ = 0.0, double__ModelSunBetaAngle = 0.0, double__ModelHorRhoAngle = 0.0, double__ModelHorXoEastAngle = 0.0, double__ModelHorYiEastAngle = 0.0, int32__Sat2TgtGndOrcX = 0, int32__Sat2TgtGndOrcY = 0, int32__Sat2TgtGndOrcZ = 0, uint16__Asgp4BatchCtr = 0, uint16__Asgp4PosDelta = 0, e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive = 0, bool__Asgp4Error = False, bool__Eclipse = False, e__CubeComputerControlProgram8_NavSource__NavSource = 0):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.int32__SatPosEciX = int32__SatPosEciX
            self.int32__SatPosEciY = int32__SatPosEciY
            self.int32__SatPosEciZ = int32__SatPosEciZ
            self.int16__SatVelEciX = int16__SatVelEciX
            self.int16__SatVelEciY = int16__SatVelEciY
            self.int16__SatVelEciZ = int16__SatVelEciZ
            self.double__SatLatGeod = double__SatLatGeod
            self.double__SatLatGeoc = double__SatLatGeoc
            self.double__SatLon = double__SatLon
            self.double__SatAlt = double__SatAlt
            self.int32__TgtPosEciX = int32__TgtPosEciX
            self.int32__TgtPosEciY = int32__TgtPosEciY
            self.int32__TgtPosEciZ = int32__TgtPosEciZ
            self.double__ModelMagOrcX = double__ModelMagOrcX
            self.double__ModelMagOrcY = double__ModelMagOrcY
            self.double__ModelMagOrcZ = double__ModelMagOrcZ
            self.double__ModelSunOrcX = double__ModelSunOrcX
            self.double__ModelSunOrcY = double__ModelSunOrcY
            self.double__ModelSunOrcZ = double__ModelSunOrcZ
            self.double__ModelSunBetaAngle = double__ModelSunBetaAngle
            self.double__ModelHorRhoAngle = double__ModelHorRhoAngle
            self.double__ModelHorXoEastAngle = double__ModelHorXoEastAngle
            self.double__ModelHorYiEastAngle = double__ModelHorYiEastAngle
            self.int32__Sat2TgtGndOrcX = int32__Sat2TgtGndOrcX
            self.int32__Sat2TgtGndOrcY = int32__Sat2TgtGndOrcY
            self.int32__Sat2TgtGndOrcZ = int32__Sat2TgtGndOrcZ
            self.uint16__Asgp4BatchCtr = uint16__Asgp4BatchCtr
            self.uint16__Asgp4PosDelta = uint16__Asgp4PosDelta
            self.e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive = e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive
            self.bool__Asgp4Error = bool__Asgp4Error
            self.bool__Eclipse = bool__Eclipse
            self.e__CubeComputerControlProgram8_NavSource__NavSource = e__CubeComputerControlProgram8_NavSource__NavSource
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__SatPosEciX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__SatPosEciY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__SatPosEciZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__SatVelEciX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__SatVelEciY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__SatVelEciZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SatLatGeod)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SatLatGeoc)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SatLon)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__SatAlt)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__TgtPosEciX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__TgtPosEciY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__TgtPosEciZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelMagOrcX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelMagOrcY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelMagOrcZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelSunOrcX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelSunOrcY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelSunOrcZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelSunBetaAngle)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelHorRhoAngle)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelHorXoEastAngle)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__ModelHorYiEastAngle)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__Sat2TgtGndOrcX)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__Sat2TgtGndOrcY)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__Sat2TgtGndOrcZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Asgp4BatchCtr)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Asgp4PosDelta)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OrbModeSelect(self.e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Asgp4Error)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Eclipse)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NavSource(self.e__CubeComputerControlProgram8_NavSource__NavSource).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmModels()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__SatPosEciX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__SatPosEciY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__SatPosEciZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__SatVelEciX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__SatVelEciY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__SatVelEciZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SatLatGeod, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SatLatGeoc, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SatLon, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__SatAlt, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__TgtPosEciX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__TgtPosEciY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__TgtPosEciZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelMagOrcX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelMagOrcY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelMagOrcZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelSunOrcX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelSunOrcY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelSunOrcZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelSunBetaAngle, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelHorRhoAngle, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelHorXoEastAngle, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__ModelHorYiEastAngle, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__Sat2TgtGndOrcX, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__Sat2TgtGndOrcY, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__Sat2TgtGndOrcZ, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Asgp4BatchCtr, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Asgp4PosDelta, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_OrbModeSelect__OrbModeActive, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OrbModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Asgp4Error, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Eclipse, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_NavSource__NavSource, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_NavSource.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 170
    
    class struct_TlmEstimatorMain:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__EstRpyRoll = 0.0, double__EstRpyPitch = 0.0, double__EstRpyYaw = 0.0, double__EstQuatQ0 = 0.0, double__EstQuatQ1 = 0.0, double__EstQuatQ2 = 0.0, double__EstQuatQ3 = 0.0, double__EstGyroBiasX = 0.0, double__EstGyroBiasY = 0.0, double__EstGyroBiasZ = 0.0, double__EstRateOrcX = 0.0, double__EstRateOrcY = 0.0, double__EstRateOrcZ = 0.0, double__EstRateIrcX = 0.0, double__EstRateIrcY = 0.0, double__EstRateIrcZ = 0.0, float__EstGyrTorqueX = 0.0, float__EstGyrTorqueY = 0.0, float__EstGyrTorqueZ = 0.0, double__EstInnovX = 0.0, double__EstInnovY = 0.0, double__EstInnovZ = 0.0, double__EstStdDevRateX = 0.0, double__EstStdDevRateY = 0.0, double__EstStdDevRateZ = 0.0, double__EstStdDevQ0 = 0.0, double__EstStdDevQ1 = 0.0, double__EstStdDevQ2 = 0.0, e__CubeComputerControlProgram8_EstModeSelect__EstModeActive = 0):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__EstRpyRoll = double__EstRpyRoll
            self.double__EstRpyPitch = double__EstRpyPitch
            self.double__EstRpyYaw = double__EstRpyYaw
            self.double__EstQuatQ0 = double__EstQuatQ0
            self.double__EstQuatQ1 = double__EstQuatQ1
            self.double__EstQuatQ2 = double__EstQuatQ2
            self.double__EstQuatQ3 = double__EstQuatQ3
            self.double__EstGyroBiasX = double__EstGyroBiasX
            self.double__EstGyroBiasY = double__EstGyroBiasY
            self.double__EstGyroBiasZ = double__EstGyroBiasZ
            self.double__EstRateOrcX = double__EstRateOrcX
            self.double__EstRateOrcY = double__EstRateOrcY
            self.double__EstRateOrcZ = double__EstRateOrcZ
            self.double__EstRateIrcX = double__EstRateIrcX
            self.double__EstRateIrcY = double__EstRateIrcY
            self.double__EstRateIrcZ = double__EstRateIrcZ
            self.float__EstGyrTorqueX = float__EstGyrTorqueX
            self.float__EstGyrTorqueY = float__EstGyrTorqueY
            self.float__EstGyrTorqueZ = float__EstGyrTorqueZ
            self.double__EstInnovX = double__EstInnovX
            self.double__EstInnovY = double__EstInnovY
            self.double__EstInnovZ = double__EstInnovZ
            self.double__EstStdDevRateX = double__EstStdDevRateX
            self.double__EstStdDevRateY = double__EstStdDevRateY
            self.double__EstStdDevRateZ = double__EstStdDevRateZ
            self.double__EstStdDevQ0 = double__EstStdDevQ0
            self.double__EstStdDevQ1 = double__EstStdDevQ1
            self.double__EstStdDevQ2 = double__EstStdDevQ2
            self.e__CubeComputerControlProgram8_EstModeSelect__EstModeActive = e__CubeComputerControlProgram8_EstModeSelect__EstModeActive
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRpyRoll)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRpyPitch)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRpyYaw)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstQuatQ0)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstQuatQ1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstQuatQ2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstQuatQ3)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstGyroBiasX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstGyroBiasY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstGyroBiasZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateOrcX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateOrcY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateOrcZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateIrcX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateIrcY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateIrcZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstGyrTorqueX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstGyrTorqueY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstGyrTorqueZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstInnovX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstInnovY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstInnovZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevRateX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevRateY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevRateZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevQ0)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevQ1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevQ2)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect(self.e__CubeComputerControlProgram8_EstModeSelect__EstModeActive).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmEstimatorMain()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRpyRoll, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRpyPitch, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRpyYaw, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstQuatQ0, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstQuatQ1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstQuatQ2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstQuatQ3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstGyroBiasX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstGyroBiasY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstGyroBiasZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateOrcX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateOrcY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateOrcZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateIrcX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateIrcY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateIrcZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstGyrTorqueX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstGyrTorqueY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstGyrTorqueZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstInnovX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstInnovY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstInnovZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevRateX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevRateY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevRateZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevQ0, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevQ1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevQ2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_EstModeSelect__EstModeActive, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 221
    
    class struct_TlmEstimatorBackup:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__EstRpyRoll = 0.0, double__EstRpyPitch = 0.0, double__EstRpyYaw = 0.0, double__EstQuatQ0 = 0.0, double__EstQuatQ1 = 0.0, double__EstQuatQ2 = 0.0, double__EstQuatQ3 = 0.0, double__EstGyroBiasX = 0.0, double__EstGyroBiasY = 0.0, double__EstGyroBiasZ = 0.0, double__EstRateOrcX = 0.0, double__EstRateOrcY = 0.0, double__EstRateOrcZ = 0.0, double__EstRateIrcX = 0.0, double__EstRateIrcY = 0.0, double__EstRateIrcZ = 0.0, float__EstGyrTorqueX = 0.0, float__EstGyrTorqueY = 0.0, float__EstGyrTorqueZ = 0.0, double__EstInnovX = 0.0, double__EstInnovY = 0.0, double__EstInnovZ = 0.0, double__EstStdDevRateX = 0.0, double__EstStdDevRateY = 0.0, double__EstStdDevRateZ = 0.0, double__EstStdDevQ0 = 0.0, double__EstStdDevQ1 = 0.0, double__EstStdDevQ2 = 0.0, e__CubeComputerControlProgram8_EstModeSelect__EstModeActive = 0):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__EstRpyRoll = double__EstRpyRoll
            self.double__EstRpyPitch = double__EstRpyPitch
            self.double__EstRpyYaw = double__EstRpyYaw
            self.double__EstQuatQ0 = double__EstQuatQ0
            self.double__EstQuatQ1 = double__EstQuatQ1
            self.double__EstQuatQ2 = double__EstQuatQ2
            self.double__EstQuatQ3 = double__EstQuatQ3
            self.double__EstGyroBiasX = double__EstGyroBiasX
            self.double__EstGyroBiasY = double__EstGyroBiasY
            self.double__EstGyroBiasZ = double__EstGyroBiasZ
            self.double__EstRateOrcX = double__EstRateOrcX
            self.double__EstRateOrcY = double__EstRateOrcY
            self.double__EstRateOrcZ = double__EstRateOrcZ
            self.double__EstRateIrcX = double__EstRateIrcX
            self.double__EstRateIrcY = double__EstRateIrcY
            self.double__EstRateIrcZ = double__EstRateIrcZ
            self.float__EstGyrTorqueX = float__EstGyrTorqueX
            self.float__EstGyrTorqueY = float__EstGyrTorqueY
            self.float__EstGyrTorqueZ = float__EstGyrTorqueZ
            self.double__EstInnovX = double__EstInnovX
            self.double__EstInnovY = double__EstInnovY
            self.double__EstInnovZ = double__EstInnovZ
            self.double__EstStdDevRateX = double__EstStdDevRateX
            self.double__EstStdDevRateY = double__EstStdDevRateY
            self.double__EstStdDevRateZ = double__EstStdDevRateZ
            self.double__EstStdDevQ0 = double__EstStdDevQ0
            self.double__EstStdDevQ1 = double__EstStdDevQ1
            self.double__EstStdDevQ2 = double__EstStdDevQ2
            self.e__CubeComputerControlProgram8_EstModeSelect__EstModeActive = e__CubeComputerControlProgram8_EstModeSelect__EstModeActive
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRpyRoll)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRpyPitch)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRpyYaw)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstQuatQ0)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstQuatQ1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstQuatQ2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstQuatQ3)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstGyroBiasX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstGyroBiasY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstGyroBiasZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateOrcX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateOrcY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateOrcZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateIrcX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateIrcY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstRateIrcZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstGyrTorqueX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstGyrTorqueY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstGyrTorqueZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstInnovX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstInnovY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstInnovZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevRateX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevRateY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevRateZ)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevQ0)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevQ1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__EstStdDevQ2)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect(self.e__CubeComputerControlProgram8_EstModeSelect__EstModeActive).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmEstimatorBackup()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRpyRoll, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRpyPitch, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRpyYaw, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstQuatQ0, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstQuatQ1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstQuatQ2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstQuatQ3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstGyroBiasX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstGyroBiasY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstGyroBiasZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateOrcX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateOrcY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateOrcZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateIrcX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateIrcY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstRateIrcZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstGyrTorqueX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstGyrTorqueY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstGyrTorqueZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstInnovX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstInnovY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstInnovZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevRateX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevRateY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevRateZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevQ0, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevQ1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__EstStdDevQ2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_EstModeSelect__EstModeActive, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EstModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 221
    
    class struct_TlmEstimatorMainHighRes:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, float__EstQuatQ0 = 0.0, float__EstQuatQ1 = 0.0, float__EstQuatQ2 = 0.0, float__EstQuatQ3 = 0.0, float__EstRateOrcX = 0.0, float__EstRateOrcY = 0.0, float__EstRateOrcZ = 0.0):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.float__EstQuatQ0 = float__EstQuatQ0
            self.float__EstQuatQ1 = float__EstQuatQ1
            self.float__EstQuatQ2 = float__EstQuatQ2
            self.float__EstQuatQ3 = float__EstQuatQ3
            self.float__EstRateOrcX = float__EstRateOrcX
            self.float__EstRateOrcY = float__EstRateOrcY
            self.float__EstRateOrcZ = float__EstRateOrcZ
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstQuatQ0)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstQuatQ1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstQuatQ2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstQuatQ3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstRateOrcX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstRateOrcY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__EstRateOrcZ)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmEstimatorMainHighRes()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstQuatQ0, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstQuatQ1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstQuatQ2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstQuatQ3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstRateOrcX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstRateOrcY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__EstRateOrcZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 36
    
    class struct_TlmController:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__RpyCmdRoll = 0.0, double__RpyCmdPitch = 0.0, double__RpyCmdYaw = 0.0, double__RpyErrRoll = 0.0, double__RpyErrPitch = 0.0, double__RpyErrYaw = 0.0, float__TgtRefLat = 0.0, float__TgtRefLon = 0.0, float__TgtRefAlt = 0.0, double__QuatErrQ0 = 0.0, double__QuatErrQ1 = 0.0, double__QuatErrQ2 = 0.0, float__Rwl0CmdSpeed = 0.0, float__Rwl1CmdSpeed = 0.0, float__Rwl2CmdSpeed = 0.0, float__Rwl3CmdSpeed = 0.0, float__Rwl0CmdMom = 0.0, float__Rwl1CmdMom = 0.0, float__Rwl2CmdMom = 0.0, float__Rwl3CmdMom = 0.0, float__Rwl0CmdTorque = 0.0, float__Rwl1CmdTorque = 0.0, float__Rwl2CmdTorque = 0.0, float__Rwl3CmdTorque = 0.0, double__Mtq0CmdDip = 0.0, double__Mtq1CmdDip = 0.0, double__Mtq2CmdDip = 0.0, float__Mtq0CmdTorque = 0.0, float__Mtq1CmdTorque = 0.0, float__Mtq2CmdTorque = 0.0, int16__Mtq0CmdOnTime = 0, int16__Mtq1CmdOnTime = 0, int16__Mtq2CmdOnTime = 0, uint16__MagConTimeout = 0, e__CubeComputerControlProgram8_ConModeSelect__ConModeActive = 0, bool__Rwl0ErrorFlag = False, bool__Rwl1ErrorFlag = False, bool__Rwl2ErrorFlag = False, bool__Rwl3ErrorFlag = False, bool__Rwl0ActiveFlag = False, bool__Rwl1ActiveFlag = False, bool__Rwl2ActiveFlag = False, bool__Rwl3ActiveFlag = False, e__CubeComputerControlProgram8_FmcStage__FmcStage = 0):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__RpyCmdRoll = double__RpyCmdRoll
            self.double__RpyCmdPitch = double__RpyCmdPitch
            self.double__RpyCmdYaw = double__RpyCmdYaw
            self.double__RpyErrRoll = double__RpyErrRoll
            self.double__RpyErrPitch = double__RpyErrPitch
            self.double__RpyErrYaw = double__RpyErrYaw
            self.float__TgtRefLat = float__TgtRefLat
            self.float__TgtRefLon = float__TgtRefLon
            self.float__TgtRefAlt = float__TgtRefAlt
            self.double__QuatErrQ0 = double__QuatErrQ0
            self.double__QuatErrQ1 = double__QuatErrQ1
            self.double__QuatErrQ2 = double__QuatErrQ2
            self.float__Rwl0CmdSpeed = float__Rwl0CmdSpeed
            self.float__Rwl1CmdSpeed = float__Rwl1CmdSpeed
            self.float__Rwl2CmdSpeed = float__Rwl2CmdSpeed
            self.float__Rwl3CmdSpeed = float__Rwl3CmdSpeed
            self.float__Rwl0CmdMom = float__Rwl0CmdMom
            self.float__Rwl1CmdMom = float__Rwl1CmdMom
            self.float__Rwl2CmdMom = float__Rwl2CmdMom
            self.float__Rwl3CmdMom = float__Rwl3CmdMom
            self.float__Rwl0CmdTorque = float__Rwl0CmdTorque
            self.float__Rwl1CmdTorque = float__Rwl1CmdTorque
            self.float__Rwl2CmdTorque = float__Rwl2CmdTorque
            self.float__Rwl3CmdTorque = float__Rwl3CmdTorque
            self.double__Mtq0CmdDip = double__Mtq0CmdDip
            self.double__Mtq1CmdDip = double__Mtq1CmdDip
            self.double__Mtq2CmdDip = double__Mtq2CmdDip
            self.float__Mtq0CmdTorque = float__Mtq0CmdTorque
            self.float__Mtq1CmdTorque = float__Mtq1CmdTorque
            self.float__Mtq2CmdTorque = float__Mtq2CmdTorque
            self.int16__Mtq0CmdOnTime = int16__Mtq0CmdOnTime
            self.int16__Mtq1CmdOnTime = int16__Mtq1CmdOnTime
            self.int16__Mtq2CmdOnTime = int16__Mtq2CmdOnTime
            self.uint16__MagConTimeout = uint16__MagConTimeout
            self.e__CubeComputerControlProgram8_ConModeSelect__ConModeActive = e__CubeComputerControlProgram8_ConModeSelect__ConModeActive
            self.bool__Rwl0ErrorFlag = bool__Rwl0ErrorFlag
            self.bool__Rwl1ErrorFlag = bool__Rwl1ErrorFlag
            self.bool__Rwl2ErrorFlag = bool__Rwl2ErrorFlag
            self.bool__Rwl3ErrorFlag = bool__Rwl3ErrorFlag
            self.bool__Rwl0ActiveFlag = bool__Rwl0ActiveFlag
            self.bool__Rwl1ActiveFlag = bool__Rwl1ActiveFlag
            self.bool__Rwl2ActiveFlag = bool__Rwl2ActiveFlag
            self.bool__Rwl3ActiveFlag = bool__Rwl3ActiveFlag
            self.e__CubeComputerControlProgram8_FmcStage__FmcStage = e__CubeComputerControlProgram8_FmcStage__FmcStage
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__RpyCmdRoll)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__RpyCmdPitch)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__RpyCmdYaw)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__RpyErrRoll)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__RpyErrPitch)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__RpyErrYaw)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__TgtRefLat)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__TgtRefLon)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__TgtRefAlt)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__QuatErrQ0)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__QuatErrQ1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__QuatErrQ2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0CmdSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1CmdSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2CmdSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3CmdSpeed)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0CmdMom)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1CmdMom)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2CmdMom)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3CmdMom)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0CmdTorque)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1CmdTorque)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2CmdTorque)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3CmdTorque)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mtq0CmdDip)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mtq1CmdDip)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mtq2CmdDip)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq0CmdTorque)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq1CmdTorque)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq2CmdTorque)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Mtq0CmdOnTime)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Mtq1CmdOnTime)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Mtq2CmdOnTime)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__MagConTimeout)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect(self.e__CubeComputerControlProgram8_ConModeSelect__ConModeActive).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0ErrorFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1ErrorFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2ErrorFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3ErrorFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0ActiveFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1ActiveFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2ActiveFlag)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3ActiveFlag)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcStage(self.e__CubeComputerControlProgram8_FmcStage__FmcStage).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmController()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__RpyCmdRoll, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__RpyCmdPitch, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__RpyCmdYaw, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__RpyErrRoll, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__RpyErrPitch, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__RpyErrYaw, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__TgtRefLat, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__TgtRefLon, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__TgtRefAlt, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__QuatErrQ0, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__QuatErrQ1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__QuatErrQ2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0CmdSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1CmdSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2CmdSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3CmdSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0CmdMom, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1CmdMom, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2CmdMom, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3CmdMom, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0CmdTorque, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1CmdTorque, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2CmdTorque, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3CmdTorque, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mtq0CmdDip, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mtq1CmdDip, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mtq2CmdDip, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq0CmdTorque, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq1CmdTorque, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq2CmdTorque, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Mtq0CmdOnTime, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Mtq1CmdOnTime, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Mtq2CmdOnTime, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__MagConTimeout, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_ConModeSelect__ConModeActive, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_ConModeSelect.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0ErrorFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1ErrorFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2ErrorFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3ErrorFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0ActiveFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1ActiveFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2ActiveFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3ActiveFlag, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_FmcStage__FmcStage, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_FmcStage.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 194
    
    class struct_TlmGnssRaw:
        def __init__(self, uint32__RtcTimeSeconds = 0, uint32__RtcTimeNs = 0, int32__RtcDriftNs = 0, float__GnssSatPosEcefX = 0.0, float__GnssSatPosEcefY = 0.0, float__GnssSatPosEcefZ = 0.0, float__GnssSatVelEcefX = 0.0, float__GnssSatVelEcefY = 0.0, float__GnssSatVelEcefZ = 0.0, uint32__GnssTimeSeconds = 0, uint32__GnssTimeNs = 0, uint16__GpsWeek = 0, uint32__Tow = 0, int8__UtcOffset = 0, bool__GnssValidData = False, bool__GnssLock = False, bool__GnssPPSDetected = False):
            self.uint32__RtcTimeSeconds = uint32__RtcTimeSeconds
            self.uint32__RtcTimeNs = uint32__RtcTimeNs
            self.int32__RtcDriftNs = int32__RtcDriftNs
            self.float__GnssSatPosEcefX = float__GnssSatPosEcefX
            self.float__GnssSatPosEcefY = float__GnssSatPosEcefY
            self.float__GnssSatPosEcefZ = float__GnssSatPosEcefZ
            self.float__GnssSatVelEcefX = float__GnssSatVelEcefX
            self.float__GnssSatVelEcefY = float__GnssSatVelEcefY
            self.float__GnssSatVelEcefZ = float__GnssSatVelEcefZ
            self.uint32__GnssTimeSeconds = uint32__GnssTimeSeconds
            self.uint32__GnssTimeNs = uint32__GnssTimeNs
            self.uint16__GpsWeek = uint16__GpsWeek
            self.uint32__Tow = uint32__Tow
            self.int8__UtcOffset = int8__UtcOffset
            self.bool__GnssValidData = bool__GnssValidData
            self.bool__GnssLock = bool__GnssLock
            self.bool__GnssPPSDetected = bool__GnssPPSDetected
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__RtcTimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__RtcTimeNs)
            
            result += SerDesHelpers.serdesType_basic.serialize("int32", self.int32__RtcDriftNs)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatPosEcefX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatPosEcefY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatPosEcefZ)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatVelEcefX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatVelEcefY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__GnssSatVelEcefZ)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__GnssTimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__GnssTimeNs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__GpsWeek)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Tow)
            
            result += SerDesHelpers.serdesType_basic.serialize("int8", self.int8__UtcOffset)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__GnssValidData)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__GnssLock)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__GnssPPSDetected)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmGnssRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__RtcTimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__RtcTimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int32__RtcDriftNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatPosEcefX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatPosEcefY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatPosEcefZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatVelEcefX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatVelEcefY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__GnssSatVelEcefZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__GnssTimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__GnssTimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__GpsWeek, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Tow, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int8__UtcOffset, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__GnssValidData, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__GnssLock, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__GnssPPSDetected, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 54
    
    class struct_TlmExtSensorRaw:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, float__ExtSensor0Float0 = 0.0, float__ExtSensor0Float1 = 0.0, float__ExtSensor0Float2 = 0.0, float__ExtSensor0Float3 = 0.0, float__ExtSensor0Float4 = 0.0, float__ExtSensor0Float5 = 0.0, float__ExtSensor1Float0 = 0.0, float__ExtSensor1Float1 = 0.0, float__ExtSensor1Float2 = 0.0, float__ExtSensor1Float3 = 0.0, float__ExtSensor1Float4 = 0.0, float__ExtSensor1Float5 = 0.0, bool__ExtSensor0IsValid = False, bool__ExtSensor1IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.float__ExtSensor0Float0 = float__ExtSensor0Float0
            self.float__ExtSensor0Float1 = float__ExtSensor0Float1
            self.float__ExtSensor0Float2 = float__ExtSensor0Float2
            self.float__ExtSensor0Float3 = float__ExtSensor0Float3
            self.float__ExtSensor0Float4 = float__ExtSensor0Float4
            self.float__ExtSensor0Float5 = float__ExtSensor0Float5
            self.float__ExtSensor1Float0 = float__ExtSensor1Float0
            self.float__ExtSensor1Float1 = float__ExtSensor1Float1
            self.float__ExtSensor1Float2 = float__ExtSensor1Float2
            self.float__ExtSensor1Float3 = float__ExtSensor1Float3
            self.float__ExtSensor1Float4 = float__ExtSensor1Float4
            self.float__ExtSensor1Float5 = float__ExtSensor1Float5
            self.bool__ExtSensor0IsValid = bool__ExtSensor0IsValid
            self.bool__ExtSensor1IsValid = bool__ExtSensor1IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float0)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float4)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor0Float5)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float0)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float4)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__ExtSensor1Float5)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__ExtSensor0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__ExtSensor1IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmExtSensorRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float0, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float4, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor0Float5, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float0, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float4, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__ExtSensor1Float5, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__ExtSensor0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__ExtSensor1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 58
    
    class struct_TlmStrPst3sRaw:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, e__CubeComputerControlProgram8_Pst3sVersion__Str0Pst3sVersion = 0, float__Str0Quat1 = 0.0, float__Str0Quat2 = 0.0, float__Str0Quat3 = 0.0, float__Str0Quat4 = 0.0, float__Str0AngVelX = 0.0, float__Str0AngVelY = 0.0, float__Str0AngVelZ = 0.0, e__CubeComputerControlProgram8_Pst3sRateQuality__Str0RateQuality = 0, uint32__Str0UnixSeconds = 0, float__Str0UnixSecondsDecimal = 0.0, int8__Str0Temperature = 0, uint8__Str0ImageExposure = 0, uint8__Str0ImageThreshold = 0, uint8__Str0BackGroundValues = 0, uint8__Str0InternalProcessCode = 0, e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0CmosChipIdResult = 0, e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0FpgaMRamResult = 0, uint8__Str0NumberOfExtractedStars = 0, e__CubeComputerControlProgram8_Pst3sOperatingModes__Str0OperatingMode = 0, uint8__Str0ImagingGain = 0, uint8__Str0MinNavigationStars = 0, e__CubeComputerControlProgram8_Pst3sDataValid__Str0DataValid = 0, e__CubeComputerControlProgram8_Pst3sExtImageState__Str0ExtImageState = 0, uint8__Str0IdentifiedStars = 0, uint8__Str0DeviceNumber = 0, uint8__Str0SoftwareVersion = 0, uint8__Str0EdacErrorCount = 0, uint32__Str0ImageFrameNumber = 0, e__CubeComputerControlProgram8_Pst3sDynamicMode__Str0DynamicMode = 0, e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str0SaaMode = 0, uint8__Str0SaaThreshold = 0, e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str0QuaternionFilteringState = 0, uint8__Str0FourStarCaptureThreshold = 0, uint8__Str0TrackingThreshold = 0, bool__Str0EdacSwitch = False, e__CubeComputerControlProgram8_Pst3sVersion__Str1Pst3sVersion = 0, float__Str1Quat1 = 0.0, float__Str1Quat2 = 0.0, float__Str1Quat3 = 0.0, float__Str1Quat4 = 0.0, float__Str1AngVelX = 0.0, float__Str1AngVelY = 0.0, float__Str1AngVelZ = 0.0, e__CubeComputerControlProgram8_Pst3sRateQuality__Str1RateQuality = 0, uint32__Str1UnixSeconds = 0, float__Str1UnixSecondsDecimal = 0.0, int8__Str1Temperature = 0, uint8__Str1ImageExposure = 0, uint8__Str1ImageThreshold = 0, uint8__Str1BackGroundValues = 0, uint8__Str1InternalProcessCode = 0, e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1CmosChipIdResult = 0, e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1FpgaMRamResult = 0, uint8__Str1NumberOfExtractedStars = 0, e__CubeComputerControlProgram8_Pst3sOperatingModes__Str1OperatingMode = 0, uint8__Str1ImagingGain = 0, uint8__Str1MinNavigationStars = 0, e__CubeComputerControlProgram8_Pst3sDataValid__Str1DataValid = 0, e__CubeComputerControlProgram8_Pst3sExtImageState__Str1ExtImageState = 0, uint8__Str1IdentifiedStars = 0, uint8__Str1DeviceNumber = 0, uint8__Str1SoftwareVersion = 0, uint8__Str1EdacErrorCount = 0, uint32__Str1ImageFrameNumber = 0, e__CubeComputerControlProgram8_Pst3sDynamicMode__Str1DynamicMode = 0, e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str1SaaMode = 0, uint8__Str1SaaThreshold = 0, e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str1QuaternionFilteringState = 0, uint8__Str1FourStarCaptureThreshold = 0, uint8__Str1TrackingThreshold = 0, bool__Str1EdacSwitch = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.e__CubeComputerControlProgram8_Pst3sVersion__Str0Pst3sVersion = e__CubeComputerControlProgram8_Pst3sVersion__Str0Pst3sVersion
            self.float__Str0Quat1 = float__Str0Quat1
            self.float__Str0Quat2 = float__Str0Quat2
            self.float__Str0Quat3 = float__Str0Quat3
            self.float__Str0Quat4 = float__Str0Quat4
            self.float__Str0AngVelX = float__Str0AngVelX
            self.float__Str0AngVelY = float__Str0AngVelY
            self.float__Str0AngVelZ = float__Str0AngVelZ
            self.e__CubeComputerControlProgram8_Pst3sRateQuality__Str0RateQuality = e__CubeComputerControlProgram8_Pst3sRateQuality__Str0RateQuality
            self.uint32__Str0UnixSeconds = uint32__Str0UnixSeconds
            self.float__Str0UnixSecondsDecimal = float__Str0UnixSecondsDecimal
            self.int8__Str0Temperature = int8__Str0Temperature
            self.uint8__Str0ImageExposure = uint8__Str0ImageExposure
            self.uint8__Str0ImageThreshold = uint8__Str0ImageThreshold
            self.uint8__Str0BackGroundValues = uint8__Str0BackGroundValues
            self.uint8__Str0InternalProcessCode = uint8__Str0InternalProcessCode
            self.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0CmosChipIdResult = e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0CmosChipIdResult
            self.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0FpgaMRamResult = e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0FpgaMRamResult
            self.uint8__Str0NumberOfExtractedStars = uint8__Str0NumberOfExtractedStars
            self.e__CubeComputerControlProgram8_Pst3sOperatingModes__Str0OperatingMode = e__CubeComputerControlProgram8_Pst3sOperatingModes__Str0OperatingMode
            self.uint8__Str0ImagingGain = uint8__Str0ImagingGain
            self.uint8__Str0MinNavigationStars = uint8__Str0MinNavigationStars
            self.e__CubeComputerControlProgram8_Pst3sDataValid__Str0DataValid = e__CubeComputerControlProgram8_Pst3sDataValid__Str0DataValid
            self.e__CubeComputerControlProgram8_Pst3sExtImageState__Str0ExtImageState = e__CubeComputerControlProgram8_Pst3sExtImageState__Str0ExtImageState
            self.uint8__Str0IdentifiedStars = uint8__Str0IdentifiedStars
            self.uint8__Str0DeviceNumber = uint8__Str0DeviceNumber
            self.uint8__Str0SoftwareVersion = uint8__Str0SoftwareVersion
            self.uint8__Str0EdacErrorCount = uint8__Str0EdacErrorCount
            self.uint32__Str0ImageFrameNumber = uint32__Str0ImageFrameNumber
            self.e__CubeComputerControlProgram8_Pst3sDynamicMode__Str0DynamicMode = e__CubeComputerControlProgram8_Pst3sDynamicMode__Str0DynamicMode
            self.e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str0SaaMode = e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str0SaaMode
            self.uint8__Str0SaaThreshold = uint8__Str0SaaThreshold
            self.e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str0QuaternionFilteringState = e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str0QuaternionFilteringState
            self.uint8__Str0FourStarCaptureThreshold = uint8__Str0FourStarCaptureThreshold
            self.uint8__Str0TrackingThreshold = uint8__Str0TrackingThreshold
            self.bool__Str0EdacSwitch = bool__Str0EdacSwitch
            self.e__CubeComputerControlProgram8_Pst3sVersion__Str1Pst3sVersion = e__CubeComputerControlProgram8_Pst3sVersion__Str1Pst3sVersion
            self.float__Str1Quat1 = float__Str1Quat1
            self.float__Str1Quat2 = float__Str1Quat2
            self.float__Str1Quat3 = float__Str1Quat3
            self.float__Str1Quat4 = float__Str1Quat4
            self.float__Str1AngVelX = float__Str1AngVelX
            self.float__Str1AngVelY = float__Str1AngVelY
            self.float__Str1AngVelZ = float__Str1AngVelZ
            self.e__CubeComputerControlProgram8_Pst3sRateQuality__Str1RateQuality = e__CubeComputerControlProgram8_Pst3sRateQuality__Str1RateQuality
            self.uint32__Str1UnixSeconds = uint32__Str1UnixSeconds
            self.float__Str1UnixSecondsDecimal = float__Str1UnixSecondsDecimal
            self.int8__Str1Temperature = int8__Str1Temperature
            self.uint8__Str1ImageExposure = uint8__Str1ImageExposure
            self.uint8__Str1ImageThreshold = uint8__Str1ImageThreshold
            self.uint8__Str1BackGroundValues = uint8__Str1BackGroundValues
            self.uint8__Str1InternalProcessCode = uint8__Str1InternalProcessCode
            self.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1CmosChipIdResult = e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1CmosChipIdResult
            self.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1FpgaMRamResult = e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1FpgaMRamResult
            self.uint8__Str1NumberOfExtractedStars = uint8__Str1NumberOfExtractedStars
            self.e__CubeComputerControlProgram8_Pst3sOperatingModes__Str1OperatingMode = e__CubeComputerControlProgram8_Pst3sOperatingModes__Str1OperatingMode
            self.uint8__Str1ImagingGain = uint8__Str1ImagingGain
            self.uint8__Str1MinNavigationStars = uint8__Str1MinNavigationStars
            self.e__CubeComputerControlProgram8_Pst3sDataValid__Str1DataValid = e__CubeComputerControlProgram8_Pst3sDataValid__Str1DataValid
            self.e__CubeComputerControlProgram8_Pst3sExtImageState__Str1ExtImageState = e__CubeComputerControlProgram8_Pst3sExtImageState__Str1ExtImageState
            self.uint8__Str1IdentifiedStars = uint8__Str1IdentifiedStars
            self.uint8__Str1DeviceNumber = uint8__Str1DeviceNumber
            self.uint8__Str1SoftwareVersion = uint8__Str1SoftwareVersion
            self.uint8__Str1EdacErrorCount = uint8__Str1EdacErrorCount
            self.uint32__Str1ImageFrameNumber = uint32__Str1ImageFrameNumber
            self.e__CubeComputerControlProgram8_Pst3sDynamicMode__Str1DynamicMode = e__CubeComputerControlProgram8_Pst3sDynamicMode__Str1DynamicMode
            self.e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str1SaaMode = e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str1SaaMode
            self.uint8__Str1SaaThreshold = uint8__Str1SaaThreshold
            self.e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str1QuaternionFilteringState = e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str1QuaternionFilteringState
            self.uint8__Str1FourStarCaptureThreshold = uint8__Str1FourStarCaptureThreshold
            self.uint8__Str1TrackingThreshold = uint8__Str1TrackingThreshold
            self.bool__Str1EdacSwitch = bool__Str1EdacSwitch
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sVersion(self.e__CubeComputerControlProgram8_Pst3sVersion__Str0Pst3sVersion).serialize()
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0Quat1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0Quat2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0Quat3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0Quat4)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0AngVelX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0AngVelY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0AngVelZ)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sRateQuality(self.e__CubeComputerControlProgram8_Pst3sRateQuality__Str0RateQuality).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str0UnixSeconds)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0UnixSecondsDecimal)
            
            result += SerDesHelpers.serdesType_basic.serialize("int8", self.int8__Str0Temperature)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0ImageExposure)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0ImageThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0BackGroundValues)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0InternalProcessCode)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult(self.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0CmosChipIdResult).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult(self.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0FpgaMRamResult).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0NumberOfExtractedStars)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sOperatingModes(self.e__CubeComputerControlProgram8_Pst3sOperatingModes__Str0OperatingMode).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0ImagingGain)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0MinNavigationStars)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDataValid(self.e__CubeComputerControlProgram8_Pst3sDataValid__Str0DataValid).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sExtImageState(self.e__CubeComputerControlProgram8_Pst3sExtImageState__Str0ExtImageState).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0IdentifiedStars)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0DeviceNumber)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0SoftwareVersion)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0EdacErrorCount)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str0ImageFrameNumber)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDynamicMode(self.e__CubeComputerControlProgram8_Pst3sDynamicMode__Str0DynamicMode).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSaaWorkingMode(self.e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str0SaaMode).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0SaaThreshold)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState(self.e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str0QuaternionFilteringState).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0FourStarCaptureThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0TrackingThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0EdacSwitch)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sVersion(self.e__CubeComputerControlProgram8_Pst3sVersion__Str1Pst3sVersion).serialize()
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1Quat1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1Quat2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1Quat3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1Quat4)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1AngVelX)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1AngVelY)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1AngVelZ)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sRateQuality(self.e__CubeComputerControlProgram8_Pst3sRateQuality__Str1RateQuality).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str1UnixSeconds)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1UnixSecondsDecimal)
            
            result += SerDesHelpers.serdesType_basic.serialize("int8", self.int8__Str1Temperature)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1ImageExposure)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1ImageThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1BackGroundValues)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1InternalProcessCode)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult(self.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1CmosChipIdResult).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult(self.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1FpgaMRamResult).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1NumberOfExtractedStars)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sOperatingModes(self.e__CubeComputerControlProgram8_Pst3sOperatingModes__Str1OperatingMode).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1ImagingGain)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1MinNavigationStars)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDataValid(self.e__CubeComputerControlProgram8_Pst3sDataValid__Str1DataValid).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sExtImageState(self.e__CubeComputerControlProgram8_Pst3sExtImageState__Str1ExtImageState).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1IdentifiedStars)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1DeviceNumber)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1SoftwareVersion)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1EdacErrorCount)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str1ImageFrameNumber)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDynamicMode(self.e__CubeComputerControlProgram8_Pst3sDynamicMode__Str1DynamicMode).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSaaWorkingMode(self.e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str1SaaMode).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1SaaThreshold)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState(self.e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str1QuaternionFilteringState).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1FourStarCaptureThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1TrackingThreshold)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1EdacSwitch)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrPst3sRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sVersion__Str0Pst3sVersion, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sVersion.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0Quat1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0Quat2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0Quat3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0Quat4, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0AngVelX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0AngVelY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0AngVelZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sRateQuality__Str0RateQuality, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sRateQuality.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str0UnixSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0UnixSecondsDecimal, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int8__Str0Temperature, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0ImageExposure, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0ImageThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0BackGroundValues, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0InternalProcessCode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0CmosChipIdResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str0FpgaMRamResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0NumberOfExtractedStars, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sOperatingModes__Str0OperatingMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sOperatingModes.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0ImagingGain, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0MinNavigationStars, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sDataValid__Str0DataValid, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDataValid.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sExtImageState__Str0ExtImageState, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sExtImageState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0IdentifiedStars, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0DeviceNumber, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0SoftwareVersion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0EdacErrorCount, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str0ImageFrameNumber, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sDynamicMode__Str0DynamicMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDynamicMode.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str0SaaMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSaaWorkingMode.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0SaaThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str0QuaternionFilteringState, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0FourStarCaptureThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0TrackingThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0EdacSwitch, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sVersion__Str1Pst3sVersion, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sVersion.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1Quat1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1Quat2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1Quat3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1Quat4, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1AngVelX, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1AngVelY, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1AngVelZ, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sRateQuality__Str1RateQuality, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sRateQuality.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str1UnixSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1UnixSecondsDecimal, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int8__Str1Temperature, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1ImageExposure, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1ImageThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1BackGroundValues, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1InternalProcessCode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1CmosChipIdResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sSelfTestResult__Str1FpgaMRamResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSelfTestResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1NumberOfExtractedStars, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sOperatingModes__Str1OperatingMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sOperatingModes.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1ImagingGain, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1MinNavigationStars, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sDataValid__Str1DataValid, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDataValid.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sExtImageState__Str1ExtImageState, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sExtImageState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1IdentifiedStars, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1DeviceNumber, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1SoftwareVersion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1EdacErrorCount, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str1ImageFrameNumber, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sDynamicMode__Str1DynamicMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sDynamicMode.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sSaaWorkingMode__Str1SaaMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sSaaWorkingMode.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1SaaThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState__Str1QuaternionFilteringState, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1FourStarCaptureThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1TrackingThreshold, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1EdacSwitch, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 140
    
    class struct_TlmFssCubeSenseSunRaw:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__Fss0Alpha = 0.0, double__Fss0Beta = 0.0, e__CubeComputerControlProgram8_SunCaptureResult__Fss0CaptureResult = 0, e__CubeComputerControlProgram8_SunDetectResult__Fss0DetectionResult = 0, double__Fss1Alpha = 0.0, double__Fss1Beta = 0.0, e__CubeComputerControlProgram8_SunCaptureResult__Fss1CaptureResult = 0, e__CubeComputerControlProgram8_SunDetectResult__Fss1DetectionResult = 0, double__Fss2Alpha = 0.0, double__Fss2Beta = 0.0, e__CubeComputerControlProgram8_SunCaptureResult__Fss2CaptureResult = 0, e__CubeComputerControlProgram8_SunDetectResult__Fss2DetectionResult = 0, double__Fss3Alpha = 0.0, double__Fss3Beta = 0.0, e__CubeComputerControlProgram8_SunCaptureResult__Fss3CaptureResult = 0, e__CubeComputerControlProgram8_SunDetectResult__Fss3DetectionResult = 0, bool__Fss0IsValid = False, bool__Fss1IsValid = False, bool__Fss2IsValid = False, bool__Fss3IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__Fss0Alpha = double__Fss0Alpha
            self.double__Fss0Beta = double__Fss0Beta
            self.e__CubeComputerControlProgram8_SunCaptureResult__Fss0CaptureResult = e__CubeComputerControlProgram8_SunCaptureResult__Fss0CaptureResult
            self.e__CubeComputerControlProgram8_SunDetectResult__Fss0DetectionResult = e__CubeComputerControlProgram8_SunDetectResult__Fss0DetectionResult
            self.double__Fss1Alpha = double__Fss1Alpha
            self.double__Fss1Beta = double__Fss1Beta
            self.e__CubeComputerControlProgram8_SunCaptureResult__Fss1CaptureResult = e__CubeComputerControlProgram8_SunCaptureResult__Fss1CaptureResult
            self.e__CubeComputerControlProgram8_SunDetectResult__Fss1DetectionResult = e__CubeComputerControlProgram8_SunDetectResult__Fss1DetectionResult
            self.double__Fss2Alpha = double__Fss2Alpha
            self.double__Fss2Beta = double__Fss2Beta
            self.e__CubeComputerControlProgram8_SunCaptureResult__Fss2CaptureResult = e__CubeComputerControlProgram8_SunCaptureResult__Fss2CaptureResult
            self.e__CubeComputerControlProgram8_SunDetectResult__Fss2DetectionResult = e__CubeComputerControlProgram8_SunDetectResult__Fss2DetectionResult
            self.double__Fss3Alpha = double__Fss3Alpha
            self.double__Fss3Beta = double__Fss3Beta
            self.e__CubeComputerControlProgram8_SunCaptureResult__Fss3CaptureResult = e__CubeComputerControlProgram8_SunCaptureResult__Fss3CaptureResult
            self.e__CubeComputerControlProgram8_SunDetectResult__Fss3DetectionResult = e__CubeComputerControlProgram8_SunDetectResult__Fss3DetectionResult
            self.bool__Fss0IsValid = bool__Fss0IsValid
            self.bool__Fss1IsValid = bool__Fss1IsValid
            self.bool__Fss2IsValid = bool__Fss2IsValid
            self.bool__Fss3IsValid = bool__Fss3IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0Beta)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult(self.e__CubeComputerControlProgram8_SunCaptureResult__Fss0CaptureResult).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult(self.e__CubeComputerControlProgram8_SunDetectResult__Fss0DetectionResult).serialize()
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1Beta)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult(self.e__CubeComputerControlProgram8_SunCaptureResult__Fss1CaptureResult).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult(self.e__CubeComputerControlProgram8_SunDetectResult__Fss1DetectionResult).serialize()
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2Beta)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult(self.e__CubeComputerControlProgram8_SunCaptureResult__Fss2CaptureResult).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult(self.e__CubeComputerControlProgram8_SunDetectResult__Fss2DetectionResult).serialize()
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3Alpha)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3Beta)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult(self.e__CubeComputerControlProgram8_SunCaptureResult__Fss3CaptureResult).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult(self.e__CubeComputerControlProgram8_SunDetectResult__Fss3DetectionResult).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss2IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss3IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmFssCubeSenseSunRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_SunCaptureResult__Fss0CaptureResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_SunDetectResult__Fss0DetectionResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_SunCaptureResult__Fss1CaptureResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_SunDetectResult__Fss1DetectionResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_SunCaptureResult__Fss2CaptureResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_SunDetectResult__Fss2DetectionResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3Alpha, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3Beta, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_SunCaptureResult__Fss3CaptureResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunCaptureResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_SunDetectResult__Fss3DetectionResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_SunDetectResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss2IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss3IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 84
    
    class struct_TlmHssCubeSenseEarthRaw:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, double__Hss0RawElev = 0.0, double__Hss0RawRot = 0.0, e__CubeComputerControlProgram8_EarthCaptureResult__Hss0CaptureResult = 0, e__CubeComputerControlProgram8_EarthDetectResult__Hss0DetectionResult = 0, double__Hss1RawElev = 0.0, double__Hss1RawRot = 0.0, e__CubeComputerControlProgram8_EarthCaptureResult__Hss1CaptureResult = 0, e__CubeComputerControlProgram8_EarthDetectResult__Hss1DetectionResult = 0, bool__Hss0IsValid = False, bool__Hss1IsValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.double__Hss0RawElev = double__Hss0RawElev
            self.double__Hss0RawRot = double__Hss0RawRot
            self.e__CubeComputerControlProgram8_EarthCaptureResult__Hss0CaptureResult = e__CubeComputerControlProgram8_EarthCaptureResult__Hss0CaptureResult
            self.e__CubeComputerControlProgram8_EarthDetectResult__Hss0DetectionResult = e__CubeComputerControlProgram8_EarthDetectResult__Hss0DetectionResult
            self.double__Hss1RawElev = double__Hss1RawElev
            self.double__Hss1RawRot = double__Hss1RawRot
            self.e__CubeComputerControlProgram8_EarthCaptureResult__Hss1CaptureResult = e__CubeComputerControlProgram8_EarthCaptureResult__Hss1CaptureResult
            self.e__CubeComputerControlProgram8_EarthDetectResult__Hss1DetectionResult = e__CubeComputerControlProgram8_EarthDetectResult__Hss1DetectionResult
            self.bool__Hss0IsValid = bool__Hss0IsValid
            self.bool__Hss1IsValid = bool__Hss1IsValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0RawElev)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0RawRot)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthCaptureResult(self.e__CubeComputerControlProgram8_EarthCaptureResult__Hss0CaptureResult).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthDetectResult(self.e__CubeComputerControlProgram8_EarthDetectResult__Hss0DetectionResult).serialize()
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1RawElev)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1RawRot)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthCaptureResult(self.e__CubeComputerControlProgram8_EarthCaptureResult__Hss1CaptureResult).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthDetectResult(self.e__CubeComputerControlProgram8_EarthDetectResult__Hss1DetectionResult).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Hss0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Hss1IsValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmHssCubeSenseEarthRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0RawElev, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0RawRot, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_EarthCaptureResult__Hss0CaptureResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthCaptureResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_EarthDetectResult__Hss0DetectionResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthDetectResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1RawElev, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1RawRot, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_EarthCaptureResult__Hss1CaptureResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthCaptureResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_EarthDetectResult__Hss1DetectionResult, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_EarthDetectResult.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Hss0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Hss1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 46
    
    class struct_TlmRwlNssRwlRaw:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, int16__Rwl0TargetValue = 0, float__Rwl0MeasSpeed = 0.0, int16__Rwl0MeasCurrent = 0, int16__Rwl0Temp = 0, int16__Rwl1TargetValue = 0, float__Rwl1MeasSpeed = 0.0, int16__Rwl1MeasCurrent = 0, int16__Rwl1Temp = 0, int16__Rwl2TargetValue = 0, float__Rwl2MeasSpeed = 0.0, int16__Rwl2MeasCurrent = 0, int16__Rwl2Temp = 0, int16__Rwl3TargetValue = 0, float__Rwl3MeasSpeed = 0.0, int16__Rwl3MeasCurrent = 0, int16__Rwl3Temp = 0, bool__Rwl0IsValid = False, bool__Rwl0WheelMode = False, bool__Rwl0CurentCtrlMode = False, bool__Rwl0SpeedCtrlMode = False, bool__Rwl0TorqueCtrlMode = False, bool__Rwl0CrcError = False, bool__Rwl0WrongLlCmd = False, bool__Rwl0WrongHlCmd = False, bool__Rwl0ToutSci1Main = False, bool__Rwl1IsValid = False, bool__Rwl1WheelMode = False, bool__Rwl1CurentCtrlMode = False, bool__Rwl1SpeedCtrlMode = False, bool__Rwl1TorqueCtrlMode = False, bool__Rwl1CrcError = False, bool__Rwl1WrongLlCmd = False, bool__Rwl1WrongHlCmd = False, bool__Rwl1ToutSci1Main = False, bool__Rwl2IsValid = False, bool__Rwl2WheelMode = False, bool__Rwl2CurentCtrlMode = False, bool__Rwl2SpeedCtrlMode = False, bool__Rwl2TorqueCtrlMode = False, bool__Rwl2CrcError = False, bool__Rwl2WrongLlCmd = False, bool__Rwl2WrongHlCmd = False, bool__Rwl2ToutSci1Main = False, bool__Rwl3IsValid = False, bool__Rwl3WheelMode = False, bool__Rwl3CurentCtrlMode = False, bool__Rwl3SpeedCtrlMode = False, bool__Rwl3TorqueCtrlMode = False, bool__Rwl3CrcError = False, bool__Rwl3WrongLlCmd = False, bool__Rwl3WrongHlCmd = False, bool__Rwl3ToutSci1Main = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.int16__Rwl0TargetValue = int16__Rwl0TargetValue
            self.float__Rwl0MeasSpeed = float__Rwl0MeasSpeed
            self.int16__Rwl0MeasCurrent = int16__Rwl0MeasCurrent
            self.int16__Rwl0Temp = int16__Rwl0Temp
            self.int16__Rwl1TargetValue = int16__Rwl1TargetValue
            self.float__Rwl1MeasSpeed = float__Rwl1MeasSpeed
            self.int16__Rwl1MeasCurrent = int16__Rwl1MeasCurrent
            self.int16__Rwl1Temp = int16__Rwl1Temp
            self.int16__Rwl2TargetValue = int16__Rwl2TargetValue
            self.float__Rwl2MeasSpeed = float__Rwl2MeasSpeed
            self.int16__Rwl2MeasCurrent = int16__Rwl2MeasCurrent
            self.int16__Rwl2Temp = int16__Rwl2Temp
            self.int16__Rwl3TargetValue = int16__Rwl3TargetValue
            self.float__Rwl3MeasSpeed = float__Rwl3MeasSpeed
            self.int16__Rwl3MeasCurrent = int16__Rwl3MeasCurrent
            self.int16__Rwl3Temp = int16__Rwl3Temp
            self.bool__Rwl0IsValid = bool__Rwl0IsValid
            self.bool__Rwl0WheelMode = bool__Rwl0WheelMode
            self.bool__Rwl0CurentCtrlMode = bool__Rwl0CurentCtrlMode
            self.bool__Rwl0SpeedCtrlMode = bool__Rwl0SpeedCtrlMode
            self.bool__Rwl0TorqueCtrlMode = bool__Rwl0TorqueCtrlMode
            self.bool__Rwl0CrcError = bool__Rwl0CrcError
            self.bool__Rwl0WrongLlCmd = bool__Rwl0WrongLlCmd
            self.bool__Rwl0WrongHlCmd = bool__Rwl0WrongHlCmd
            self.bool__Rwl0ToutSci1Main = bool__Rwl0ToutSci1Main
            self.bool__Rwl1IsValid = bool__Rwl1IsValid
            self.bool__Rwl1WheelMode = bool__Rwl1WheelMode
            self.bool__Rwl1CurentCtrlMode = bool__Rwl1CurentCtrlMode
            self.bool__Rwl1SpeedCtrlMode = bool__Rwl1SpeedCtrlMode
            self.bool__Rwl1TorqueCtrlMode = bool__Rwl1TorqueCtrlMode
            self.bool__Rwl1CrcError = bool__Rwl1CrcError
            self.bool__Rwl1WrongLlCmd = bool__Rwl1WrongLlCmd
            self.bool__Rwl1WrongHlCmd = bool__Rwl1WrongHlCmd
            self.bool__Rwl1ToutSci1Main = bool__Rwl1ToutSci1Main
            self.bool__Rwl2IsValid = bool__Rwl2IsValid
            self.bool__Rwl2WheelMode = bool__Rwl2WheelMode
            self.bool__Rwl2CurentCtrlMode = bool__Rwl2CurentCtrlMode
            self.bool__Rwl2SpeedCtrlMode = bool__Rwl2SpeedCtrlMode
            self.bool__Rwl2TorqueCtrlMode = bool__Rwl2TorqueCtrlMode
            self.bool__Rwl2CrcError = bool__Rwl2CrcError
            self.bool__Rwl2WrongLlCmd = bool__Rwl2WrongLlCmd
            self.bool__Rwl2WrongHlCmd = bool__Rwl2WrongHlCmd
            self.bool__Rwl2ToutSci1Main = bool__Rwl2ToutSci1Main
            self.bool__Rwl3IsValid = bool__Rwl3IsValid
            self.bool__Rwl3WheelMode = bool__Rwl3WheelMode
            self.bool__Rwl3CurentCtrlMode = bool__Rwl3CurentCtrlMode
            self.bool__Rwl3SpeedCtrlMode = bool__Rwl3SpeedCtrlMode
            self.bool__Rwl3TorqueCtrlMode = bool__Rwl3TorqueCtrlMode
            self.bool__Rwl3CrcError = bool__Rwl3CrcError
            self.bool__Rwl3WrongLlCmd = bool__Rwl3WrongLlCmd
            self.bool__Rwl3WrongHlCmd = bool__Rwl3WrongHlCmd
            self.bool__Rwl3ToutSci1Main = bool__Rwl3ToutSci1Main
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl0TargetValue)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl0MeasSpeed)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl0MeasCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl0Temp)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl1TargetValue)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl1MeasSpeed)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl1MeasCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl1Temp)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl2TargetValue)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl2MeasSpeed)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl2MeasCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl2Temp)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl3TargetValue)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Rwl3MeasSpeed)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl3MeasCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Rwl3Temp)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0WheelMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0CurentCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0SpeedCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0TorqueCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0CrcError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0WrongLlCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0WrongHlCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0ToutSci1Main)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1WheelMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1CurentCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1SpeedCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1TorqueCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1CrcError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1WrongLlCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1WrongHlCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1ToutSci1Main)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2WheelMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2CurentCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2SpeedCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2TorqueCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2CrcError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2WrongLlCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2WrongHlCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2ToutSci1Main)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3WheelMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3CurentCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3SpeedCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3TorqueCtrlMode)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3CrcError)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3WrongLlCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3WrongHlCmd)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3ToutSci1Main)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmRwlNssRwlRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl0TargetValue, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl0MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl0MeasCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl0Temp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl1TargetValue, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl1MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl1MeasCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl1Temp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl2TargetValue, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl2MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl2MeasCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl2Temp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl3TargetValue, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Rwl3MeasSpeed, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl3MeasCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Rwl3Temp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0WheelMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0CurentCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0SpeedCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0TorqueCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0CrcError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0WrongLlCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0WrongHlCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0ToutSci1Main, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1WheelMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1CurentCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1SpeedCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1TorqueCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1CrcError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1WrongLlCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1WrongHlCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1ToutSci1Main, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2WheelMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2CurentCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2SpeedCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2TorqueCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2CrcError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2WrongLlCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2WrongHlCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2ToutSci1Main, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3WheelMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3CurentCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3SpeedCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3TorqueCtrlMode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3CrcError, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3WrongLlCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3WrongHlCmd, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3ToutSci1Main, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 84
    
    class struct_TlmStrCubeStarRaw:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, e__CubeComputerControlProgram8_StarCaptureStatus__Str0CaptureStatus = 0, e__CubeComputerControlProgram8_StarDetectStatus__Str0DetectStatus = 0, e__CubeComputerControlProgram8_StarIdStatus__Str0IdentStatus = 0, bool__Str0Idle = False, bool__Str0Tracking = False, bool__Str0IsValid = False, uint8__Str0NumDetected = 0, uint8__Str0NumIdentified = 0, double__Str0RateX = 0.0, double__Str0RateY = 0.0, double__Str0RateZ = 0.0, e__CubeComputerControlProgram8_StarCaptureStatus__Str1CaptureStatus = 0, e__CubeComputerControlProgram8_StarDetectStatus__Str1DetectStatus = 0, e__CubeComputerControlProgram8_StarIdStatus__Str1IdentStatus = 0, bool__Str1Idle = False, bool__Str1Tracking = False, bool__Str1IsValid = False, uint8__Str1NumDetected = 0, uint8__Str1NumIdentified = 0, double__Str1RateX = 0.0, double__Str1RateY = 0.0, double__Str1RateZ = 0.0):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.e__CubeComputerControlProgram8_StarCaptureStatus__Str0CaptureStatus = e__CubeComputerControlProgram8_StarCaptureStatus__Str0CaptureStatus
            self.e__CubeComputerControlProgram8_StarDetectStatus__Str0DetectStatus = e__CubeComputerControlProgram8_StarDetectStatus__Str0DetectStatus
            self.e__CubeComputerControlProgram8_StarIdStatus__Str0IdentStatus = e__CubeComputerControlProgram8_StarIdStatus__Str0IdentStatus
            self.bool__Str0Idle = bool__Str0Idle
            self.bool__Str0Tracking = bool__Str0Tracking
            self.bool__Str0IsValid = bool__Str0IsValid
            self.uint8__Str0NumDetected = uint8__Str0NumDetected
            self.uint8__Str0NumIdentified = uint8__Str0NumIdentified
            self.double__Str0RateX = double__Str0RateX
            self.double__Str0RateY = double__Str0RateY
            self.double__Str0RateZ = double__Str0RateZ
            self.e__CubeComputerControlProgram8_StarCaptureStatus__Str1CaptureStatus = e__CubeComputerControlProgram8_StarCaptureStatus__Str1CaptureStatus
            self.e__CubeComputerControlProgram8_StarDetectStatus__Str1DetectStatus = e__CubeComputerControlProgram8_StarDetectStatus__Str1DetectStatus
            self.e__CubeComputerControlProgram8_StarIdStatus__Str1IdentStatus = e__CubeComputerControlProgram8_StarIdStatus__Str1IdentStatus
            self.bool__Str1Idle = bool__Str1Idle
            self.bool__Str1Tracking = bool__Str1Tracking
            self.bool__Str1IsValid = bool__Str1IsValid
            self.uint8__Str1NumDetected = uint8__Str1NumDetected
            self.uint8__Str1NumIdentified = uint8__Str1NumIdentified
            self.double__Str1RateX = double__Str1RateX
            self.double__Str1RateY = double__Str1RateY
            self.double__Str1RateZ = double__Str1RateZ
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarCaptureStatus(self.e__CubeComputerControlProgram8_StarCaptureStatus__Str0CaptureStatus).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarDetectStatus(self.e__CubeComputerControlProgram8_StarDetectStatus__Str0DetectStatus).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarIdStatus(self.e__CubeComputerControlProgram8_StarIdStatus__Str0IdentStatus).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0Idle)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0Tracking)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0NumDetected)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0NumIdentified)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0RateX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0RateY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0RateZ)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarCaptureStatus(self.e__CubeComputerControlProgram8_StarCaptureStatus__Str1CaptureStatus).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarDetectStatus(self.e__CubeComputerControlProgram8_StarDetectStatus__Str1DetectStatus).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarIdStatus(self.e__CubeComputerControlProgram8_StarIdStatus__Str1IdentStatus).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1Idle)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1Tracking)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1IsValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1NumDetected)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1NumIdentified)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1RateX)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1RateY)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1RateZ)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrCubeStarRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_StarCaptureStatus__Str0CaptureStatus, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarCaptureStatus.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_StarDetectStatus__Str0DetectStatus, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarDetectStatus.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_StarIdStatus__Str0IdentStatus, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarIdStatus.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0Idle, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0Tracking, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0NumDetected, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0NumIdentified, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0RateX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0RateY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0RateZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_StarCaptureStatus__Str1CaptureStatus, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarCaptureStatus.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_StarDetectStatus__Str1DetectStatus, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarDetectStatus.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_StarIdStatus__Str1IdentStatus, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_StarIdStatus.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1Idle, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1Tracking, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1IsValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1NumDetected, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1NumIdentified, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1RateX, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1RateY, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1RateZ, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 72
    
    class struct_TlmGyrLitefuforsRaw:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, float__Gyr0RateUfors1 = 0.0, float__Gyr0RateUfors2 = 0.0, float__Gyr0RateUfors3 = 0.0, bool__Gyr0NogoUfors1 = False, bool__Gyr0RstAckUfors1 = False, bool__Gyr0TempWarnUfors1 = False, bool__Gyr0AuxControlLoopErrUfors1 = False, bool__Gyr0HardBitErrUfors1 = False, bool__Gyr0MeasRangeErrUfors1 = False, bool__Gyr0UnknwnCmdUfors1 = False, bool__Gyr0NogoUfors2 = False, bool__Gyr0RstAckUfors2 = False, bool__Gyr0TempWarnUfors2 = False, bool__Gyr0AuxControlLoopErrUfors2 = False, bool__Gyr0HardBitErrUfors2 = False, bool__Gyr0MeasRangeErrUfors2 = False, bool__Gyr0UnknwnCmdUfors2 = False, bool__Gyr0NogoUfors3 = False, bool__Gyr0RstAckUfors3 = False, bool__Gyr0TempWarnUfors3 = False, bool__Gyr0AuxControlLoopErrUfors3 = False, bool__Gyr0HardBitErrUfors3 = False, bool__Gyr0MeasRangeErrUfors3 = False, bool__Gyr0UnknwnCmdUfors3 = False, float__Gyr1RateUfors1 = 0.0, float__Gyr1RateUfors2 = 0.0, float__Gyr1RateUfors3 = 0.0, bool__Gyr1NogoUfors1 = False, bool__Gyr1RstAckUfors1 = False, bool__Gyr1TempWarnUfors1 = False, bool__Gyr1AuxControlLoopErrUfors1 = False, bool__Gyr1HardBitErrUfors1 = False, bool__Gyr1MeasRangeErrUfors1 = False, bool__Gyr1UnknwnCmdUfors1 = False, bool__Gyr1NogoUfors2 = False, bool__Gyr1RstAckUfors2 = False, bool__Gyr1TempWarnUfors2 = False, bool__Gyr1AuxControlLoopErrUfors2 = False, bool__Gyr1HardBitErrUfors2 = False, bool__Gyr1MeasRangeErrUfors2 = False, bool__Gyr1UnknwnCmdUfors2 = False, bool__Gyr1NogoUfors3 = False, bool__Gyr1RstAckUfors3 = False, bool__Gyr1TempWarnUfors3 = False, bool__Gyr1AuxControlLoopErrUfors3 = False, bool__Gyr1HardBitErrUfors3 = False, bool__Gyr1MeasRangeErrUfors3 = False, bool__Gyr1UnknwnCmdUfors3 = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.float__Gyr0RateUfors1 = float__Gyr0RateUfors1
            self.float__Gyr0RateUfors2 = float__Gyr0RateUfors2
            self.float__Gyr0RateUfors3 = float__Gyr0RateUfors3
            self.bool__Gyr0NogoUfors1 = bool__Gyr0NogoUfors1
            self.bool__Gyr0RstAckUfors1 = bool__Gyr0RstAckUfors1
            self.bool__Gyr0TempWarnUfors1 = bool__Gyr0TempWarnUfors1
            self.bool__Gyr0AuxControlLoopErrUfors1 = bool__Gyr0AuxControlLoopErrUfors1
            self.bool__Gyr0HardBitErrUfors1 = bool__Gyr0HardBitErrUfors1
            self.bool__Gyr0MeasRangeErrUfors1 = bool__Gyr0MeasRangeErrUfors1
            self.bool__Gyr0UnknwnCmdUfors1 = bool__Gyr0UnknwnCmdUfors1
            self.bool__Gyr0NogoUfors2 = bool__Gyr0NogoUfors2
            self.bool__Gyr0RstAckUfors2 = bool__Gyr0RstAckUfors2
            self.bool__Gyr0TempWarnUfors2 = bool__Gyr0TempWarnUfors2
            self.bool__Gyr0AuxControlLoopErrUfors2 = bool__Gyr0AuxControlLoopErrUfors2
            self.bool__Gyr0HardBitErrUfors2 = bool__Gyr0HardBitErrUfors2
            self.bool__Gyr0MeasRangeErrUfors2 = bool__Gyr0MeasRangeErrUfors2
            self.bool__Gyr0UnknwnCmdUfors2 = bool__Gyr0UnknwnCmdUfors2
            self.bool__Gyr0NogoUfors3 = bool__Gyr0NogoUfors3
            self.bool__Gyr0RstAckUfors3 = bool__Gyr0RstAckUfors3
            self.bool__Gyr0TempWarnUfors3 = bool__Gyr0TempWarnUfors3
            self.bool__Gyr0AuxControlLoopErrUfors3 = bool__Gyr0AuxControlLoopErrUfors3
            self.bool__Gyr0HardBitErrUfors3 = bool__Gyr0HardBitErrUfors3
            self.bool__Gyr0MeasRangeErrUfors3 = bool__Gyr0MeasRangeErrUfors3
            self.bool__Gyr0UnknwnCmdUfors3 = bool__Gyr0UnknwnCmdUfors3
            self.float__Gyr1RateUfors1 = float__Gyr1RateUfors1
            self.float__Gyr1RateUfors2 = float__Gyr1RateUfors2
            self.float__Gyr1RateUfors3 = float__Gyr1RateUfors3
            self.bool__Gyr1NogoUfors1 = bool__Gyr1NogoUfors1
            self.bool__Gyr1RstAckUfors1 = bool__Gyr1RstAckUfors1
            self.bool__Gyr1TempWarnUfors1 = bool__Gyr1TempWarnUfors1
            self.bool__Gyr1AuxControlLoopErrUfors1 = bool__Gyr1AuxControlLoopErrUfors1
            self.bool__Gyr1HardBitErrUfors1 = bool__Gyr1HardBitErrUfors1
            self.bool__Gyr1MeasRangeErrUfors1 = bool__Gyr1MeasRangeErrUfors1
            self.bool__Gyr1UnknwnCmdUfors1 = bool__Gyr1UnknwnCmdUfors1
            self.bool__Gyr1NogoUfors2 = bool__Gyr1NogoUfors2
            self.bool__Gyr1RstAckUfors2 = bool__Gyr1RstAckUfors2
            self.bool__Gyr1TempWarnUfors2 = bool__Gyr1TempWarnUfors2
            self.bool__Gyr1AuxControlLoopErrUfors2 = bool__Gyr1AuxControlLoopErrUfors2
            self.bool__Gyr1HardBitErrUfors2 = bool__Gyr1HardBitErrUfors2
            self.bool__Gyr1MeasRangeErrUfors2 = bool__Gyr1MeasRangeErrUfors2
            self.bool__Gyr1UnknwnCmdUfors2 = bool__Gyr1UnknwnCmdUfors2
            self.bool__Gyr1NogoUfors3 = bool__Gyr1NogoUfors3
            self.bool__Gyr1RstAckUfors3 = bool__Gyr1RstAckUfors3
            self.bool__Gyr1TempWarnUfors3 = bool__Gyr1TempWarnUfors3
            self.bool__Gyr1AuxControlLoopErrUfors3 = bool__Gyr1AuxControlLoopErrUfors3
            self.bool__Gyr1HardBitErrUfors3 = bool__Gyr1HardBitErrUfors3
            self.bool__Gyr1MeasRangeErrUfors3 = bool__Gyr1MeasRangeErrUfors3
            self.bool__Gyr1UnknwnCmdUfors3 = bool__Gyr1UnknwnCmdUfors3
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyr0RateUfors1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyr0RateUfors2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyr0RateUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0NogoUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0RstAckUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0TempWarnUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0AuxControlLoopErrUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0HardBitErrUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0MeasRangeErrUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0UnknwnCmdUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0NogoUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0RstAckUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0TempWarnUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0AuxControlLoopErrUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0HardBitErrUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0MeasRangeErrUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0UnknwnCmdUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0NogoUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0RstAckUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0TempWarnUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0AuxControlLoopErrUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0HardBitErrUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0MeasRangeErrUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr0UnknwnCmdUfors3)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyr1RateUfors1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyr1RateUfors2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Gyr1RateUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1NogoUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1RstAckUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1TempWarnUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1AuxControlLoopErrUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1HardBitErrUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1MeasRangeErrUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1UnknwnCmdUfors1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1NogoUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1RstAckUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1TempWarnUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1AuxControlLoopErrUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1HardBitErrUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1MeasRangeErrUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1UnknwnCmdUfors2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1NogoUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1RstAckUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1TempWarnUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1AuxControlLoopErrUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1HardBitErrUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1MeasRangeErrUfors3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Gyr1UnknwnCmdUfors3)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmGyrLitefuforsRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyr0RateUfors1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyr0RateUfors2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyr0RateUfors3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0NogoUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0RstAckUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0TempWarnUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0AuxControlLoopErrUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0HardBitErrUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0MeasRangeErrUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0UnknwnCmdUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0NogoUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0RstAckUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0TempWarnUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0AuxControlLoopErrUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0HardBitErrUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0MeasRangeErrUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0UnknwnCmdUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0NogoUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0RstAckUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0TempWarnUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0AuxControlLoopErrUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0HardBitErrUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0MeasRangeErrUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr0UnknwnCmdUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyr1RateUfors1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyr1RateUfors2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Gyr1RateUfors3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1NogoUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1RstAckUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1TempWarnUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1AuxControlLoopErrUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1HardBitErrUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1MeasRangeErrUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1UnknwnCmdUfors1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1NogoUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1RstAckUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1TempWarnUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1AuxControlLoopErrUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1HardBitErrUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1MeasRangeErrUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1UnknwnCmdUfors2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1NogoUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1RstAckUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1TempWarnUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1AuxControlLoopErrUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1HardBitErrUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1MeasRangeErrUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Gyr1UnknwnCmdUfors3, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 74
    
    class struct_TlmStrCubeAurigaRaw:
        def __init__(self, uint32__TimeSeconds = 0, uint32__TimeNs = 0, uint16__Str0FrameCnt = 0, uint16__Str0IDSATM = 0, uint16__Str0SpecTC = 0, uint16__Str0SyntDefATM = 0, uint16__Str0SyntFusion = 0, uint16__Str0SyntFil = 0, uint32__Str0DateMesFil = 0, double__Str0QRsFil1 = 0.0, double__Str0QRsFil2 = 0.0, double__Str0QRsFil3 = 0.0, double__Str0QRsFil4 = 0.0, uint16__Str0IQFilXRs = 0, uint16__Str0IQFilYRs = 0, uint16__Str0IQFilZRs = 0, uint16__Str0NbEtoAtt = 0, uint16__Str0NbEtoAttOH = 0, uint16__Str0NbEtoCoh = 0, uint16__Str0NbEtoCohOH = 0, float__Str0WRsFil1 = 0.0, float__Str0WRsFil2 = 0.0, float__Str0WRsFil3 = 0.0, uint16__Str0NLPMoyOH1 = 0, uint16__Str0NLPMoyOH2 = 0, uint16__Str0SyntFilOH1 = 0, uint16__Str0SyntFilOH2 = 0, uint16__Str0SyntFDIROH1 = 0, uint16__Str0SyntFDIROH2 = 0, uint16__Str0SyntDesOH1 = 0, uint16__Str0SyntDesOH2 = 0, e__CubeComputerControlProgram8_OhStateVal__Str0OH1State = 0, e__CubeComputerControlProgram8_OhStateVal__Str0OH2State = 0, bool__Str0DataValid = False, uint16__Str1FrameCnt = 0, uint16__Str1IDSATM = 0, uint16__Str1SpecTC = 0, uint16__Str1SyntDefATM = 0, uint16__Str1SyntFusion = 0, uint16__Str1SyntFil = 0, uint32__Str1DateMesFil = 0, double__Str1QRsFil1 = 0.0, double__Str1QRsFil2 = 0.0, double__Str1QRsFil3 = 0.0, double__Str1QRsFil4 = 0.0, uint16__Str1IQFilXRs = 0, uint16__Str1IQFilYRs = 0, uint16__Str1IQFilZRs = 0, uint16__Str1NbEtoAtt = 0, uint16__Str1NbEtoAttOH = 0, uint16__Str1NbEtoCoh = 0, uint16__Str1NbEtoCohOH = 0, float__Str1WRsFil1 = 0.0, float__Str1WRsFil2 = 0.0, float__Str1WRsFil3 = 0.0, uint16__Str1NLPMoyOH1 = 0, uint16__Str1NLPMoyOH2 = 0, uint16__Str1SyntFilOH1 = 0, uint16__Str1SyntFilOH2 = 0, uint16__Str1SyntFDIROH1 = 0, uint16__Str1SyntFDIROH2 = 0, uint16__Str1SyntDesOH1 = 0, uint16__Str1SyntDesOH2 = 0, e__CubeComputerControlProgram8_OhStateVal__Str1OH1State = 0, e__CubeComputerControlProgram8_OhStateVal__Str1OH2State = 0, bool__Str1DataValid = False):
            self.uint32__TimeSeconds = uint32__TimeSeconds
            self.uint32__TimeNs = uint32__TimeNs
            self.uint16__Str0FrameCnt = uint16__Str0FrameCnt
            self.uint16__Str0IDSATM = uint16__Str0IDSATM
            self.uint16__Str0SpecTC = uint16__Str0SpecTC
            self.uint16__Str0SyntDefATM = uint16__Str0SyntDefATM
            self.uint16__Str0SyntFusion = uint16__Str0SyntFusion
            self.uint16__Str0SyntFil = uint16__Str0SyntFil
            self.uint32__Str0DateMesFil = uint32__Str0DateMesFil
            self.double__Str0QRsFil1 = double__Str0QRsFil1
            self.double__Str0QRsFil2 = double__Str0QRsFil2
            self.double__Str0QRsFil3 = double__Str0QRsFil3
            self.double__Str0QRsFil4 = double__Str0QRsFil4
            self.uint16__Str0IQFilXRs = uint16__Str0IQFilXRs
            self.uint16__Str0IQFilYRs = uint16__Str0IQFilYRs
            self.uint16__Str0IQFilZRs = uint16__Str0IQFilZRs
            self.uint16__Str0NbEtoAtt = uint16__Str0NbEtoAtt
            self.uint16__Str0NbEtoAttOH = uint16__Str0NbEtoAttOH
            self.uint16__Str0NbEtoCoh = uint16__Str0NbEtoCoh
            self.uint16__Str0NbEtoCohOH = uint16__Str0NbEtoCohOH
            self.float__Str0WRsFil1 = float__Str0WRsFil1
            self.float__Str0WRsFil2 = float__Str0WRsFil2
            self.float__Str0WRsFil3 = float__Str0WRsFil3
            self.uint16__Str0NLPMoyOH1 = uint16__Str0NLPMoyOH1
            self.uint16__Str0NLPMoyOH2 = uint16__Str0NLPMoyOH2
            self.uint16__Str0SyntFilOH1 = uint16__Str0SyntFilOH1
            self.uint16__Str0SyntFilOH2 = uint16__Str0SyntFilOH2
            self.uint16__Str0SyntFDIROH1 = uint16__Str0SyntFDIROH1
            self.uint16__Str0SyntFDIROH2 = uint16__Str0SyntFDIROH2
            self.uint16__Str0SyntDesOH1 = uint16__Str0SyntDesOH1
            self.uint16__Str0SyntDesOH2 = uint16__Str0SyntDesOH2
            self.e__CubeComputerControlProgram8_OhStateVal__Str0OH1State = e__CubeComputerControlProgram8_OhStateVal__Str0OH1State
            self.e__CubeComputerControlProgram8_OhStateVal__Str0OH2State = e__CubeComputerControlProgram8_OhStateVal__Str0OH2State
            self.bool__Str0DataValid = bool__Str0DataValid
            self.uint16__Str1FrameCnt = uint16__Str1FrameCnt
            self.uint16__Str1IDSATM = uint16__Str1IDSATM
            self.uint16__Str1SpecTC = uint16__Str1SpecTC
            self.uint16__Str1SyntDefATM = uint16__Str1SyntDefATM
            self.uint16__Str1SyntFusion = uint16__Str1SyntFusion
            self.uint16__Str1SyntFil = uint16__Str1SyntFil
            self.uint32__Str1DateMesFil = uint32__Str1DateMesFil
            self.double__Str1QRsFil1 = double__Str1QRsFil1
            self.double__Str1QRsFil2 = double__Str1QRsFil2
            self.double__Str1QRsFil3 = double__Str1QRsFil3
            self.double__Str1QRsFil4 = double__Str1QRsFil4
            self.uint16__Str1IQFilXRs = uint16__Str1IQFilXRs
            self.uint16__Str1IQFilYRs = uint16__Str1IQFilYRs
            self.uint16__Str1IQFilZRs = uint16__Str1IQFilZRs
            self.uint16__Str1NbEtoAtt = uint16__Str1NbEtoAtt
            self.uint16__Str1NbEtoAttOH = uint16__Str1NbEtoAttOH
            self.uint16__Str1NbEtoCoh = uint16__Str1NbEtoCoh
            self.uint16__Str1NbEtoCohOH = uint16__Str1NbEtoCohOH
            self.float__Str1WRsFil1 = float__Str1WRsFil1
            self.float__Str1WRsFil2 = float__Str1WRsFil2
            self.float__Str1WRsFil3 = float__Str1WRsFil3
            self.uint16__Str1NLPMoyOH1 = uint16__Str1NLPMoyOH1
            self.uint16__Str1NLPMoyOH2 = uint16__Str1NLPMoyOH2
            self.uint16__Str1SyntFilOH1 = uint16__Str1SyntFilOH1
            self.uint16__Str1SyntFilOH2 = uint16__Str1SyntFilOH2
            self.uint16__Str1SyntFDIROH1 = uint16__Str1SyntFDIROH1
            self.uint16__Str1SyntFDIROH2 = uint16__Str1SyntFDIROH2
            self.uint16__Str1SyntDesOH1 = uint16__Str1SyntDesOH1
            self.uint16__Str1SyntDesOH2 = uint16__Str1SyntDesOH2
            self.e__CubeComputerControlProgram8_OhStateVal__Str1OH1State = e__CubeComputerControlProgram8_OhStateVal__Str1OH1State
            self.e__CubeComputerControlProgram8_OhStateVal__Str1OH2State = e__CubeComputerControlProgram8_OhStateVal__Str1OH2State
            self.bool__Str1DataValid = bool__Str1DataValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeSeconds)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__TimeNs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0FrameCnt)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0IDSATM)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SpecTC)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SyntDefATM)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SyntFusion)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SyntFil)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str0DateMesFil)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0QRsFil1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0QRsFil2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0QRsFil3)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0QRsFil4)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0IQFilXRs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0IQFilYRs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0IQFilZRs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0NbEtoAtt)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0NbEtoAttOH)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0NbEtoCoh)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0NbEtoCohOH)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0WRsFil1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0WRsFil2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str0WRsFil3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0NLPMoyOH1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0NLPMoyOH2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SyntFilOH1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SyntFilOH2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SyntFDIROH1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SyntFDIROH2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SyntDesOH1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0SyntDesOH2)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal(self.e__CubeComputerControlProgram8_OhStateVal__Str0OH1State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal(self.e__CubeComputerControlProgram8_OhStateVal__Str0OH2State).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0DataValid)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1FrameCnt)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1IDSATM)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SpecTC)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SyntDefATM)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SyntFusion)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SyntFil)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str1DateMesFil)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1QRsFil1)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1QRsFil2)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1QRsFil3)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1QRsFil4)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1IQFilXRs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1IQFilYRs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1IQFilZRs)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1NbEtoAtt)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1NbEtoAttOH)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1NbEtoCoh)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1NbEtoCohOH)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1WRsFil1)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1WRsFil2)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Str1WRsFil3)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1NLPMoyOH1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1NLPMoyOH2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SyntFilOH1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SyntFilOH2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SyntFDIROH1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SyntFDIROH2)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SyntDesOH1)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1SyntDesOH2)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal(self.e__CubeComputerControlProgram8_OhStateVal__Str1OH1State).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal(self.e__CubeComputerControlProgram8_OhStateVal__Str1OH2State).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1DataValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrCubeAurigaRaw()
    
            currentPos = pos
            
            (resultInstance.uint32__TimeSeconds, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__TimeNs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0FrameCnt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0IDSATM, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SpecTC, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SyntDefATM, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SyntFusion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SyntFil, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str0DateMesFil, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0QRsFil1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0QRsFil2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0QRsFil3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0QRsFil4, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0IQFilXRs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0IQFilYRs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0IQFilZRs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0NbEtoAtt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0NbEtoAttOH, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0NbEtoCoh, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0NbEtoCohOH, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0WRsFil1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0WRsFil2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str0WRsFil3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0NLPMoyOH1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0NLPMoyOH2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SyntFilOH1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SyntFilOH2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SyntFDIROH1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SyntFDIROH2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SyntDesOH1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0SyntDesOH2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_OhStateVal__Str0OH1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_OhStateVal__Str0OH2State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0DataValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1FrameCnt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1IDSATM, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SpecTC, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SyntDefATM, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SyntFusion, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SyntFil, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str1DateMesFil, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1QRsFil1, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1QRsFil2, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1QRsFil3, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1QRsFil4, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1IQFilXRs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1IQFilYRs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1IQFilZRs, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1NbEtoAtt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1NbEtoAttOH, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1NbEtoCoh, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1NbEtoCohOH, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1WRsFil1, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1WRsFil2, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Str1WRsFil3, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1NLPMoyOH1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1NLPMoyOH2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SyntFilOH1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SyntFilOH2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SyntFDIROH1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SyntFDIROH2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SyntDesOH1, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1SyntDesOH2, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_OhStateVal__Str1OH1State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_OhStateVal__Str1OH2State, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_OhStateVal.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1DataValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 194
    
    class struct_TlmAcpExecution:
        def __init__(self, uint16__TimeSinceLoopStart = 0, e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint = 0, uint16__ExecTimeNodeSync = 0, uint16__ExecTimeSensorComms = 0, uint16__ExecTimeSensorCal = 0, uint16__ExecTimeEstimators = 0, uint16__ExecTimeControllers = 0, uint16__ExecTimeWheelComms = 0, uint16__ExecTimeModels = 0, uint16__ExecTimeLoopSync = 0, uint16__ExecTimeHealth = 0, uint16__ExecTimeTlmLog = 0, int16__LoopRtcOffset = 0, bool__LoopHasStarted = False, bool__HilSyncOk = False):
            self.uint16__TimeSinceLoopStart = uint16__TimeSinceLoopStart
            self.e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint = e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint
            self.uint16__ExecTimeNodeSync = uint16__ExecTimeNodeSync
            self.uint16__ExecTimeSensorComms = uint16__ExecTimeSensorComms
            self.uint16__ExecTimeSensorCal = uint16__ExecTimeSensorCal
            self.uint16__ExecTimeEstimators = uint16__ExecTimeEstimators
            self.uint16__ExecTimeControllers = uint16__ExecTimeControllers
            self.uint16__ExecTimeWheelComms = uint16__ExecTimeWheelComms
            self.uint16__ExecTimeModels = uint16__ExecTimeModels
            self.uint16__ExecTimeLoopSync = uint16__ExecTimeLoopSync
            self.uint16__ExecTimeHealth = uint16__ExecTimeHealth
            self.uint16__ExecTimeTlmLog = uint16__ExecTimeTlmLog
            self.int16__LoopRtcOffset = int16__LoopRtcOffset
            self.bool__LoopHasStarted = bool__LoopHasStarted
            self.bool__HilSyncOk = bool__HilSyncOk
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__TimeSinceLoopStart)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AcpExecutionPoint(self.e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeNodeSync)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeSensorComms)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeSensorCal)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeEstimators)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeControllers)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeWheelComms)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeModels)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeLoopSync)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeHealth)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__ExecTimeTlmLog)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__LoopRtcOffset)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__LoopHasStarted)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__HilSyncOk)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmAcpExecution()
    
            currentPos = pos
            
            (resultInstance.uint16__TimeSinceLoopStart, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AcpExecutionPoint__CurrentExecutionPoint, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AcpExecutionPoint.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeNodeSync, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeSensorComms, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeSensorCal, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeEstimators, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeControllers, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeWheelComms, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeModels, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeLoopSync, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeHealth, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__ExecTimeTlmLog, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__LoopRtcOffset, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__LoopHasStarted, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__HilSyncOk, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 27
    
    class struct_TlmTorquerCurrents:
        def __init__(self, float__Mtq1TotalCurrentPeakPos = 0.0, float__Mtq1TotalCurrentAveragePos = 0.0, float__Mtq1TotalCurrentPeakNeg = 0.0, float__Mtq1TotalCurrentAverageNeg = 0.0, float__Mtq2TotalCurrentPeakPos = 0.0, float__Mtq2TotalCurrentAveragePos = 0.0, float__Mtq2TotalCurrentPeakNeg = 0.0, float__Mtq2TotalCurrentAverageNeg = 0.0, float__Mtq3TotalCurrentPeakPos = 0.0, float__Mtq3TotalCurrentAveragePos = 0.0, float__Mtq3TotalCurrentPeakNeg = 0.0, float__Mtq3TotalCurrentAverageNeg = 0.0, e__CubeComputerControlProgram8_MtqPolarity__Mtq1Polarity = 0, e__CubeComputerControlProgram8_MtqPolarity__Mtq2Polarity = 0, e__CubeComputerControlProgram8_MtqPolarity__Mtq3Polarity = 0):
            self.float__Mtq1TotalCurrentPeakPos = float__Mtq1TotalCurrentPeakPos
            self.float__Mtq1TotalCurrentAveragePos = float__Mtq1TotalCurrentAveragePos
            self.float__Mtq1TotalCurrentPeakNeg = float__Mtq1TotalCurrentPeakNeg
            self.float__Mtq1TotalCurrentAverageNeg = float__Mtq1TotalCurrentAverageNeg
            self.float__Mtq2TotalCurrentPeakPos = float__Mtq2TotalCurrentPeakPos
            self.float__Mtq2TotalCurrentAveragePos = float__Mtq2TotalCurrentAveragePos
            self.float__Mtq2TotalCurrentPeakNeg = float__Mtq2TotalCurrentPeakNeg
            self.float__Mtq2TotalCurrentAverageNeg = float__Mtq2TotalCurrentAverageNeg
            self.float__Mtq3TotalCurrentPeakPos = float__Mtq3TotalCurrentPeakPos
            self.float__Mtq3TotalCurrentAveragePos = float__Mtq3TotalCurrentAveragePos
            self.float__Mtq3TotalCurrentPeakNeg = float__Mtq3TotalCurrentPeakNeg
            self.float__Mtq3TotalCurrentAverageNeg = float__Mtq3TotalCurrentAverageNeg
            self.e__CubeComputerControlProgram8_MtqPolarity__Mtq1Polarity = e__CubeComputerControlProgram8_MtqPolarity__Mtq1Polarity
            self.e__CubeComputerControlProgram8_MtqPolarity__Mtq2Polarity = e__CubeComputerControlProgram8_MtqPolarity__Mtq2Polarity
            self.e__CubeComputerControlProgram8_MtqPolarity__Mtq3Polarity = e__CubeComputerControlProgram8_MtqPolarity__Mtq3Polarity
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq1TotalCurrentPeakPos)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq1TotalCurrentAveragePos)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq1TotalCurrentPeakNeg)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq1TotalCurrentAverageNeg)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq2TotalCurrentPeakPos)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq2TotalCurrentAveragePos)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq2TotalCurrentPeakNeg)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq2TotalCurrentAverageNeg)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq3TotalCurrentPeakPos)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq3TotalCurrentAveragePos)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq3TotalCurrentPeakNeg)
            
            result += SerDesHelpers.serdesType_float.serialize(self.float__Mtq3TotalCurrentAverageNeg)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MtqPolarity(self.e__CubeComputerControlProgram8_MtqPolarity__Mtq1Polarity).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MtqPolarity(self.e__CubeComputerControlProgram8_MtqPolarity__Mtq2Polarity).serialize()
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MtqPolarity(self.e__CubeComputerControlProgram8_MtqPolarity__Mtq3Polarity).serialize()
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmTorquerCurrents()
    
            currentPos = pos
            
            (resultInstance.float__Mtq1TotalCurrentPeakPos, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq1TotalCurrentAveragePos, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq1TotalCurrentPeakNeg, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq1TotalCurrentAverageNeg, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq2TotalCurrentPeakPos, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq2TotalCurrentAveragePos, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq2TotalCurrentPeakNeg, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq2TotalCurrentAverageNeg, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq3TotalCurrentPeakPos, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq3TotalCurrentAveragePos, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq3TotalCurrentPeakNeg, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.float__Mtq3TotalCurrentAverageNeg, bytesProcessed) = SerDesHelpers.serdesType_float.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_MtqPolarity__Mtq1Polarity, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MtqPolarity.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_MtqPolarity__Mtq2Polarity, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MtqPolarity.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_MtqPolarity__Mtq3Polarity, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_MtqPolarity.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 51
    
    class struct_TlmCubeComputerHealth:
        def __init__(self, double__McuTemp = 0.0, double__McuCurrent = 0.0, uint16__McuVoltage = 0, uint16__SupplyVoltage = 0, uint16__v5Sense = 0, uint16__BatteryVoltage = 0, uint16__VersionVoltage = 0, double__Sram1Current = 0.0, double__Sram2Current = 0.0, double__FpgaCurrent1v5 = 0.0, double__FramCurrent = 0.0, double__AdcCurrent = 0.0, double__FlashCurrent = 0.0, double__Rs485Current = 0.0, double__CanCurrent = 0.0, double__GyroCurrent = 0.0, double__RedGyroCurrent = 0.0, bool__GyroOverVoltage = False, bool__GyroUnderVoltage = False, bool__RedGyroOverVoltage = False, bool__RedGyroUnderVoltage = False, a__uint8__5__WatchdogCount = []):
            self.double__McuTemp = double__McuTemp
            self.double__McuCurrent = double__McuCurrent
            self.uint16__McuVoltage = uint16__McuVoltage
            self.uint16__SupplyVoltage = uint16__SupplyVoltage
            self.uint16__v5Sense = uint16__v5Sense
            self.uint16__BatteryVoltage = uint16__BatteryVoltage
            self.uint16__VersionVoltage = uint16__VersionVoltage
            self.double__Sram1Current = double__Sram1Current
            self.double__Sram2Current = double__Sram2Current
            self.double__FpgaCurrent1v5 = double__FpgaCurrent1v5
            self.double__FramCurrent = double__FramCurrent
            self.double__AdcCurrent = double__AdcCurrent
            self.double__FlashCurrent = double__FlashCurrent
            self.double__Rs485Current = double__Rs485Current
            self.double__CanCurrent = double__CanCurrent
            self.double__GyroCurrent = double__GyroCurrent
            self.double__RedGyroCurrent = double__RedGyroCurrent
            self.bool__GyroOverVoltage = bool__GyroOverVoltage
            self.bool__GyroUnderVoltage = bool__GyroUnderVoltage
            self.bool__RedGyroOverVoltage = bool__RedGyroOverVoltage
            self.bool__RedGyroUnderVoltage = bool__RedGyroUnderVoltage
            self.a__uint8__5__WatchdogCount = a__uint8__5__WatchdogCount
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__McuVoltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__SupplyVoltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__v5Sense)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__BatteryVoltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__VersionVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Sram1Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Sram2Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__FpgaCurrent1v5)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__FramCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__AdcCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__FlashCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rs485Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__CanCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__GyroCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__RedGyroCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__GyroOverVoltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__GyroUnderVoltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__RedGyroOverVoltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__RedGyroUnderVoltage)
            actualLen = len(self.a__uint8__5__WatchdogCount)
            
            result += SerDesHelpers.serdesType_basicArray.serialize("uint8", self.a__uint8__5__WatchdogCount, 5)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmCubeComputerHealth()
    
            currentPos = pos
            
            (resultInstance.double__McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__SupplyVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__v5Sense, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__BatteryVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__VersionVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Sram1Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Sram2Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__FpgaCurrent1v5, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__FramCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__AdcCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__FlashCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rs485Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__CanCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__GyroCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__RedGyroCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__GyroOverVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__GyroUnderVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__RedGyroOverVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__RedGyroUnderVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.a__uint8__5__WatchdogCount, bytesProcessed) = SerDesHelpers.serdesType_basicArray.deserialize("uint8", data, currentPos, 5)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 115
    
    class struct_TlmFssCubeSenseSunHealth:
        def __init__(self, double__Fss0McuTemp = 0.0, double__Fss0McuCurrent = 0.0, uint16__Fss0McuVoltage = 0, double__Fss0CurrentCam = 0.0, double__Fss0CurrentSram = 0.0, bool__Fss0OvercurrentCam = False, bool__Fss0OvercurrentSram = False, double__Fss1McuTemp = 0.0, double__Fss1McuCurrent = 0.0, uint16__Fss1McuVoltage = 0, double__Fss1CurrentCam = 0.0, double__Fss1CurrentSram = 0.0, bool__Fss1OvercurrentCam = False, bool__Fss1OvercurrentSram = False, double__Fss2McuTemp = 0.0, double__Fss2McuCurrent = 0.0, uint16__Fss2McuVoltage = 0, double__Fss2CurrentCam = 0.0, double__Fss2CurrentSram = 0.0, bool__Fss2OvercurrentCam = False, bool__Fss2OvercurrentSram = False, double__Fss3McuTemp = 0.0, double__Fss3McuCurrent = 0.0, uint16__Fss3McuVoltage = 0, double__Fss3CurrentCam = 0.0, double__Fss3CurrentSram = 0.0, bool__Fss3OvercurrentCam = False, bool__Fss3OvercurrentSram = False):
            self.double__Fss0McuTemp = double__Fss0McuTemp
            self.double__Fss0McuCurrent = double__Fss0McuCurrent
            self.uint16__Fss0McuVoltage = uint16__Fss0McuVoltage
            self.double__Fss0CurrentCam = double__Fss0CurrentCam
            self.double__Fss0CurrentSram = double__Fss0CurrentSram
            self.bool__Fss0OvercurrentCam = bool__Fss0OvercurrentCam
            self.bool__Fss0OvercurrentSram = bool__Fss0OvercurrentSram
            self.double__Fss1McuTemp = double__Fss1McuTemp
            self.double__Fss1McuCurrent = double__Fss1McuCurrent
            self.uint16__Fss1McuVoltage = uint16__Fss1McuVoltage
            self.double__Fss1CurrentCam = double__Fss1CurrentCam
            self.double__Fss1CurrentSram = double__Fss1CurrentSram
            self.bool__Fss1OvercurrentCam = bool__Fss1OvercurrentCam
            self.bool__Fss1OvercurrentSram = bool__Fss1OvercurrentSram
            self.double__Fss2McuTemp = double__Fss2McuTemp
            self.double__Fss2McuCurrent = double__Fss2McuCurrent
            self.uint16__Fss2McuVoltage = uint16__Fss2McuVoltage
            self.double__Fss2CurrentCam = double__Fss2CurrentCam
            self.double__Fss2CurrentSram = double__Fss2CurrentSram
            self.bool__Fss2OvercurrentCam = bool__Fss2OvercurrentCam
            self.bool__Fss2OvercurrentSram = bool__Fss2OvercurrentSram
            self.double__Fss3McuTemp = double__Fss3McuTemp
            self.double__Fss3McuCurrent = double__Fss3McuCurrent
            self.uint16__Fss3McuVoltage = uint16__Fss3McuVoltage
            self.double__Fss3CurrentCam = double__Fss3CurrentCam
            self.double__Fss3CurrentSram = double__Fss3CurrentSram
            self.bool__Fss3OvercurrentCam = bool__Fss3OvercurrentCam
            self.bool__Fss3OvercurrentSram = bool__Fss3OvercurrentSram
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Fss0McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0CurrentCam)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss0CurrentSram)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss0OvercurrentCam)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss0OvercurrentSram)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Fss1McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1CurrentCam)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss1CurrentSram)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss1OvercurrentCam)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss1OvercurrentSram)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Fss2McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2CurrentCam)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss2CurrentSram)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss2OvercurrentCam)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss2OvercurrentSram)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Fss3McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3CurrentCam)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Fss3CurrentSram)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss3OvercurrentCam)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Fss3OvercurrentSram)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmFssCubeSenseSunHealth()
    
            currentPos = pos
            
            (resultInstance.double__Fss0McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Fss0McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0CurrentCam, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss0CurrentSram, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss0OvercurrentCam, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss0OvercurrentSram, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Fss1McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1CurrentCam, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss1CurrentSram, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss1OvercurrentCam, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss1OvercurrentSram, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Fss2McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2CurrentCam, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss2CurrentSram, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss2OvercurrentCam, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss2OvercurrentSram, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Fss3McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3CurrentCam, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Fss3CurrentSram, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss3OvercurrentCam, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Fss3OvercurrentSram, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 144
    
    class struct_TlmHssCubeSenseEarthHealth:
        def __init__(self, double__Hss0McuTemp = 0.0, double__Hss0McuCurrent = 0.0, uint16__Hss0McuVoltage = 0, double__Hss0DetectorTemp = 0.0, double__Hss0DetectorCurrent = 0.0, double__Hss1McuTemp = 0.0, double__Hss1McuCurrent = 0.0, uint16__Hss1McuVoltage = 0, double__Hss1DetectorTemp = 0.0, double__Hss1DetectorCurrent = 0.0):
            self.double__Hss0McuTemp = double__Hss0McuTemp
            self.double__Hss0McuCurrent = double__Hss0McuCurrent
            self.uint16__Hss0McuVoltage = uint16__Hss0McuVoltage
            self.double__Hss0DetectorTemp = double__Hss0DetectorTemp
            self.double__Hss0DetectorCurrent = double__Hss0DetectorCurrent
            self.double__Hss1McuTemp = double__Hss1McuTemp
            self.double__Hss1McuCurrent = double__Hss1McuCurrent
            self.uint16__Hss1McuVoltage = uint16__Hss1McuVoltage
            self.double__Hss1DetectorTemp = double__Hss1DetectorTemp
            self.double__Hss1DetectorCurrent = double__Hss1DetectorCurrent
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Hss0McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0DetectorTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss0DetectorCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Hss1McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1DetectorTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Hss1DetectorCurrent)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmHssCubeSenseEarthHealth()
    
            currentPos = pos
            
            (resultInstance.double__Hss0McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Hss0McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0DetectorTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss0DetectorCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Hss1McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1DetectorTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Hss1DetectorCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 68
    
    class struct_TlmCubeMagHealth:
        def __init__(self, double__Mag0McuTemp = 0.0, double__Mag0McuCurrent = 0.0, uint16__Mag0McuVoltage = 0, double__Mag0PrimaryTemp = 0.0, double__Mag0RedTemp = 0.0, uint32__Mag0BurnCurrent = 0, bool__Mag0DeployPinState = False, bool__Mag0BurnPinState = False, bool__Mag0BurnUnderCurrent = False, bool__Mag0BurnOverCurrent = False, bool__Mag0DeployTimeout = False, double__Mag1McuTemp = 0.0, double__Mag1McuCurrent = 0.0, uint16__Mag1McuVoltage = 0, double__Mag1PrimaryTemp = 0.0, double__Mag1RedTemp = 0.0, uint32__Mag1BurnCurrent = 0, bool__Mag1DeployPinState = False, bool__Mag1BurnPinState = False, bool__Mag1BurnUnderCurrent = False, bool__Mag1BurnOverCurrent = False, bool__Mag1DeployTimeout = False):
            self.double__Mag0McuTemp = double__Mag0McuTemp
            self.double__Mag0McuCurrent = double__Mag0McuCurrent
            self.uint16__Mag0McuVoltage = uint16__Mag0McuVoltage
            self.double__Mag0PrimaryTemp = double__Mag0PrimaryTemp
            self.double__Mag0RedTemp = double__Mag0RedTemp
            self.uint32__Mag0BurnCurrent = uint32__Mag0BurnCurrent
            self.bool__Mag0DeployPinState = bool__Mag0DeployPinState
            self.bool__Mag0BurnPinState = bool__Mag0BurnPinState
            self.bool__Mag0BurnUnderCurrent = bool__Mag0BurnUnderCurrent
            self.bool__Mag0BurnOverCurrent = bool__Mag0BurnOverCurrent
            self.bool__Mag0DeployTimeout = bool__Mag0DeployTimeout
            self.double__Mag1McuTemp = double__Mag1McuTemp
            self.double__Mag1McuCurrent = double__Mag1McuCurrent
            self.uint16__Mag1McuVoltage = uint16__Mag1McuVoltage
            self.double__Mag1PrimaryTemp = double__Mag1PrimaryTemp
            self.double__Mag1RedTemp = double__Mag1RedTemp
            self.uint32__Mag1BurnCurrent = uint32__Mag1BurnCurrent
            self.bool__Mag1DeployPinState = bool__Mag1DeployPinState
            self.bool__Mag1BurnPinState = bool__Mag1BurnPinState
            self.bool__Mag1BurnUnderCurrent = bool__Mag1BurnUnderCurrent
            self.bool__Mag1BurnOverCurrent = bool__Mag1BurnOverCurrent
            self.bool__Mag1DeployTimeout = bool__Mag1DeployTimeout
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Mag0McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0PrimaryTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag0RedTemp)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Mag0BurnCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag0DeployPinState)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag0BurnPinState)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag0BurnUnderCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag0BurnOverCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag0DeployTimeout)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Mag1McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1PrimaryTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Mag1RedTemp)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Mag1BurnCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag1DeployPinState)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag1BurnPinState)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag1BurnUnderCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag1BurnOverCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Mag1DeployTimeout)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmCubeMagHealth()
    
            currentPos = pos
            
            (resultInstance.double__Mag0McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Mag0McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0PrimaryTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag0RedTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Mag0BurnCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag0DeployPinState, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag0BurnPinState, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag0BurnUnderCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag0BurnOverCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag0DeployTimeout, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Mag1McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1PrimaryTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Mag1RedTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Mag1BurnCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag1DeployPinState, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag1BurnPinState, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag1BurnUnderCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag1BurnOverCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Mag1DeployTimeout, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 86
    
    class struct_TlmRwlHealth:
        def __init__(self, double__Rwl0McuTemp = 0.0, double__Rwl0McuCurrent = 0.0, uint16__Rwl0BatVoltage = 0, double__Rwl0BatCurrent = 0.0, double__Rwl1McuTemp = 0.0, double__Rwl1McuCurrent = 0.0, uint16__Rwl1BatVoltage = 0, double__Rwl1BatCurrent = 0.0, double__Rwl2McuTemp = 0.0, double__Rwl2McuCurrent = 0.0, uint16__Rwl2BatVoltage = 0, double__Rwl2BatCurrent = 0.0, double__Rwl3McuTemp = 0.0, double__Rwl3McuCurrent = 0.0, uint16__Rwl3BatVoltage = 0, double__Rwl3BatCurrent = 0.0):
            self.double__Rwl0McuTemp = double__Rwl0McuTemp
            self.double__Rwl0McuCurrent = double__Rwl0McuCurrent
            self.uint16__Rwl0BatVoltage = uint16__Rwl0BatVoltage
            self.double__Rwl0BatCurrent = double__Rwl0BatCurrent
            self.double__Rwl1McuTemp = double__Rwl1McuTemp
            self.double__Rwl1McuCurrent = double__Rwl1McuCurrent
            self.uint16__Rwl1BatVoltage = uint16__Rwl1BatVoltage
            self.double__Rwl1BatCurrent = double__Rwl1BatCurrent
            self.double__Rwl2McuTemp = double__Rwl2McuTemp
            self.double__Rwl2McuCurrent = double__Rwl2McuCurrent
            self.uint16__Rwl2BatVoltage = uint16__Rwl2BatVoltage
            self.double__Rwl2BatCurrent = double__Rwl2BatCurrent
            self.double__Rwl3McuTemp = double__Rwl3McuTemp
            self.double__Rwl3McuCurrent = double__Rwl3McuCurrent
            self.uint16__Rwl3BatVoltage = uint16__Rwl3BatVoltage
            self.double__Rwl3BatCurrent = double__Rwl3BatCurrent
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl0McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl0McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl0BatVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl0BatCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl1McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl1McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl1BatVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl1BatCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl2McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl2McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl2BatVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl2BatCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl3McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl3McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl3BatVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl3BatCurrent)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmRwlHealth()
    
            currentPos = pos
            
            (resultInstance.double__Rwl0McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl0McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl0BatVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl0BatCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl1McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl1McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl1BatVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl1BatCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl2McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl2McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl2BatVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl2BatCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl3McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl3McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl3BatVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl3BatCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 104
    
    class struct_TlmStrPst3sHealth:
        def __init__(self, double__Str0McuTemp = 0.0, double__Str0McuCurrent = 0.0, uint16__Str0McuVoltage = 0, double__Str0Pst3sCurrent = 0.0, bool__Str0Pst3sOvercurrent = False, double__Str1McuTemp = 0.0, double__Str1McuCurrent = 0.0, uint16__Str1McuVoltage = 0, double__Str1Pst3sCurrent = 0.0, bool__Str1Pst3sOvercurrent = False):
            self.double__Str0McuTemp = double__Str0McuTemp
            self.double__Str0McuCurrent = double__Str0McuCurrent
            self.uint16__Str0McuVoltage = uint16__Str0McuVoltage
            self.double__Str0Pst3sCurrent = double__Str0Pst3sCurrent
            self.bool__Str0Pst3sOvercurrent = bool__Str0Pst3sOvercurrent
            self.double__Str1McuTemp = double__Str1McuTemp
            self.double__Str1McuCurrent = double__Str1McuCurrent
            self.uint16__Str1McuVoltage = uint16__Str1McuVoltage
            self.double__Str1Pst3sCurrent = double__Str1Pst3sCurrent
            self.bool__Str1Pst3sOvercurrent = bool__Str1Pst3sOvercurrent
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0Pst3sCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0Pst3sOvercurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1Pst3sCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1Pst3sOvercurrent)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrPst3sHealth()
    
            currentPos = pos
            
            (resultInstance.double__Str0McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0Pst3sCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0Pst3sOvercurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1Pst3sCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1Pst3sOvercurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 54
    
    class struct_TlmNssRwlHealth:
        def __init__(self, double__Rwl0McuTemp = 0.0, double__Rwl0McuCurrent = 0.0, uint16__Rwl0McuVoltage = 0, double__Rwl0Current5v = 0.0, uint16__Rwl0PmuCurrent = 0, bool__Rwl0Overcurrent5v = False, bool__Rwl0PowerGood = False, bool__Rwl0PmuCurrentValid = False, double__Rwl1McuTemp = 0.0, double__Rwl1McuCurrent = 0.0, uint16__Rwl1McuVoltage = 0, double__Rwl1Current5v = 0.0, uint16__Rwl1PmuCurrent = 0, bool__Rwl1Overcurrent5v = False, bool__Rwl1PowerGood = False, bool__Rwl1PmuCurrentValid = False, double__Rwl2McuTemp = 0.0, double__Rwl2McuCurrent = 0.0, uint16__Rwl2McuVoltage = 0, double__Rwl2Current5v = 0.0, uint16__Rwl2PmuCurrent = 0, bool__Rwl2Overcurrent5v = False, bool__Rwl2PowerGood = False, bool__Rwl2PmuCurrentValid = False, double__Rwl3McuTemp = 0.0, double__Rwl3McuCurrent = 0.0, uint16__Rwl3McuVoltage = 0, double__Rwl3Current5v = 0.0, uint16__Rwl3PmuCurrent = 0, bool__Rwl3Overcurrent5v = False, bool__Rwl3PowerGood = False, bool__Rwl3PmuCurrentValid = False):
            self.double__Rwl0McuTemp = double__Rwl0McuTemp
            self.double__Rwl0McuCurrent = double__Rwl0McuCurrent
            self.uint16__Rwl0McuVoltage = uint16__Rwl0McuVoltage
            self.double__Rwl0Current5v = double__Rwl0Current5v
            self.uint16__Rwl0PmuCurrent = uint16__Rwl0PmuCurrent
            self.bool__Rwl0Overcurrent5v = bool__Rwl0Overcurrent5v
            self.bool__Rwl0PowerGood = bool__Rwl0PowerGood
            self.bool__Rwl0PmuCurrentValid = bool__Rwl0PmuCurrentValid
            self.double__Rwl1McuTemp = double__Rwl1McuTemp
            self.double__Rwl1McuCurrent = double__Rwl1McuCurrent
            self.uint16__Rwl1McuVoltage = uint16__Rwl1McuVoltage
            self.double__Rwl1Current5v = double__Rwl1Current5v
            self.uint16__Rwl1PmuCurrent = uint16__Rwl1PmuCurrent
            self.bool__Rwl1Overcurrent5v = bool__Rwl1Overcurrent5v
            self.bool__Rwl1PowerGood = bool__Rwl1PowerGood
            self.bool__Rwl1PmuCurrentValid = bool__Rwl1PmuCurrentValid
            self.double__Rwl2McuTemp = double__Rwl2McuTemp
            self.double__Rwl2McuCurrent = double__Rwl2McuCurrent
            self.uint16__Rwl2McuVoltage = uint16__Rwl2McuVoltage
            self.double__Rwl2Current5v = double__Rwl2Current5v
            self.uint16__Rwl2PmuCurrent = uint16__Rwl2PmuCurrent
            self.bool__Rwl2Overcurrent5v = bool__Rwl2Overcurrent5v
            self.bool__Rwl2PowerGood = bool__Rwl2PowerGood
            self.bool__Rwl2PmuCurrentValid = bool__Rwl2PmuCurrentValid
            self.double__Rwl3McuTemp = double__Rwl3McuTemp
            self.double__Rwl3McuCurrent = double__Rwl3McuCurrent
            self.uint16__Rwl3McuVoltage = uint16__Rwl3McuVoltage
            self.double__Rwl3Current5v = double__Rwl3Current5v
            self.uint16__Rwl3PmuCurrent = uint16__Rwl3PmuCurrent
            self.bool__Rwl3Overcurrent5v = bool__Rwl3Overcurrent5v
            self.bool__Rwl3PowerGood = bool__Rwl3PowerGood
            self.bool__Rwl3PmuCurrentValid = bool__Rwl3PmuCurrentValid
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl0McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl0McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl0McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl0Current5v)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl0PmuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0Overcurrent5v)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0PowerGood)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl0PmuCurrentValid)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl1McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl1McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl1McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl1Current5v)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl1PmuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1Overcurrent5v)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1PowerGood)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl1PmuCurrentValid)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl2McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl2McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl2McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl2Current5v)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl2PmuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2Overcurrent5v)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2PowerGood)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl2PmuCurrentValid)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl3McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl3McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl3McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Rwl3Current5v)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Rwl3PmuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3Overcurrent5v)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3PowerGood)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Rwl3PmuCurrentValid)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmNssRwlHealth()
    
            currentPos = pos
            
            (resultInstance.double__Rwl0McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl0McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl0McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl0Current5v, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl0PmuCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0Overcurrent5v, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0PowerGood, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl0PmuCurrentValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl1McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl1McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl1McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl1Current5v, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl1PmuCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1Overcurrent5v, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1PowerGood, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl1PmuCurrentValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl2McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl2McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl2McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl2Current5v, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl2PmuCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2Overcurrent5v, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2PowerGood, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl2PmuCurrentValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl3McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl3McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl3McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Rwl3Current5v, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Rwl3PmuCurrent, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3Overcurrent5v, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3PowerGood, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Rwl3PmuCurrentValid, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 124
    
    class struct_TlmStrHealth:
        def __init__(self, double__Str0McuTemp = 0.0, double__Str0McuCurrent = 0.0, uint16__Str0McuVoltage = 0, double__Str0Current = 0.0, double__Str0CurrentPk = 0.0, double__Str0DetectorPcbTemp = 0.0, bool__Str0SensorInitOk = False, bool__Str0SensorConfigOk = False, uint32__Str0ErrorCode = 0, double__Str1McuTemp = 0.0, double__Str1McuCurrent = 0.0, uint16__Str1McuVoltage = 0, double__Str1Current = 0.0, double__Str1CurrentPk = 0.0, double__Str1DetectorPcbTemp = 0.0, bool__Str1SensorInitOk = False, bool__Str1SensorConfigOk = False, uint32__Str1ErrorCode = 0):
            self.double__Str0McuTemp = double__Str0McuTemp
            self.double__Str0McuCurrent = double__Str0McuCurrent
            self.uint16__Str0McuVoltage = uint16__Str0McuVoltage
            self.double__Str0Current = double__Str0Current
            self.double__Str0CurrentPk = double__Str0CurrentPk
            self.double__Str0DetectorPcbTemp = double__Str0DetectorPcbTemp
            self.bool__Str0SensorInitOk = bool__Str0SensorInitOk
            self.bool__Str0SensorConfigOk = bool__Str0SensorConfigOk
            self.uint32__Str0ErrorCode = uint32__Str0ErrorCode
            self.double__Str1McuTemp = double__Str1McuTemp
            self.double__Str1McuCurrent = double__Str1McuCurrent
            self.uint16__Str1McuVoltage = uint16__Str1McuVoltage
            self.double__Str1Current = double__Str1Current
            self.double__Str1CurrentPk = double__Str1CurrentPk
            self.double__Str1DetectorPcbTemp = double__Str1DetectorPcbTemp
            self.bool__Str1SensorInitOk = bool__Str1SensorInitOk
            self.bool__Str1SensorConfigOk = bool__Str1SensorConfigOk
            self.uint32__Str1ErrorCode = uint32__Str1ErrorCode
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0CurrentPk)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0DetectorPcbTemp)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0SensorInitOk)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str0SensorConfigOk)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str0ErrorCode)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1McuCurrent)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1McuVoltage)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1CurrentPk)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1DetectorPcbTemp)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1SensorInitOk)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.bool__Str1SensorConfigOk)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str1ErrorCode)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrHealth()
    
            currentPos = pos
            
            (resultInstance.double__Str0McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0CurrentPk, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0DetectorPcbTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0SensorInitOk, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str0SensorConfigOk, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str0ErrorCode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1McuTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1CurrentPk, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1DetectorPcbTemp, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1SensorInitOk, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.bool__Str1SensorConfigOk, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str1ErrorCode, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 96
    
    class struct_TlmGnssUartStatus:
        def __init__(self, uint32__BytesReceived = 0, uint32__ErrorFlags = 0):
            self.uint32__BytesReceived = uint32__BytesReceived
            self.uint32__ErrorFlags = uint32__ErrorFlags
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__BytesReceived)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__ErrorFlags)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmGnssUartStatus()
    
            currentPos = pos
            
            (resultInstance.uint32__BytesReceived, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__ErrorFlags, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 8
    
    class struct_TlmStrAurigaHealth:
        def __init__(self, uint16__Str0McuVoltage = 0, int16__Str0McuTemp = 0, double__Str0McuCurrent = 0.0, double__Str0SramCurrent = 0.0, double__Str0Oh1Current = 0.0, double__Str0Oh2Current = 0.0, double__Str0Fpga1Current = 0.0, double__Str0Fpga2Current = 0.0, uint16__Str0Fpga1Voltage = 0, uint16__Str0Fpga2Voltage = 0, uint16__Str0ProcessIdleTiming = 0, uint16__Str0AcqSynthFlags = 0, e__CubeComputerControlProgram8_AurigaLibStateVal__Str0STRMode = 0, int16__Str0OH1Temp = 0, int16__Str0OH2Temp = 0, uint16__Str0BlocksValidity = 0, uint8__Str0ResetCnt = 0, uint8__Str0LastTCSeqNum = 0, uint8__Str0TCCnt = 0, uint8__Str0ErrorInfo = 0, uint32__Str0LastErrorParam = 0, uint8__Str0LastErrorId = 0, uint8__Str0TRKLossCnt = 0, uint16__Str1McuVoltage = 0, int16__Str1McuTemp = 0, double__Str1McuCurrent = 0.0, double__Str1SramCurrent = 0.0, double__Str1Oh1Current = 0.0, double__Str1Oh2Current = 0.0, double__Str1Fpga1Current = 0.0, double__Str1Fpga2Current = 0.0, uint16__Str1Fpga1Voltage = 0, uint16__Str1Fpga2Voltage = 0, uint16__Str1ProcessIdleTiming = 0, uint16__Str1AcqSynthFlags = 0, e__CubeComputerControlProgram8_AurigaLibStateVal__Str1STRMode = 0, int16__Str1OH1Temp = 0, int16__Str1OH2Temp = 0, uint16__Str1BlocksValidity = 0, uint8__Str1ResetCnt = 0, uint8__Str1LastTCSeqNum = 0, uint8__Str1TCCnt = 0, uint8__Str1ErrorInfo = 0, uint32__Str1LastErrorParam = 0, uint8__Str1LastErrorId = 0, uint8__Str1TRKLossCnt = 0):
            self.uint16__Str0McuVoltage = uint16__Str0McuVoltage
            self.int16__Str0McuTemp = int16__Str0McuTemp
            self.double__Str0McuCurrent = double__Str0McuCurrent
            self.double__Str0SramCurrent = double__Str0SramCurrent
            self.double__Str0Oh1Current = double__Str0Oh1Current
            self.double__Str0Oh2Current = double__Str0Oh2Current
            self.double__Str0Fpga1Current = double__Str0Fpga1Current
            self.double__Str0Fpga2Current = double__Str0Fpga2Current
            self.uint16__Str0Fpga1Voltage = uint16__Str0Fpga1Voltage
            self.uint16__Str0Fpga2Voltage = uint16__Str0Fpga2Voltage
            self.uint16__Str0ProcessIdleTiming = uint16__Str0ProcessIdleTiming
            self.uint16__Str0AcqSynthFlags = uint16__Str0AcqSynthFlags
            self.e__CubeComputerControlProgram8_AurigaLibStateVal__Str0STRMode = e__CubeComputerControlProgram8_AurigaLibStateVal__Str0STRMode
            self.int16__Str0OH1Temp = int16__Str0OH1Temp
            self.int16__Str0OH2Temp = int16__Str0OH2Temp
            self.uint16__Str0BlocksValidity = uint16__Str0BlocksValidity
            self.uint8__Str0ResetCnt = uint8__Str0ResetCnt
            self.uint8__Str0LastTCSeqNum = uint8__Str0LastTCSeqNum
            self.uint8__Str0TCCnt = uint8__Str0TCCnt
            self.uint8__Str0ErrorInfo = uint8__Str0ErrorInfo
            self.uint32__Str0LastErrorParam = uint32__Str0LastErrorParam
            self.uint8__Str0LastErrorId = uint8__Str0LastErrorId
            self.uint8__Str0TRKLossCnt = uint8__Str0TRKLossCnt
            self.uint16__Str1McuVoltage = uint16__Str1McuVoltage
            self.int16__Str1McuTemp = int16__Str1McuTemp
            self.double__Str1McuCurrent = double__Str1McuCurrent
            self.double__Str1SramCurrent = double__Str1SramCurrent
            self.double__Str1Oh1Current = double__Str1Oh1Current
            self.double__Str1Oh2Current = double__Str1Oh2Current
            self.double__Str1Fpga1Current = double__Str1Fpga1Current
            self.double__Str1Fpga2Current = double__Str1Fpga2Current
            self.uint16__Str1Fpga1Voltage = uint16__Str1Fpga1Voltage
            self.uint16__Str1Fpga2Voltage = uint16__Str1Fpga2Voltage
            self.uint16__Str1ProcessIdleTiming = uint16__Str1ProcessIdleTiming
            self.uint16__Str1AcqSynthFlags = uint16__Str1AcqSynthFlags
            self.e__CubeComputerControlProgram8_AurigaLibStateVal__Str1STRMode = e__CubeComputerControlProgram8_AurigaLibStateVal__Str1STRMode
            self.int16__Str1OH1Temp = int16__Str1OH1Temp
            self.int16__Str1OH2Temp = int16__Str1OH2Temp
            self.uint16__Str1BlocksValidity = uint16__Str1BlocksValidity
            self.uint8__Str1ResetCnt = uint8__Str1ResetCnt
            self.uint8__Str1LastTCSeqNum = uint8__Str1LastTCSeqNum
            self.uint8__Str1TCCnt = uint8__Str1TCCnt
            self.uint8__Str1ErrorInfo = uint8__Str1ErrorInfo
            self.uint32__Str1LastErrorParam = uint32__Str1LastErrorParam
            self.uint8__Str1LastErrorId = uint8__Str1LastErrorId
            self.uint8__Str1TRKLossCnt = uint8__Str1TRKLossCnt
    
        def serialize(self):
            result = bytearray()
    
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0McuVoltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Str0McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0McuCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0SramCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0Oh1Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0Oh2Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0Fpga1Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str0Fpga2Current)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0Fpga1Voltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0Fpga2Voltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0ProcessIdleTiming)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0AcqSynthFlags)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AurigaLibStateVal(self.e__CubeComputerControlProgram8_AurigaLibStateVal__Str0STRMode).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Str0OH1Temp)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Str0OH2Temp)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str0BlocksValidity)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0ResetCnt)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0LastTCSeqNum)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0TCCnt)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0ErrorInfo)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str0LastErrorParam)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0LastErrorId)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str0TRKLossCnt)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1McuVoltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Str1McuTemp)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1McuCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1SramCurrent)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1Oh1Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1Oh2Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1Fpga1Current)
            
            result += SerDesHelpers.serdesType_double.serialize(self.double__Str1Fpga2Current)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1Fpga1Voltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1Fpga2Voltage)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1ProcessIdleTiming)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1AcqSynthFlags)
            
            result += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AurigaLibStateVal(self.e__CubeComputerControlProgram8_AurigaLibStateVal__Str1STRMode).serialize()
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Str1OH1Temp)
            
            result += SerDesHelpers.serdesType_basic.serialize("int16", self.int16__Str1OH2Temp)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint16", self.uint16__Str1BlocksValidity)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1ResetCnt)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1LastTCSeqNum)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1TCCnt)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1ErrorInfo)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint32", self.uint32__Str1LastErrorParam)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1LastErrorId)
            
            result += SerDesHelpers.serdesType_basic.serialize("uint8", self.uint8__Str1TRKLossCnt)
    
            return result
    
        @staticmethod
        def deserialize(data, pos):
            resultInstance = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrAurigaHealth()
    
            currentPos = pos
            
            (resultInstance.uint16__Str0McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Str0McuTemp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0SramCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0Oh1Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0Oh2Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0Fpga1Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str0Fpga2Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0Fpga1Voltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0Fpga2Voltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0ProcessIdleTiming, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0AcqSynthFlags, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AurigaLibStateVal__Str0STRMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AurigaLibStateVal.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Str0OH1Temp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Str0OH2Temp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str0BlocksValidity, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0ResetCnt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0LastTCSeqNum, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0TCCnt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0ErrorInfo, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str0LastErrorParam, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0LastErrorId, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str0TRKLossCnt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1McuVoltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Str1McuTemp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1McuCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1SramCurrent, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1Oh1Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1Oh2Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1Fpga1Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.double__Str1Fpga2Current, bytesProcessed) = SerDesHelpers.serdesType_double.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1Fpga1Voltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1Fpga2Voltage, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1ProcessIdleTiming, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1AcqSynthFlags, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.e__CubeComputerControlProgram8_AurigaLibStateVal__Str1STRMode, bytesProcessed) = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CubeComputerControlProgram8_AurigaLibStateVal.deserialize(data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Str1OH1Temp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.int16__Str1OH2Temp, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("int16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint16__Str1BlocksValidity, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint16", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1ResetCnt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1LastTCSeqNum, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1TCCnt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1ErrorInfo, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint32__Str1LastErrorParam, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint32", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1LastErrorId, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
            
            (resultInstance.uint8__Str1TRKLossCnt, bytesProcessed) = SerDesHelpers.serdesType_basic.deserialize("uint8", data, currentPos)
            currentPos += bytesProcessed
            
    
            # tuple[1] shall contain the total number of bytes processed by the function
            return (resultInstance, currentPos - pos)
    
        @staticmethod
        def getSize():
            return 154
    

    ############################################################################################################
    """
    Request function for FIDL method: setConfigDefaultModes
        - function ID: 00000000
        - description: Default mode configuration
    """
    def req_setConfigDefaultModes(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000000
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000000, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigDefaultModes
        - function ID: 00000000
        - description: Default mode configuration
    """
    def resp_setConfigDefaultModes(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000000):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigMount
        - function ID: 00000001
        - description: Mounting configuration
    """
    def req_setConfigMount(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000001
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000001, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigMount
        - function ID: 00000001
        - description: Mounting configuration
    """
    def resp_setConfigMount(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000001):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigMag0OrbitCal
        - function ID: 00000002
        - description: Mag0 magnetometer in-orbit calibration configuration
    """
    def req_setConfigMag0OrbitCal(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000002
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000002, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigMag0OrbitCal
        - function ID: 00000002
        - description: Mag0 magnetometer in-orbit calibration configuration
    """
    def resp_setConfigMag0OrbitCal(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000002):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigMag1OrbitCal
        - function ID: 00000003
        - description: Mag1 magnetometer in-orbit calibration configuration
    """
    def req_setConfigMag1OrbitCal(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000003
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000003, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigMag1OrbitCal
        - function ID: 00000003
        - description: Mag1 magnetometer in-orbit calibration configuration
    """
    def resp_setConfigMag1OrbitCal(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000003):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigAdcsController
        - function ID: 00000004
        - description: ADCS controller configuration
    """
    def req_setConfigAdcsController(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000004
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000004, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigAdcsController
        - function ID: 00000004
        - description: ADCS controller configuration
    """
    def resp_setConfigAdcsController(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000004):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigAdcsEstimator
        - function ID: 00000005
        - description: ADCS estimator configuration
    """
    def req_setConfigAdcsEstimator(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000005
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000005, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigAdcsEstimator
        - function ID: 00000005
        - description: ADCS estimator configuration
    """
    def resp_setConfigAdcsEstimator(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000005):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigAdcsSatellite
        - function ID: 00000006
        - description: ADCS satellite configuration
    """
    def req_setConfigAdcsSatellite(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000006
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000006, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigAdcsSatellite
        - function ID: 00000006
        - description: ADCS satellite configuration
    """
    def resp_setConfigAdcsSatellite(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000006):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigOrbitSatParams
        - function ID: 00000007
        - description: Satellite orbit parameter configuration
    """
    def req_setConfigOrbitSatParams(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000007
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000007, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigOrbitSatParams
        - function ID: 00000007
        - description: Satellite orbit parameter configuration
    """
    def resp_setConfigOrbitSatParams(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000007):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigOrbitTargetParams
        - function ID: 00000008
        - description: Satellite orbit parameter configuration
    """
    def req_setConfigOrbitTargetParams(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000008
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000008, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigOrbitTargetParams
        - function ID: 00000008
        - description: Satellite orbit parameter configuration
    """
    def resp_setConfigOrbitTargetParams(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000008):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigNodeSelection
        - function ID: 00000009
        - description: Node selection configuration
    """
    def req_setConfigNodeSelection(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000009
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000009, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigNodeSelection
        - function ID: 00000009
        - description: Node selection configuration
    """
    def resp_setConfigNodeSelection(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000009):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigActuatorRwl
        - function ID: 0000000A
        - description: Wheel configuration
    """
    def req_setConfigActuatorRwl(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000A
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000A, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigActuatorRwl
        - function ID: 0000000A
        - description: Wheel configuration
    """
    def resp_setConfigActuatorRwl(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000A):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigActuatorMtq
        - function ID: 0000000B
        - description: Magnetorquer configuration
    """
    def req_setConfigActuatorMtq(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000B
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000B, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigActuatorMtq
        - function ID: 0000000B
        - description: Magnetorquer configuration
    """
    def resp_setConfigActuatorMtq(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000B):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigMagSensingElement
        - function ID: 0000000C
        - description: Mag sensing element (primary/redundant) configuration
    """
    def req_setConfigMagSensingElement(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000C
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000C, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigMagSensingElement
        - function ID: 0000000C
        - description: Mag sensing element (primary/redundant) configuration
    """
    def resp_setConfigMagSensingElement(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000C):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConfigAsgp4
        - function ID: 0000000D
        - description: Augmented SGP4 configuration
    """
    def req_setConfigAsgp4(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000D
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000D, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConfigAsgp4
        - function ID: 0000000D
        - description: Augmented SGP4 configuration
    """
    def resp_setConfigAsgp4(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000D):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setConMode
        - function ID: 0000000E
        - description: Control mode
    """
    def req_setConMode(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000E
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000E, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setConMode
        - function ID: 0000000E
        - description: Control mode
    """
    def resp_setConMode(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000E):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setEstMode
        - function ID: 0000000F
        - description: Estimation mode
    """
    def req_setEstMode(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000000F
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000000F, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setEstMode
        - function ID: 0000000F
        - description: Estimation mode
    """
    def resp_setEstMode(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000000F):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setOrbMode
        - function ID: 00000010
        - description: Orbit mode
    """
    def req_setOrbMode(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000010
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000010, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setOrbMode
        - function ID: 00000010
        - description: Orbit mode
    """
    def resp_setOrbMode(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000010):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setAdcsRunMode
        - function ID: 00000011
        - description: ADCS run mode
    """
    def req_setAdcsRunMode(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000011
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000011, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setAdcsRunMode
        - function ID: 00000011
        - description: ADCS run mode
    """
    def resp_setAdcsRunMode(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000011):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setAdcsOpState
        - function ID: 00000012
        - description: ADCS operational state
    """
    def req_setAdcsOpState(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000012
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000012, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setAdcsOpState
        - function ID: 00000012
        - description: ADCS operational state
    """
    def resp_setAdcsOpState(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000012):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setSimSensorRaw
        - function ID: 00000013
        - description: Simulation raw sensor telemetry
    """
    def req_setSimSensorRaw(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000013
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000013, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setSimSensorRaw
        - function ID: 00000013
        - description: Simulation raw sensor telemetry
    """
    def resp_setSimSensorRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000013):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setOpenLoopCommandMtq
        - function ID: 00000014
        - description: OpenLoopCommandMtq
    """
    def req_setOpenLoopCommandMtq(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000014
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000014, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setOpenLoopCommandMtq
        - function ID: 00000014
        - description: OpenLoopCommandMtq
    """
    def resp_setOpenLoopCommandMtq(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000014):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setOpenLoopCommandRwl
        - function ID: 00000015
        - description: OpenLoopCommandRwl
    """
    def req_setOpenLoopCommandRwl(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000015
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000015, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setOpenLoopCommandRwl
        - function ID: 00000015
        - description: OpenLoopCommandRwl
    """
    def resp_setOpenLoopCommandRwl(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000015):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setOpenLoopCommandHxyzRW
        - function ID: 00000016
        - description: OpenLoopCommandHxyzRW
    """
    def req_setOpenLoopCommandHxyzRW(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000016
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000016, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setOpenLoopCommandHxyzRW
        - function ID: 00000016
        - description: OpenLoopCommandHxyzRW
    """
    def resp_setOpenLoopCommandHxyzRW(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000016):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setReferenceRpy
        - function ID: 00000017
        - description: Reference roll, pitch and yaw values for 3-axis wheel control
    """
    def req_setReferenceRpy(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000017
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000017, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setReferenceRpy
        - function ID: 00000017
        - description: Reference roll, pitch and yaw values for 3-axis wheel control
    """
    def resp_setReferenceRpy(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000017):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setReferenceTarget
        - function ID: 00000018
        - description: Reference target location for ground and target tracking controller
    """
    def req_setReferenceTarget(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000018
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000018, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setReferenceTarget
        - function ID: 00000018
        - description: Reference target location for ground and target tracking controller
    """
    def resp_setReferenceTarget(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000018):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setReferenceIrcVector
        - function ID: 00000019
        - description: Reference IRC vector for inertial target tracking controller
    """
    def req_setReferenceIrcVector(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000019
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000019, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setReferenceIrcVector
        - function ID: 00000019
        - description: Reference IRC vector for inertial target tracking controller
    """
    def resp_setReferenceIrcVector(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000019):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setReferenceFmcParam
        - function ID: 0000001A
        - description: Reference parameters for FMC scan
    """
    def req_setReferenceFmcParam(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000001A
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000001A, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setReferenceFmcParam
        - function ID: 0000001A
        - description: Reference parameters for FMC scan
    """
    def resp_setReferenceFmcParam(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000001A):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setDeployCommandMag
        - function ID: 0000001B
        - description: Deploy Magnetometer
    """
    def req_setDeployCommandMag(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000001B
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000001B, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setDeployCommandMag
        - function ID: 0000001B
        - description: Deploy Magnetometer
    """
    def resp_setDeployCommandMag(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000001B):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setGnssSensorCmd
        - function ID: 0000001C
        - description: GNSS sensor measurements as command to the ADCS
    """
    def req_setGnssSensorCmd(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000001C
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000001C, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setGnssSensorCmd
        - function ID: 0000001C
        - description: GNSS sensor measurements as command to the ADCS
    """
    def resp_setGnssSensorCmd(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000001C):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: setFileTransferSetup
        - function ID: 0000001D
        - description: Setup a file transfer
    """
    def req_setFileTransferSetup(self, e__CmdTargetNode__cmdTargetNode, s__setVal):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000001D
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
        requestBytes += s__setVal.serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000001D, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: setFileTransferSetup
        - function ID: 0000001D
        - description: Setup a file transfer
    """
    def resp_setFileTransferSetup(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000001D):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigDefaultModes
        - function ID: 0000001E
        - description: Default mode configuration
    """
    def req_getConfigDefaultModes(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000001E
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000001E, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigDefaultModes
        - function ID: 0000001E
        - description: Default mode configuration
    """
    def resp_getConfigDefaultModes(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000001E):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigDefaultModes.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigMount
        - function ID: 0000001F
        - description: Mounting configuration
    """
    def req_getConfigMount(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000001F
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000001F, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigMount
        - function ID: 0000001F
        - description: Mounting configuration
    """
    def resp_getConfigMount(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000001F):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigMount.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigMag0OrbitCal
        - function ID: 00000020
        - description: Mag0 magnetometer in-orbit calibration configuration
    """
    def req_getConfigMag0OrbitCal(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000020
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000020, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigMag0OrbitCal
        - function ID: 00000020
        - description: Mag0 magnetometer in-orbit calibration configuration
    """
    def resp_getConfigMag0OrbitCal(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000020):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigMag0OrbitCal.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigMag1OrbitCal
        - function ID: 00000021
        - description: Mag1 magnetometer in-orbit calibration configuration
    """
    def req_getConfigMag1OrbitCal(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000021
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000021, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigMag1OrbitCal
        - function ID: 00000021
        - description: Mag1 magnetometer in-orbit calibration configuration
    """
    def resp_getConfigMag1OrbitCal(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000021):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigMag1OrbitCal.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigAdcsController
        - function ID: 00000022
        - description: ADCS controller configuration
    """
    def req_getConfigAdcsController(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000022
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000022, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigAdcsController
        - function ID: 00000022
        - description: ADCS controller configuration
    """
    def resp_getConfigAdcsController(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000022):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigAdcsController.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigAdcsEstimator
        - function ID: 00000023
        - description: ADCS estimator configuration
    """
    def req_getConfigAdcsEstimator(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000023
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000023, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigAdcsEstimator
        - function ID: 00000023
        - description: ADCS estimator configuration
    """
    def resp_getConfigAdcsEstimator(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000023):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigAdcsEstimator.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigAdcsSatellite
        - function ID: 00000024
        - description: ADCS satellite configuration
    """
    def req_getConfigAdcsSatellite(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000024
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000024, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigAdcsSatellite
        - function ID: 00000024
        - description: ADCS satellite configuration
    """
    def resp_getConfigAdcsSatellite(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000024):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigAdcsSatellite.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigOrbitSatParams
        - function ID: 00000025
        - description: Satellite orbit parameter configuration
    """
    def req_getConfigOrbitSatParams(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000025
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000025, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigOrbitSatParams
        - function ID: 00000025
        - description: Satellite orbit parameter configuration
    """
    def resp_getConfigOrbitSatParams(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000025):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigOrbitSatParams.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigOrbitTargetParams
        - function ID: 00000026
        - description: Satellite orbit parameter configuration
    """
    def req_getConfigOrbitTargetParams(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000026
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000026, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigOrbitTargetParams
        - function ID: 00000026
        - description: Satellite orbit parameter configuration
    """
    def resp_getConfigOrbitTargetParams(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000026):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigOrbitTargetParams.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigNodeSelection
        - function ID: 00000027
        - description: Node selection configuration
    """
    def req_getConfigNodeSelection(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000027
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000027, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigNodeSelection
        - function ID: 00000027
        - description: Node selection configuration
    """
    def resp_getConfigNodeSelection(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000027):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigNodeSelection.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigActuatorRwl
        - function ID: 00000028
        - description: Wheel configuration
    """
    def req_getConfigActuatorRwl(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000028
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000028, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigActuatorRwl
        - function ID: 00000028
        - description: Wheel configuration
    """
    def resp_getConfigActuatorRwl(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000028):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigActuatorRwl.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigActuatorMtq
        - function ID: 00000029
        - description: Magnetorquer configuration
    """
    def req_getConfigActuatorMtq(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000029
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000029, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigActuatorMtq
        - function ID: 00000029
        - description: Magnetorquer configuration
    """
    def resp_getConfigActuatorMtq(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000029):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigActuatorMtq.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigMagSensingElement
        - function ID: 0000002A
        - description: Mag sensing element (primary/redundant) configuration
    """
    def req_getConfigMagSensingElement(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000002A
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000002A, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigMagSensingElement
        - function ID: 0000002A
        - description: Mag sensing element (primary/redundant) configuration
    """
    def resp_getConfigMagSensingElement(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000002A):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigMagSensingElement.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConfigAsgp4
        - function ID: 0000002B
        - description: Augmented SGP4 configuration
    """
    def req_getConfigAsgp4(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000002B
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000002B, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConfigAsgp4
        - function ID: 0000002B
        - description: Augmented SGP4 configuration
    """
    def resp_getConfigAsgp4(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000002B):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConfigAsgp4.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getConMode
        - function ID: 0000002C
        - description: Control mode
    """
    def req_getConMode(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000002C
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000002C, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getConMode
        - function ID: 0000002C
        - description: Control mode
    """
    def resp_getConMode(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000002C):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ConMode.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getEstMode
        - function ID: 0000002D
        - description: Estimation mode
    """
    def req_getEstMode(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000002D
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000002D, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getEstMode
        - function ID: 0000002D
        - description: Estimation mode
    """
    def resp_getEstMode(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000002D):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_EstMode.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getOrbMode
        - function ID: 0000002E
        - description: Orbit mode
    """
    def req_getOrbMode(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000002E
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000002E, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getOrbMode
        - function ID: 0000002E
        - description: Orbit mode
    """
    def resp_getOrbMode(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000002E):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_OrbMode.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getAdcsRunMode
        - function ID: 0000002F
        - description: ADCS run mode
    """
    def req_getAdcsRunMode(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000002F
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000002F, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getAdcsRunMode
        - function ID: 0000002F
        - description: ADCS run mode
    """
    def resp_getAdcsRunMode(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000002F):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_AdcsRunMode.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getAdcsOpState
        - function ID: 00000030
        - description: ADCS operational state
    """
    def req_getAdcsOpState(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000030
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000030, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getAdcsOpState
        - function ID: 00000030
        - description: ADCS operational state
    """
    def resp_getAdcsOpState(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000030):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_AdcsOpState.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getSimSensorRaw
        - function ID: 00000031
        - description: Simulation raw sensor telemetry
    """
    def req_getSimSensorRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000031
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000031, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getSimSensorRaw
        - function ID: 00000031
        - description: Simulation raw sensor telemetry
    """
    def resp_getSimSensorRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000031):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_SimSensorRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getOpenLoopCommandMtq
        - function ID: 00000032
        - description: OpenLoopCommandMtq
    """
    def req_getOpenLoopCommandMtq(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000032
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000032, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getOpenLoopCommandMtq
        - function ID: 00000032
        - description: OpenLoopCommandMtq
    """
    def resp_getOpenLoopCommandMtq(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000032):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_OpenLoopCommandMtq.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getOpenLoopCommandRwl
        - function ID: 00000033
        - description: OpenLoopCommandRwl
    """
    def req_getOpenLoopCommandRwl(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000033
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000033, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getOpenLoopCommandRwl
        - function ID: 00000033
        - description: OpenLoopCommandRwl
    """
    def resp_getOpenLoopCommandRwl(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000033):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_OpenLoopCommandRwl.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getOpenLoopCommandHxyzRW
        - function ID: 00000034
        - description: OpenLoopCommandHxyzRW
    """
    def req_getOpenLoopCommandHxyzRW(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000034
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000034, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getOpenLoopCommandHxyzRW
        - function ID: 00000034
        - description: OpenLoopCommandHxyzRW
    """
    def resp_getOpenLoopCommandHxyzRW(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000034):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_OpenLoopCommandHxyzRW.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getReferenceRpy
        - function ID: 00000035
        - description: Reference roll, pitch and yaw values for 3-axis wheel control
    """
    def req_getReferenceRpy(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000035
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000035, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getReferenceRpy
        - function ID: 00000035
        - description: Reference roll, pitch and yaw values for 3-axis wheel control
    """
    def resp_getReferenceRpy(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000035):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ReferenceRpy.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getReferenceTarget
        - function ID: 00000036
        - description: Reference target location for ground and target tracking controller
    """
    def req_getReferenceTarget(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000036
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000036, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getReferenceTarget
        - function ID: 00000036
        - description: Reference target location for ground and target tracking controller
    """
    def resp_getReferenceTarget(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000036):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ReferenceTarget.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getReferenceIrcVector
        - function ID: 00000037
        - description: Reference IRC vector for inertial target tracking controller
    """
    def req_getReferenceIrcVector(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000037
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000037, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getReferenceIrcVector
        - function ID: 00000037
        - description: Reference IRC vector for inertial target tracking controller
    """
    def resp_getReferenceIrcVector(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000037):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ReferenceIrcVector.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getReferenceFmcParam
        - function ID: 00000038
        - description: Reference parameters for FMC scan
    """
    def req_getReferenceFmcParam(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000038
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000038, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getReferenceFmcParam
        - function ID: 00000038
        - description: Reference parameters for FMC scan
    """
    def resp_getReferenceFmcParam(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000038):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_ReferenceFmcParam.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getCubeNodePortMap
        - function ID: 00000039
        - description: The configured port map of all CubeNode-Quads
    """
    def req_getCubeNodePortMap(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000039
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000039, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getCubeNodePortMap
        - function ID: 00000039
        - description: The configured port map of all CubeNode-Quads
    """
    def resp_getCubeNodePortMap(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000039):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_CubeNodePortMap.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmHil
        - function ID: 0000003A
        - description: HIL telemetry
    """
    def req_getTlmHil(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000003A
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000003A, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmHil
        - function ID: 0000003A
        - description: HIL telemetry
    """
    def resp_getTlmHil(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000003A):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmHil.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmExecutionPoint
        - function ID: 0000003B
        - description: Current execution point
    """
    def req_getTlmExecutionPoint(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000003B
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000003B, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmExecutionPoint
        - function ID: 0000003B
        - description: Current execution point
    """
    def resp_getTlmExecutionPoint(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000003B):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmExecutionPoint.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmAsgp4
        - function ID: 0000003C
        - description: Augmented orbital parameters
    """
    def req_getTlmAsgp4(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000003C
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000003C, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmAsgp4
        - function ID: 0000003C
        - description: Augmented orbital parameters
    """
    def resp_getTlmAsgp4(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000003C):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmAsgp4.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmNodeInitState
        - function ID: 0000003D
        - description: Current initialization state of each node
    """
    def req_getTlmNodeInitState(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000003D
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000003D, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmNodeInitState
        - function ID: 0000003D
        - description: Current initialization state of each node
    """
    def resp_getTlmNodeInitState(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000003D):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmNodeInitState.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmLitefuforsHealth
        - function ID: 0000003E
        - description: Health telemetry for CubeNode LITEFUFORS
    """
    def req_getTlmLitefuforsHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000003E
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000003E, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmLitefuforsHealth
        - function ID: 0000003E
        - description: Health telemetry for CubeNode LITEFUFORS
    """
    def resp_getTlmLitefuforsHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000003E):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmLitefuforsHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getFileTransferSetup
        - function ID: 0000003F
        - description: Setup a file transfer
    """
    def req_getFileTransferSetup(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000003F
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000003F, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getFileTransferSetup
        - function ID: 0000003F
        - description: Setup a file transfer
    """
    def resp_getFileTransferSetup(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000003F):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_FileTransferSetup.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getFileTransferStatus
        - function ID: 00000040
        - description: File Transfer Status
    """
    def req_getFileTransferStatus(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000040
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000040, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getFileTransferStatus
        - function ID: 00000040
        - description: File Transfer Status
    """
    def resp_getFileTransferStatus(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000040):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_FileTransferStatus.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getFileInfo
        - function ID: 00000041
        - description: Cached file information after calling FileTransferSetup
    """
    def req_getFileInfo(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000041
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000041, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getFileInfo
        - function ID: 00000041
        - description: Cached file information after calling FileTransferSetup
    """
    def resp_getFileInfo(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000041):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_FileInfo.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorRawCss
        - function ID: 00000042
        - description: Raw CSS sensor telemetry
    """
    def req_getTlmSensorRawCss(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000042
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000042, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorRawCss
        - function ID: 00000042
        - description: Raw CSS sensor telemetry
    """
    def resp_getTlmSensorRawCss(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000042):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorRawCss.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorRawMag
        - function ID: 00000043
        - description: Raw MAG sensor telemetry
    """
    def req_getTlmSensorRawMag(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000043
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000043, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorRawMag
        - function ID: 00000043
        - description: Raw MAG sensor telemetry
    """
    def resp_getTlmSensorRawMag(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000043):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorRawMag.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorRawGyro
        - function ID: 00000044
        - description: Raw GYRO sensor telemetry
    """
    def req_getTlmSensorRawGyro(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000044
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000044, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorRawGyro
        - function ID: 00000044
        - description: Raw GYRO sensor telemetry
    """
    def resp_getTlmSensorRawGyro(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000044):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorRawGyro.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorRawRwl
        - function ID: 00000045
        - description: Raw RWL sensor telemetry
    """
    def req_getTlmSensorRawRwl(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000045
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000045, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorRawRwl
        - function ID: 00000045
        - description: Raw RWL sensor telemetry
    """
    def resp_getTlmSensorRawRwl(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000045):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorRawRwl.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorCalFss
        - function ID: 00000046
        - description: Calibrated FSS sensor telemetry
    """
    def req_getTlmSensorCalFss(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000046
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000046, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorCalFss
        - function ID: 00000046
        - description: Calibrated FSS sensor telemetry
    """
    def resp_getTlmSensorCalFss(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000046):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalFss.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorCalCss
        - function ID: 00000047
        - description: Calibrated CSS sensor telemetry
    """
    def req_getTlmSensorCalCss(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000047
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000047, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorCalCss
        - function ID: 00000047
        - description: Calibrated CSS sensor telemetry
    """
    def resp_getTlmSensorCalCss(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000047):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalCss.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorCalMag
        - function ID: 00000048
        - description: Calibrated MAG sensor telemetry
    """
    def req_getTlmSensorCalMag(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000048
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000048, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorCalMag
        - function ID: 00000048
        - description: Calibrated MAG sensor telemetry
    """
    def resp_getTlmSensorCalMag(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000048):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalMag.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorCalGyro
        - function ID: 00000049
        - description: Calibrated GYRO sensor telemetry
    """
    def req_getTlmSensorCalGyro(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000049
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000049, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorCalGyro
        - function ID: 00000049
        - description: Calibrated GYRO sensor telemetry
    """
    def resp_getTlmSensorCalGyro(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000049):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalGyro.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorCalHss
        - function ID: 0000004A
        - description: Calibrated HSS sensor telemetry
    """
    def req_getTlmSensorCalHss(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000004A
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000004A, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorCalHss
        - function ID: 0000004A
        - description: Calibrated HSS sensor telemetry
    """
    def resp_getTlmSensorCalHss(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000004A):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalHss.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorCalStr
        - function ID: 0000004B
        - description: Calibrated STR sensor telemetry
    """
    def req_getTlmSensorCalStr(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000004B
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000004B, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorCalStr
        - function ID: 0000004B
        - description: Calibrated STR sensor telemetry
    """
    def resp_getTlmSensorCalStr(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000004B):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalStr.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorCalGnss
        - function ID: 0000004C
        - description: Calibrated GNSS sensor telemetry
    """
    def req_getTlmSensorCalGnss(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000004C
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000004C, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorCalGnss
        - function ID: 0000004C
        - description: Calibrated GNSS sensor telemetry
    """
    def resp_getTlmSensorCalGnss(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000004C):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalGnss.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmSensorCalRwl
        - function ID: 0000004D
        - description: Calibrated RWL sensor telemetry
    """
    def req_getTlmSensorCalRwl(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000004D
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000004D, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmSensorCalRwl
        - function ID: 0000004D
        - description: Calibrated RWL sensor telemetry
    """
    def resp_getTlmSensorCalRwl(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000004D):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmSensorCalRwl.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmModels
        - function ID: 0000004E
        - description: Models telemetry
    """
    def req_getTlmModels(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000004E
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000004E, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmModels
        - function ID: 0000004E
        - description: Models telemetry
    """
    def resp_getTlmModels(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000004E):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmModels.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmEstimatorMain
        - function ID: 0000004F
        - description: Main estimator telemetry
    """
    def req_getTlmEstimatorMain(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000004F
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000004F, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmEstimatorMain
        - function ID: 0000004F
        - description: Main estimator telemetry
    """
    def resp_getTlmEstimatorMain(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000004F):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmEstimatorMain.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmEstimatorBackup
        - function ID: 00000050
        - description: Backup estimator telemetry
    """
    def req_getTlmEstimatorBackup(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000050
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000050, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmEstimatorBackup
        - function ID: 00000050
        - description: Backup estimator telemetry
    """
    def resp_getTlmEstimatorBackup(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000050):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmEstimatorBackup.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmEstimatorMainHighRes
        - function ID: 00000051
        - description: Main estimator high-resolution telemetry
    """
    def req_getTlmEstimatorMainHighRes(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000051
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000051, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmEstimatorMainHighRes
        - function ID: 00000051
        - description: Main estimator high-resolution telemetry
    """
    def resp_getTlmEstimatorMainHighRes(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000051):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmEstimatorMainHighRes.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmController
        - function ID: 00000052
        - description: Controller telemetry
    """
    def req_getTlmController(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000052
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000052, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmController
        - function ID: 00000052
        - description: Controller telemetry
    """
    def resp_getTlmController(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000052):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmController.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmGnssRaw
        - function ID: 00000053
        - description: Raw GNSS sensor telemetry
    """
    def req_getTlmGnssRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000053
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000053, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmGnssRaw
        - function ID: 00000053
        - description: Raw GNSS sensor telemetry
    """
    def resp_getTlmGnssRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000053):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmGnssRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmExtSensorRaw
        - function ID: 00000054
        - description: Raw external sensor telemetry
    """
    def req_getTlmExtSensorRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000054
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000054, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmExtSensorRaw
        - function ID: 00000054
        - description: Raw external sensor telemetry
    """
    def resp_getTlmExtSensorRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000054):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmExtSensorRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmStrPst3sRaw
        - function ID: 00000055
        - description: Raw PST3S star tracker telemetry
    """
    def req_getTlmStrPst3sRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000055
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000055, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmStrPst3sRaw
        - function ID: 00000055
        - description: Raw PST3S star tracker telemetry
    """
    def resp_getTlmStrPst3sRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000055):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrPst3sRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmFssCubeSenseSunRaw
        - function ID: 00000056
        - description: Raw CubeSense Sun telemetry
    """
    def req_getTlmFssCubeSenseSunRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000056
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000056, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmFssCubeSenseSunRaw
        - function ID: 00000056
        - description: Raw CubeSense Sun telemetry
    """
    def resp_getTlmFssCubeSenseSunRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000056):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmFssCubeSenseSunRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmHssCubeSenseEarthRaw
        - function ID: 00000057
        - description: Raw CubeSense Earth telemetry
    """
    def req_getTlmHssCubeSenseEarthRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000057
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000057, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmHssCubeSenseEarthRaw
        - function ID: 00000057
        - description: Raw CubeSense Earth telemetry
    """
    def resp_getTlmHssCubeSenseEarthRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000057):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmHssCubeSenseEarthRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmRwlNssRwlRaw
        - function ID: 00000058
        - description: Raw NSSRWL sensor telemetry
    """
    def req_getTlmRwlNssRwlRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000058
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000058, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmRwlNssRwlRaw
        - function ID: 00000058
        - description: Raw NSSRWL sensor telemetry
    """
    def resp_getTlmRwlNssRwlRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000058):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmRwlNssRwlRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmStrCubeStarRaw
        - function ID: 00000059
        - description: Raw CubeStar telemetry
    """
    def req_getTlmStrCubeStarRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000059
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000059, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmStrCubeStarRaw
        - function ID: 00000059
        - description: Raw CubeStar telemetry
    """
    def resp_getTlmStrCubeStarRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000059):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrCubeStarRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmGyrLitefuforsRaw
        - function ID: 0000005A
        - description: Raw LITEF uFORS sensor telemetry
    """
    def req_getTlmGyrLitefuforsRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000005A
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000005A, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmGyrLitefuforsRaw
        - function ID: 0000005A
        - description: Raw LITEF uFORS sensor telemetry
    """
    def resp_getTlmGyrLitefuforsRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000005A):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmGyrLitefuforsRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmStrCubeAurigaRaw
        - function ID: 0000005B
        - description: Raw CubeStar telemetry
    """
    def req_getTlmStrCubeAurigaRaw(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000005B
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000005B, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmStrCubeAurigaRaw
        - function ID: 0000005B
        - description: Raw CubeStar telemetry
    """
    def resp_getTlmStrCubeAurigaRaw(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000005B):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrCubeAurigaRaw.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmAcpExecution
        - function ID: 0000005C
        - description: ACP execution telemetry
    """
    def req_getTlmAcpExecution(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000005C
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000005C, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmAcpExecution
        - function ID: 0000005C
        - description: ACP execution telemetry
    """
    def resp_getTlmAcpExecution(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000005C):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmAcpExecution.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmTorquerCurrents
        - function ID: 0000005D
        - description: Current measurements
    """
    def req_getTlmTorquerCurrents(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000005D
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000005D, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmTorquerCurrents
        - function ID: 0000005D
        - description: Current measurements
    """
    def resp_getTlmTorquerCurrents(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000005D):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmTorquerCurrents.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmCubeComputerHealth
        - function ID: 0000005E
        - description: Health telemetry for ADCS CubeComputer
    """
    def req_getTlmCubeComputerHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000005E
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000005E, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmCubeComputerHealth
        - function ID: 0000005E
        - description: Health telemetry for ADCS CubeComputer
    """
    def resp_getTlmCubeComputerHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000005E):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmCubeComputerHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmFssCubeSenseSunHealth
        - function ID: 0000005F
        - description: Health telemetry for CubeSense Sun
    """
    def req_getTlmFssCubeSenseSunHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x0000005F
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x0000005F, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmFssCubeSenseSunHealth
        - function ID: 0000005F
        - description: Health telemetry for CubeSense Sun
    """
    def resp_getTlmFssCubeSenseSunHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x0000005F):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmFssCubeSenseSunHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmHssCubeSenseEarthHealth
        - function ID: 00000060
        - description: Health telemetry for CubeSense Earth
    """
    def req_getTlmHssCubeSenseEarthHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000060
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000060, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmHssCubeSenseEarthHealth
        - function ID: 00000060
        - description: Health telemetry for CubeSense Earth
    """
    def resp_getTlmHssCubeSenseEarthHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000060):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmHssCubeSenseEarthHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmCubeMagHealth
        - function ID: 00000061
        - description: Health telemetry for CubeMag magnetometer
    """
    def req_getTlmCubeMagHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000061
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000061, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmCubeMagHealth
        - function ID: 00000061
        - description: Health telemetry for CubeMag magnetometer
    """
    def resp_getTlmCubeMagHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000061):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmCubeMagHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmRwlHealth
        - function ID: 00000062
        - description: Health telemetry for reaction wheels
    """
    def req_getTlmRwlHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000062
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000062, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmRwlHealth
        - function ID: 00000062
        - description: Health telemetry for reaction wheels
    """
    def resp_getTlmRwlHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000062):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmRwlHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmStrPst3sHealth
        - function ID: 00000063
        - description: Health telemetry for CubeNode PST3S
    """
    def req_getTlmStrPst3sHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000063
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000063, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmStrPst3sHealth
        - function ID: 00000063
        - description: Health telemetry for CubeNode PST3S
    """
    def resp_getTlmStrPst3sHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000063):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrPst3sHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmNssRwlHealth
        - function ID: 00000064
        - description: Health telemetry for CubeNode NSSRWL
    """
    def req_getTlmNssRwlHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000064
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000064, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmNssRwlHealth
        - function ID: 00000064
        - description: Health telemetry for CubeNode NSSRWL
    """
    def resp_getTlmNssRwlHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000064):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmNssRwlHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmStrHealth
        - function ID: 00000065
        - description: Health telemetry for CubeStar star camera
    """
    def req_getTlmStrHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000065
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000065, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmStrHealth
        - function ID: 00000065
        - description: Health telemetry for CubeStar star camera
    """
    def resp_getTlmStrHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000065):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmGnssUartStatus
        - function ID: 00000066
        - description: Status telemetry for GNSS UART
    """
    def req_getTlmGnssUartStatus(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000066
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000066, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmGnssUartStatus
        - function ID: 00000066
        - description: Status telemetry for GNSS UART
    """
    def resp_getTlmGnssUartStatus(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000066):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmGnssUartStatus.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance

    ############################################################################################################
    """
    Request function for FIDL method: getTlmStrAurigaHealth
        - function ID: 00000067
        - description: Health telemetry for CubeAuriga star camera
    """
    def req_getTlmStrAurigaHealth(self, e__CmdTargetNode__cmdTargetNode):
        requestBytes = bytearray()
    
        if not self.rawSerDesSupport:
            fpHeaderInstance = SerDesHelpers.struct_FPHeader()
    
            fpHeaderInstance.u16ProtoId = self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID
            fpHeaderInstance.u32FuncId = 0x00000067
            fpHeaderInstance.u16seqId = 0
            fpHeaderInstance.u8ErrCode = 0
    
            requestBytes += fpHeaderInstance.serialize()
    
        requestBytes += FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.enum_CmdTargetNode(e__CmdTargetNode__cmdTargetNode).serialize()
    
        if not self.rawSerDesSupport:
            return requestBytes
        else:
            return (0x00000067, requestBytes)

    ############################################################################################################
    """
    Response function for FIDL method: getTlmStrAurigaHealth
        - function ID: 00000067
        - description: Health telemetry for CubeAuriga star camera
    """
    def resp_getTlmStrAurigaHealth(self, data):
        # (key, value) = (output arg name, output arg data)
        responseInstance = {}
    
        if not self.rawSerDesSupport:
            fpHeaderInstance, headerBytesProcessed = SerDesHelpers.struct_FPHeader.deserialize(data, 0)
    
            if (fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID) or (fpHeaderInstance.u32FuncId != 0x00000067):
               raise Exception("Protocol ID and/or Function ID do not match to the called response method!")
    
            currentPos = headerBytesProcessed
        else:
            currentPos = 0
    
    
        field, bytesProcessed = SerDesHelpers.serdesType_basic.deserialize("int32", data, currentPos)
        responseInstance["t__int32__adcsErrorCode"] = field
        currentPos += bytesProcessed
    
        field, bytesProcessed = FP_API_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8.struct_TlmStrAurigaHealth.deserialize(data, currentPos)
        responseInstance["s__returnVal"] = field
        currentPos += bytesProcessed
    
        return responseInstance


    ############################################################################################################
    """
    Deserializes the provided bytearray and returns a dictionary of parsed values for the response;
    functionId parameter shall be supplied if the class is used in rawSerDesSupport mode, otherwise
    it is extracted from the FP header
    """
    def resp_parse(self, respBytes, functionId : int = 0):
        if not self.rawSerDesSupport:
            # try to parse FunctionProtocol header
            (fpHeaderInstance, bytesProcessed) = SerDesHelpers.struct_FPHeader.deserialize(respBytes, 0)
            funcId = fpHeaderInstance.u32FuncId

            if fpHeaderInstance.u16ProtoId != self.const_CUBEADCS_GEN2_CUBECOMPUTERCONTROLPROGRAM8_PROTOCOL_ID:
                raise Exception("Unsupported protocol ID", fpHeaderInstance.u16ProtoId)
        else:
            funcId = functionId

        if funcId in self.responseParsersDict:
            respParserFunc = self.responseParsersDict[funcId]
            return respParserFunc(respBytes) if respParserFunc is not None else None
        else:
            raise Exception('Unsupported function id', hex(funcId))
    ############################################################################################################
    """
    Returns the Protocol version as a string vM.m
    """
    def get_version(self):
        return f'v{self.versionMajor}.{self.versionMinor}'
    ############################################################################################################

