# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class BaseConjunctionData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tca': 'datetime',
        'miss_distance': 'float',
        'relative_position_r': 'float',
        'relative_position_t': 'float',
        'relative_position_n': 'float',
        'relative_speed': 'float',
        'relative_velocity_r': 'float',
        'relative_velocity_t': 'float',
        'relative_velocity_n': 'float',
        'apparent_incidence_angle': 'float',
        'event_altitude': 'float',
        'combined_hard_body_radius': 'float',
        'collision_probability': 'float',
        'collision_probability_method': 'str',
        'risk_level': 'str',
        'screening_type': 'str',
        'max_scaled_collision_probability': 'ScaledCollisionProbability',
        'is_in_dilution_zone': 'bool'
    }

    attribute_map = {
        'tca': 'tca',
        'miss_distance': 'missDistance',
        'relative_position_r': 'relativePositionR',
        'relative_position_t': 'relativePositionT',
        'relative_position_n': 'relativePositionN',
        'relative_speed': 'relativeSpeed',
        'relative_velocity_r': 'relativeVelocityR',
        'relative_velocity_t': 'relativeVelocityT',
        'relative_velocity_n': 'relativeVelocityN',
        'apparent_incidence_angle': 'apparentIncidenceAngle',
        'event_altitude': 'eventAltitude',
        'combined_hard_body_radius': 'combinedHardBodyRadius',
        'collision_probability': 'collisionProbability',
        'collision_probability_method': 'collisionProbabilityMethod',
        'risk_level': 'riskLevel',
        'screening_type': 'screeningType',
        'max_scaled_collision_probability': 'maxScaledCollisionProbability',
        'is_in_dilution_zone': 'isInDilutionZone'
    }

    def __init__(self, tca=None, miss_distance=None, relative_position_r=None, relative_position_t=None, relative_position_n=None, relative_speed=None, relative_velocity_r=None, relative_velocity_t=None, relative_velocity_n=None, apparent_incidence_angle=None, event_altitude=None, combined_hard_body_radius=None, collision_probability=None, collision_probability_method=None, risk_level=None, screening_type=None, max_scaled_collision_probability=None, is_in_dilution_zone=None, local_vars_configuration=None):  # noqa: E501
        """BaseConjunctionData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._tca = None
        self._miss_distance = None
        self._relative_position_r = None
        self._relative_position_t = None
        self._relative_position_n = None
        self._relative_speed = None
        self._relative_velocity_r = None
        self._relative_velocity_t = None
        self._relative_velocity_n = None
        self._apparent_incidence_angle = None
        self._event_altitude = None
        self._combined_hard_body_radius = None
        self._collision_probability = None
        self._collision_probability_method = None
        self._risk_level = None
        self._screening_type = None
        self._max_scaled_collision_probability = None
        self._is_in_dilution_zone = None
        self.discriminator = None

        if tca is not None:
            self.tca = tca
        if miss_distance is not None:
            self.miss_distance = miss_distance
        if relative_position_r is not None:
            self.relative_position_r = relative_position_r
        if relative_position_t is not None:
            self.relative_position_t = relative_position_t
        if relative_position_n is not None:
            self.relative_position_n = relative_position_n
        if relative_speed is not None:
            self.relative_speed = relative_speed
        if relative_velocity_r is not None:
            self.relative_velocity_r = relative_velocity_r
        if relative_velocity_t is not None:
            self.relative_velocity_t = relative_velocity_t
        if relative_velocity_n is not None:
            self.relative_velocity_n = relative_velocity_n
        if apparent_incidence_angle is not None:
            self.apparent_incidence_angle = apparent_incidence_angle
        if event_altitude is not None:
            self.event_altitude = event_altitude
        if combined_hard_body_radius is not None:
            self.combined_hard_body_radius = combined_hard_body_radius
        if collision_probability is not None:
            self.collision_probability = collision_probability
        if collision_probability_method is not None:
            self.collision_probability_method = collision_probability_method
        if risk_level is not None:
            self.risk_level = risk_level
        if screening_type is not None:
            self.screening_type = screening_type
        if max_scaled_collision_probability is not None:
            self.max_scaled_collision_probability = max_scaled_collision_probability
        if is_in_dilution_zone is not None:
            self.is_in_dilution_zone = is_in_dilution_zone

    @property
    def tca(self):
        """Gets the tca of this BaseConjunctionData.  # noqa: E501


        :return: The tca of this BaseConjunctionData.  # noqa: E501
        :rtype: datetime
        """
        return self._tca

    @tca.setter
    def tca(self, tca):
        """Sets the tca of this BaseConjunctionData.


        :param tca: The tca of this BaseConjunctionData.  # noqa: E501
        :type tca: datetime
        """

        self._tca = tca

    @property
    def miss_distance(self):
        """Gets the miss_distance of this BaseConjunctionData.  # noqa: E501


        :return: The miss_distance of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._miss_distance

    @miss_distance.setter
    def miss_distance(self, miss_distance):
        """Sets the miss_distance of this BaseConjunctionData.


        :param miss_distance: The miss_distance of this BaseConjunctionData.  # noqa: E501
        :type miss_distance: float
        """

        self._miss_distance = miss_distance

    @property
    def relative_position_r(self):
        """Gets the relative_position_r of this BaseConjunctionData.  # noqa: E501


        :return: The relative_position_r of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._relative_position_r

    @relative_position_r.setter
    def relative_position_r(self, relative_position_r):
        """Sets the relative_position_r of this BaseConjunctionData.


        :param relative_position_r: The relative_position_r of this BaseConjunctionData.  # noqa: E501
        :type relative_position_r: float
        """

        self._relative_position_r = relative_position_r

    @property
    def relative_position_t(self):
        """Gets the relative_position_t of this BaseConjunctionData.  # noqa: E501


        :return: The relative_position_t of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._relative_position_t

    @relative_position_t.setter
    def relative_position_t(self, relative_position_t):
        """Sets the relative_position_t of this BaseConjunctionData.


        :param relative_position_t: The relative_position_t of this BaseConjunctionData.  # noqa: E501
        :type relative_position_t: float
        """

        self._relative_position_t = relative_position_t

    @property
    def relative_position_n(self):
        """Gets the relative_position_n of this BaseConjunctionData.  # noqa: E501


        :return: The relative_position_n of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._relative_position_n

    @relative_position_n.setter
    def relative_position_n(self, relative_position_n):
        """Sets the relative_position_n of this BaseConjunctionData.


        :param relative_position_n: The relative_position_n of this BaseConjunctionData.  # noqa: E501
        :type relative_position_n: float
        """

        self._relative_position_n = relative_position_n

    @property
    def relative_speed(self):
        """Gets the relative_speed of this BaseConjunctionData.  # noqa: E501


        :return: The relative_speed of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._relative_speed

    @relative_speed.setter
    def relative_speed(self, relative_speed):
        """Sets the relative_speed of this BaseConjunctionData.


        :param relative_speed: The relative_speed of this BaseConjunctionData.  # noqa: E501
        :type relative_speed: float
        """

        self._relative_speed = relative_speed

    @property
    def relative_velocity_r(self):
        """Gets the relative_velocity_r of this BaseConjunctionData.  # noqa: E501


        :return: The relative_velocity_r of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._relative_velocity_r

    @relative_velocity_r.setter
    def relative_velocity_r(self, relative_velocity_r):
        """Sets the relative_velocity_r of this BaseConjunctionData.


        :param relative_velocity_r: The relative_velocity_r of this BaseConjunctionData.  # noqa: E501
        :type relative_velocity_r: float
        """

        self._relative_velocity_r = relative_velocity_r

    @property
    def relative_velocity_t(self):
        """Gets the relative_velocity_t of this BaseConjunctionData.  # noqa: E501


        :return: The relative_velocity_t of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._relative_velocity_t

    @relative_velocity_t.setter
    def relative_velocity_t(self, relative_velocity_t):
        """Sets the relative_velocity_t of this BaseConjunctionData.


        :param relative_velocity_t: The relative_velocity_t of this BaseConjunctionData.  # noqa: E501
        :type relative_velocity_t: float
        """

        self._relative_velocity_t = relative_velocity_t

    @property
    def relative_velocity_n(self):
        """Gets the relative_velocity_n of this BaseConjunctionData.  # noqa: E501


        :return: The relative_velocity_n of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._relative_velocity_n

    @relative_velocity_n.setter
    def relative_velocity_n(self, relative_velocity_n):
        """Sets the relative_velocity_n of this BaseConjunctionData.


        :param relative_velocity_n: The relative_velocity_n of this BaseConjunctionData.  # noqa: E501
        :type relative_velocity_n: float
        """

        self._relative_velocity_n = relative_velocity_n

    @property
    def apparent_incidence_angle(self):
        """Gets the apparent_incidence_angle of this BaseConjunctionData.  # noqa: E501


        :return: The apparent_incidence_angle of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._apparent_incidence_angle

    @apparent_incidence_angle.setter
    def apparent_incidence_angle(self, apparent_incidence_angle):
        """Sets the apparent_incidence_angle of this BaseConjunctionData.


        :param apparent_incidence_angle: The apparent_incidence_angle of this BaseConjunctionData.  # noqa: E501
        :type apparent_incidence_angle: float
        """

        self._apparent_incidence_angle = apparent_incidence_angle

    @property
    def event_altitude(self):
        """Gets the event_altitude of this BaseConjunctionData.  # noqa: E501


        :return: The event_altitude of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._event_altitude

    @event_altitude.setter
    def event_altitude(self, event_altitude):
        """Sets the event_altitude of this BaseConjunctionData.


        :param event_altitude: The event_altitude of this BaseConjunctionData.  # noqa: E501
        :type event_altitude: float
        """

        self._event_altitude = event_altitude

    @property
    def combined_hard_body_radius(self):
        """Gets the combined_hard_body_radius of this BaseConjunctionData.  # noqa: E501


        :return: The combined_hard_body_radius of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._combined_hard_body_radius

    @combined_hard_body_radius.setter
    def combined_hard_body_radius(self, combined_hard_body_radius):
        """Sets the combined_hard_body_radius of this BaseConjunctionData.


        :param combined_hard_body_radius: The combined_hard_body_radius of this BaseConjunctionData.  # noqa: E501
        :type combined_hard_body_radius: float
        """

        self._combined_hard_body_radius = combined_hard_body_radius

    @property
    def collision_probability(self):
        """Gets the collision_probability of this BaseConjunctionData.  # noqa: E501


        :return: The collision_probability of this BaseConjunctionData.  # noqa: E501
        :rtype: float
        """
        return self._collision_probability

    @collision_probability.setter
    def collision_probability(self, collision_probability):
        """Sets the collision_probability of this BaseConjunctionData.


        :param collision_probability: The collision_probability of this BaseConjunctionData.  # noqa: E501
        :type collision_probability: float
        """

        self._collision_probability = collision_probability

    @property
    def collision_probability_method(self):
        """Gets the collision_probability_method of this BaseConjunctionData.  # noqa: E501


        :return: The collision_probability_method of this BaseConjunctionData.  # noqa: E501
        :rtype: str
        """
        return self._collision_probability_method

    @collision_probability_method.setter
    def collision_probability_method(self, collision_probability_method):
        """Sets the collision_probability_method of this BaseConjunctionData.


        :param collision_probability_method: The collision_probability_method of this BaseConjunctionData.  # noqa: E501
        :type collision_probability_method: str
        """
        allowed_values = ["AKELLAALFRIEND_2000", "ALFANO_2005", "ALFANO_MAX_PROBABILITY", "ALFANO_PARAL_2007", "ALFANO_TUBES_2007", "ALFANO_VOXELS_2006", "ALFRIEND_1999", "CHAN_1997", "CHAN_2003", "FOSTER_1992", "MCKINLEY_2006", "PATERA_2001", "PATERA_2003", "PATERA_2005", "COPPOLA_2012", "COPOC", "ELROD", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and collision_probability_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `collision_probability_method` ({0}), must be one of {1}"  # noqa: E501
                .format(collision_probability_method, allowed_values)
            )

        self._collision_probability_method = collision_probability_method

    @property
    def risk_level(self):
        """Gets the risk_level of this BaseConjunctionData.  # noqa: E501


        :return: The risk_level of this BaseConjunctionData.  # noqa: E501
        :rtype: str
        """
        return self._risk_level

    @risk_level.setter
    def risk_level(self, risk_level):
        """Sets the risk_level of this BaseConjunctionData.


        :param risk_level: The risk_level of this BaseConjunctionData.  # noqa: E501
        :type risk_level: str
        """
        allowed_values = ["LOW", "MEDIUM", "HIGH", "CRITICAL", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and risk_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `risk_level` ({0}), must be one of {1}"  # noqa: E501
                .format(risk_level, allowed_values)
            )

        self._risk_level = risk_level

    @property
    def screening_type(self):
        """Gets the screening_type of this BaseConjunctionData.  # noqa: E501


        :return: The screening_type of this BaseConjunctionData.  # noqa: E501
        :rtype: str
        """
        return self._screening_type

    @screening_type.setter
    def screening_type(self, screening_type):
        """Sets the screening_type of this BaseConjunctionData.


        :param screening_type: The screening_type of this BaseConjunctionData.  # noqa: E501
        :type screening_type: str
        """
        allowed_values = ["CAT_VS_CAT", "CAT_VS_CDM", "CAT_VS_OPS", "CAT_VS_TLE", "CDM_VS_CAT", "CDM_VS_CDM", "CDM_VS_OPS", "CDM_VS_TLE", "OPS_VS_CAT", "OPS_VS_CDM", "OPS_VS_OPS", "OPS_VS_TLE", "TLE_VS_CAT", "TLE_VS_CDM", "TLE_VS_OPS", "TLE_VS_TLE", "MAN_VS_CDM", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and screening_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `screening_type` ({0}), must be one of {1}"  # noqa: E501
                .format(screening_type, allowed_values)
            )

        self._screening_type = screening_type

    @property
    def max_scaled_collision_probability(self):
        """Gets the max_scaled_collision_probability of this BaseConjunctionData.  # noqa: E501


        :return: The max_scaled_collision_probability of this BaseConjunctionData.  # noqa: E501
        :rtype: ScaledCollisionProbability
        """
        return self._max_scaled_collision_probability

    @max_scaled_collision_probability.setter
    def max_scaled_collision_probability(self, max_scaled_collision_probability):
        """Sets the max_scaled_collision_probability of this BaseConjunctionData.


        :param max_scaled_collision_probability: The max_scaled_collision_probability of this BaseConjunctionData.  # noqa: E501
        :type max_scaled_collision_probability: ScaledCollisionProbability
        """

        self._max_scaled_collision_probability = max_scaled_collision_probability

    @property
    def is_in_dilution_zone(self):
        """Gets the is_in_dilution_zone of this BaseConjunctionData.  # noqa: E501


        :return: The is_in_dilution_zone of this BaseConjunctionData.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_dilution_zone

    @is_in_dilution_zone.setter
    def is_in_dilution_zone(self, is_in_dilution_zone):
        """Sets the is_in_dilution_zone of this BaseConjunctionData.


        :param is_in_dilution_zone: The is_in_dilution_zone of this BaseConjunctionData.  # noqa: E501
        :type is_in_dilution_zone: bool
        """

        self._is_in_dilution_zone = is_in_dilution_zone

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseConjunctionData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseConjunctionData):
            return True

        return self.to_dict() != other.to_dict()
