# coding: utf-8

"""
    EnduroSat SpaceOps REST API

    Documentation for EnduroSat SpaceOps REST API  # noqa: E501

    The version of the OpenAPI document: 0.34.7
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from endurosat_api.configuration import Configuration


class CatalogueObjectWithKeplerianElements(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'catalogue_id': 'int',
        'catalogue_name': 'str',
        'object_name': 'str',
        'cospar_id': 'str',
        'object_type': 'str',
        'manoeuvrable': 'str',
        'hard_body_radius': 'float',
        'orbital_period': 'float',
        'perigee_altitude': 'float',
        'apogee_altitude': 'float',
        'semi_major_axis': 'float',
        'eccentricity': 'float',
        'inclination': 'float',
        'ra_of_asc_node': 'float',
        'arg_of_pericenter': 'float',
        'true_anomaly': 'float',
        'arg_of_latitude': 'float'
    }

    attribute_map = {
        'catalogue_id': 'catalogueId',
        'catalogue_name': 'catalogueName',
        'object_name': 'objectName',
        'cospar_id': 'cosparId',
        'object_type': 'objectType',
        'manoeuvrable': 'manoeuvrable',
        'hard_body_radius': 'hardBodyRadius',
        'orbital_period': 'orbitalPeriod',
        'perigee_altitude': 'perigeeAltitude',
        'apogee_altitude': 'apogeeAltitude',
        'semi_major_axis': 'semiMajorAxis',
        'eccentricity': 'eccentricity',
        'inclination': 'inclination',
        'ra_of_asc_node': 'raOfAscNode',
        'arg_of_pericenter': 'argOfPericenter',
        'true_anomaly': 'trueAnomaly',
        'arg_of_latitude': 'argOfLatitude'
    }

    def __init__(self, catalogue_id=None, catalogue_name=None, object_name=None, cospar_id=None, object_type=None, manoeuvrable=None, hard_body_radius=None, orbital_period=None, perigee_altitude=None, apogee_altitude=None, semi_major_axis=None, eccentricity=None, inclination=None, ra_of_asc_node=None, arg_of_pericenter=None, true_anomaly=None, arg_of_latitude=None, local_vars_configuration=None):  # noqa: E501
        """CatalogueObjectWithKeplerianElements - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._catalogue_id = None
        self._catalogue_name = None
        self._object_name = None
        self._cospar_id = None
        self._object_type = None
        self._manoeuvrable = None
        self._hard_body_radius = None
        self._orbital_period = None
        self._perigee_altitude = None
        self._apogee_altitude = None
        self._semi_major_axis = None
        self._eccentricity = None
        self._inclination = None
        self._ra_of_asc_node = None
        self._arg_of_pericenter = None
        self._true_anomaly = None
        self._arg_of_latitude = None
        self.discriminator = None

        if catalogue_id is not None:
            self.catalogue_id = catalogue_id
        if catalogue_name is not None:
            self.catalogue_name = catalogue_name
        if object_name is not None:
            self.object_name = object_name
        if cospar_id is not None:
            self.cospar_id = cospar_id
        if object_type is not None:
            self.object_type = object_type
        if manoeuvrable is not None:
            self.manoeuvrable = manoeuvrable
        if hard_body_radius is not None:
            self.hard_body_radius = hard_body_radius
        if orbital_period is not None:
            self.orbital_period = orbital_period
        if perigee_altitude is not None:
            self.perigee_altitude = perigee_altitude
        if apogee_altitude is not None:
            self.apogee_altitude = apogee_altitude
        if semi_major_axis is not None:
            self.semi_major_axis = semi_major_axis
        if eccentricity is not None:
            self.eccentricity = eccentricity
        if inclination is not None:
            self.inclination = inclination
        if ra_of_asc_node is not None:
            self.ra_of_asc_node = ra_of_asc_node
        if arg_of_pericenter is not None:
            self.arg_of_pericenter = arg_of_pericenter
        if true_anomaly is not None:
            self.true_anomaly = true_anomaly
        if arg_of_latitude is not None:
            self.arg_of_latitude = arg_of_latitude

    @property
    def catalogue_id(self):
        """Gets the catalogue_id of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The catalogue_id of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: int
        """
        return self._catalogue_id

    @catalogue_id.setter
    def catalogue_id(self, catalogue_id):
        """Sets the catalogue_id of this CatalogueObjectWithKeplerianElements.


        :param catalogue_id: The catalogue_id of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type catalogue_id: int
        """

        self._catalogue_id = catalogue_id

    @property
    def catalogue_name(self):
        """Gets the catalogue_name of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The catalogue_name of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: str
        """
        return self._catalogue_name

    @catalogue_name.setter
    def catalogue_name(self, catalogue_name):
        """Sets the catalogue_name of this CatalogueObjectWithKeplerianElements.


        :param catalogue_name: The catalogue_name of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type catalogue_name: str
        """

        self._catalogue_name = catalogue_name

    @property
    def object_name(self):
        """Gets the object_name of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The object_name of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this CatalogueObjectWithKeplerianElements.


        :param object_name: The object_name of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type object_name: str
        """

        self._object_name = object_name

    @property
    def cospar_id(self):
        """Gets the cospar_id of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The cospar_id of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: str
        """
        return self._cospar_id

    @cospar_id.setter
    def cospar_id(self, cospar_id):
        """Sets the cospar_id of this CatalogueObjectWithKeplerianElements.


        :param cospar_id: The cospar_id of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type cospar_id: str
        """

        self._cospar_id = cospar_id

    @property
    def object_type(self):
        """Gets the object_type of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The object_type of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this CatalogueObjectWithKeplerianElements.


        :param object_type: The object_type of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def manoeuvrable(self):
        """Gets the manoeuvrable of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The manoeuvrable of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: str
        """
        return self._manoeuvrable

    @manoeuvrable.setter
    def manoeuvrable(self, manoeuvrable):
        """Sets the manoeuvrable of this CatalogueObjectWithKeplerianElements.


        :param manoeuvrable: The manoeuvrable of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type manoeuvrable: str
        """
        allowed_values = ["YES", "NO", "N/A"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and manoeuvrable not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `manoeuvrable` ({0}), must be one of {1}"  # noqa: E501
                .format(manoeuvrable, allowed_values)
            )

        self._manoeuvrable = manoeuvrable

    @property
    def hard_body_radius(self):
        """Gets the hard_body_radius of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The hard_body_radius of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._hard_body_radius

    @hard_body_radius.setter
    def hard_body_radius(self, hard_body_radius):
        """Sets the hard_body_radius of this CatalogueObjectWithKeplerianElements.


        :param hard_body_radius: The hard_body_radius of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type hard_body_radius: float
        """

        self._hard_body_radius = hard_body_radius

    @property
    def orbital_period(self):
        """Gets the orbital_period of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The orbital_period of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._orbital_period

    @orbital_period.setter
    def orbital_period(self, orbital_period):
        """Sets the orbital_period of this CatalogueObjectWithKeplerianElements.


        :param orbital_period: The orbital_period of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type orbital_period: float
        """

        self._orbital_period = orbital_period

    @property
    def perigee_altitude(self):
        """Gets the perigee_altitude of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The perigee_altitude of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._perigee_altitude

    @perigee_altitude.setter
    def perigee_altitude(self, perigee_altitude):
        """Sets the perigee_altitude of this CatalogueObjectWithKeplerianElements.


        :param perigee_altitude: The perigee_altitude of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type perigee_altitude: float
        """

        self._perigee_altitude = perigee_altitude

    @property
    def apogee_altitude(self):
        """Gets the apogee_altitude of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The apogee_altitude of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._apogee_altitude

    @apogee_altitude.setter
    def apogee_altitude(self, apogee_altitude):
        """Sets the apogee_altitude of this CatalogueObjectWithKeplerianElements.


        :param apogee_altitude: The apogee_altitude of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type apogee_altitude: float
        """

        self._apogee_altitude = apogee_altitude

    @property
    def semi_major_axis(self):
        """Gets the semi_major_axis of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The semi_major_axis of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._semi_major_axis

    @semi_major_axis.setter
    def semi_major_axis(self, semi_major_axis):
        """Sets the semi_major_axis of this CatalogueObjectWithKeplerianElements.


        :param semi_major_axis: The semi_major_axis of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type semi_major_axis: float
        """

        self._semi_major_axis = semi_major_axis

    @property
    def eccentricity(self):
        """Gets the eccentricity of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The eccentricity of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._eccentricity

    @eccentricity.setter
    def eccentricity(self, eccentricity):
        """Sets the eccentricity of this CatalogueObjectWithKeplerianElements.


        :param eccentricity: The eccentricity of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type eccentricity: float
        """

        self._eccentricity = eccentricity

    @property
    def inclination(self):
        """Gets the inclination of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The inclination of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._inclination

    @inclination.setter
    def inclination(self, inclination):
        """Sets the inclination of this CatalogueObjectWithKeplerianElements.


        :param inclination: The inclination of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type inclination: float
        """

        self._inclination = inclination

    @property
    def ra_of_asc_node(self):
        """Gets the ra_of_asc_node of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The ra_of_asc_node of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._ra_of_asc_node

    @ra_of_asc_node.setter
    def ra_of_asc_node(self, ra_of_asc_node):
        """Sets the ra_of_asc_node of this CatalogueObjectWithKeplerianElements.


        :param ra_of_asc_node: The ra_of_asc_node of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type ra_of_asc_node: float
        """

        self._ra_of_asc_node = ra_of_asc_node

    @property
    def arg_of_pericenter(self):
        """Gets the arg_of_pericenter of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The arg_of_pericenter of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._arg_of_pericenter

    @arg_of_pericenter.setter
    def arg_of_pericenter(self, arg_of_pericenter):
        """Sets the arg_of_pericenter of this CatalogueObjectWithKeplerianElements.


        :param arg_of_pericenter: The arg_of_pericenter of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type arg_of_pericenter: float
        """

        self._arg_of_pericenter = arg_of_pericenter

    @property
    def true_anomaly(self):
        """Gets the true_anomaly of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The true_anomaly of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._true_anomaly

    @true_anomaly.setter
    def true_anomaly(self, true_anomaly):
        """Sets the true_anomaly of this CatalogueObjectWithKeplerianElements.


        :param true_anomaly: The true_anomaly of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type true_anomaly: float
        """

        self._true_anomaly = true_anomaly

    @property
    def arg_of_latitude(self):
        """Gets the arg_of_latitude of this CatalogueObjectWithKeplerianElements.  # noqa: E501


        :return: The arg_of_latitude of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :rtype: float
        """
        return self._arg_of_latitude

    @arg_of_latitude.setter
    def arg_of_latitude(self, arg_of_latitude):
        """Sets the arg_of_latitude of this CatalogueObjectWithKeplerianElements.


        :param arg_of_latitude: The arg_of_latitude of this CatalogueObjectWithKeplerianElements.  # noqa: E501
        :type arg_of_latitude: float
        """

        self._arg_of_latitude = arg_of_latitude

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogueObjectWithKeplerianElements):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CatalogueObjectWithKeplerianElements):
            return True

        return self.to_dict() != other.to_dict()
